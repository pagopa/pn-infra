AWSTemplateFormatVersion: 2010-09-09
Description: 'Lambda proxy stack'

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>

  ExternalChannelBaseUrl:
    Type: String

  MockExternalChannelBaseUrl:
    Type: String

  ConsolidatoreBaseUrl:
    Type: String

  MockConsolidatoreBaseUrl:
    Type: String

Resources:

  ###                       APPLICATION LOAD BALANCER                       ###
  #############################################################################
  # Application load balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internal
      IpAddressType: ipv4
      Subnets: !Ref Subnets
      SecurityGroups:
        - !Ref ReversProxyAlbWebappSecurityGroup

  # Application load balancer listener
  ApplicationLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Protocol: HTTP
      Port: 8080
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 404
            ContentType: "application/json"
            MessageBody: "{ \"error\": \"404\", \"message\": \"Load balancer rule not configured\" }"
          Order: 1

  # Application security groups
  ReversProxyAlbWebappSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: lambda-proxy-webapp-security-group
      GroupDescription: "ingres tcp 8080, egress all"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref VpcId

  # Application security groups
  LambdaProxySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: pn-lambda-proxy-webapp-security-group
      GroupDescription: "Lambda Proxy security group"
      VpcId: !Ref VpcId

  # Reverse proxy lambda resources
  LambdaProxyFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: /aws/lambda/pn-lambda-reverse-proxy

  LambdaProxyFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: EcProxyFunctionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource:
                  - !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/lambda/pn-lambda-reverse-proxy*'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:*'
              - Sid: AllowLambdaToReadParameterStore
                Action:
                  - ssm:GetParameter
                Effect: Allow
                Resource: 
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pn-DigitalDeliveriesWhitelist"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/pn-PaperDeliveriesWhitelist"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  
  LambdaProxyFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: pn-lambda-reverse-proxy
      Code:
        ZipFile: |
          function isExternalChannelCall(path){
            return path.toLowerCase().indexOf('/external-channel')>=0;
          }

          function isConsolidatoreCall(path){
            return path.toLowerCase().indexOf('/piattaforma-notifiche-ingress/')>=0;
          }

          function isDigitalDeliveriesPath(path){
              return path.toLowerCase().indexOf('/digital-deliveries/')>0;
          }

          function isPaperDeliveriesPath(path){
              return path.toLowerCase().indexOf('/paper-deliveries-engagements')>0;
          }

          function isConsolidatoreDeliveriesPath(path){
              return path.toLowerCase().indexOf('/paper-deliveries-engagement')>0;
          }

          function extractDeliveryAddress(jsonBody){
              if(jsonBody && jsonBody.receiverDigitalAddress){
                  return jsonBody.receiverDigitalAddress.toLowerCase()
              }
              
              return null;
          }

          function isDeliveryAddressWhitelisted(recipient, whitelistAsString){
              const whitelistAsArray = whitelistAsString.split(',').map((w) => {
                  return w.trim().toLowerCase()
              })
              
              if(whitelistAsArray.indexOf(recipient.toLowerCase())>=0){
                  return true;
              }
              
              return false;
          }

          function isPaperAddressPropertyMatch(prop, paperAddressProperty, whitelistedPaperAddressProperty){
            const requestFieldNotSet = ( paperAddressProperty == null || whitelistedPaperAddressProperty == undefined )
            const whitelistFieldNotSet = ( paperAddressProperty == null || whitelistedPaperAddressProperty == undefined )
            const bothFieldsNotSet = requestFieldNotSet && whitelistFieldNotSet

            console.log('[CONS] Prop match', {
              prop,
              requestFieldNotSet: requestFieldNotSet,
              whitelistFieldNotSet: whitelistFieldNotSet,
              bothFieldsNotSet: bothFieldsNotSet
            })
            
            if(bothFieldsNotSet || paperAddressProperty === whitelistedPaperAddressProperty){
              return true;
            }
              
            return false
          }

          function isPaperAddressMatch(paperAddress, whitelistedPaperAddress){
            const propsToCompare = ['receiverName', 'receiverNameRow2', 'receiverAddress', 'receiverAddressRow2', 'receiverCap', 'receiverCity', 'receiverCity2', 'receiverPr', 'receiverCountry']

            console.debug('[CONS]', paperAddress, whitelistedPaperAddress)
            
            return propsToCompare.every((p) => {
              isPaperAddressPropertyMatch(p, paperAddress[p], whitelistedPaperAddress[p])
            })
          }

          function isPaperDeliveryAddressWhitelisted(paperAddress, whitelistAsString){
            let whitelistAddresses = []
            try {
              whitelistAddresses = JSON.parse(whitelistAsString)
            } catch(e){
              console.log('invalid json addresses', whitelistAsString)
              whitelistAddresses = []
            }

            for(let i=0; i<whitelistAddresses.length; i++){
              const whitelistAddress = whitelistAddresses[i]
              if(isPaperAddressMatch(paperAddress, whitelistAddress)){
                return true
              }           
            }

            return false
          }

          function isObjectEmpty(obj){
              return Object.keys(obj).length === 0;
          }

          function filterXHeaders(headers){
              const xHeaders = {}
              for (const key in headers) {
                  if(key.toLowerCase().indexOf('x-')>=0){
                      xHeaders[key] = headers[key]
                  }
              }

              return xHeaders
          }

          async function getResponseBody(response){
              if(!response.body){
                  return null;
              }
              const contentType = response.headers.get("content-type");
              console.log('Content Type', contentType)
              if (contentType && contentType.toLowerCase().indexOf("application/json") !== -1) {
                  const data = await response.json()   
                  return JSON.stringify(data)
              }
              
              const data = await response.text()
              return data
          }

          async function getParameterFromStore(parameterName) {
            try {
              const response = await fetch(
                `http://localhost:2773/systemsmanager/parameters/get?name=${encodeURIComponent(
                  parameterName
                )}`,
                {
                  headers: {
                    'Content-Type': 'application/json',
                    "X-Aws-Parameters-Secrets-Token": process.env.AWS_SESSION_TOKEN,
                  },
                }
              );
              
              const data = await response.json()
              return data.Parameter.Value;
            } catch (err) {
              console.error("Error in get parameter ", err);
              throw new Error("Error in get parameter "+parameterName);
            }
          }

          async function forwardRequest(event, baseUrl){
              const { httpMethod, path, queryStringParameters, headers, body } = event
              
              const url = baseUrl+path.slice(1)
              
              let qs = null
              if(queryStringParameters && !isObjectEmpty(queryStringParameters)){
                  qs = queryStringParameters
              }

              const xHeaders = filterXHeaders(headers)
              xHeaders['Content-Type'] = 'application/json'
              const fetchOptions = { 
                method: httpMethod,
                headers: xHeaders
              }

              if(body){
                  fetchOptions.body = body // stringified
              }
              
              if(qs){
                  url = url+new URLSearchParams(qs)
              }

              const res = await fetch(url, fetchOptions);
              
              console.log('url', url)
              console.log('fetchOptions', fetchOptions)
              console.log('res', res)
              console.log('headers', Object.fromEntries(res.headers))
              
              if (res.ok) {
                const data = await getResponseBody(res)
                console.log('ok data', data)
                const response = {
                  statusCode: res.status,
                  headers: Object.fromEntries(res.headers)
                };
                
                if(data){
                    response.body = data
                }
                
                console.log('Lambda ok response', response)
                return response
              } else {
                const data = await getResponseBody(res)
                console.log('nok data', data)
                const response = {
                  statusCode: res.status,
                  headers: Object.fromEntries(res.headers)
                };

                if(data){
                    response.body = data
                }

                console.log('Lambda nok response', response)      
                return response
              }
          }

          async function actAsReversProxy(event){
              const { httpMethod, path } = event
              
              if(isExternalChannelCall(path)){
                console.debug('[EC] - Call')
                if(httpMethod=='PUT'){
                    console.debug('[EC] - Call PUT')
                    if(isDigitalDeliveriesPath(path)){
                        const jsonBody = JSON.parse(event.body)
                        const deliveryAddress = extractDeliveryAddress(jsonBody)
                        console.log('[EC] Delivery Address', deliveryAddress)
                        const whitelist = await getParameterFromStore('pn-DigitalDeliveriesWhitelist')
                        console.log('[EC] Whitelist', whitelist)
                        if(isDeliveryAddressWhitelisted(deliveryAddress, whitelist)){
                            return forwardRequest(event, process.env.ExternalChannelBaseUrl)
                        }
                    } else if(isPaperDeliveriesPath(path)) {
                        return forwardRequest(event, process.env.ExternalChannelBaseUrl)
                    }
                } 
                return forwardRequest(event, process.env.MockExternalChannelBaseUrl)
              } 

              if(isConsolidatoreCall(path)){
                console.debug('[CONS] - Call')
                if(httpMethod=='POST'){
                    console.debug('[CONS] - Call POST')
                    if(isConsolidatoreDeliveriesPath(path)){
                        const jsonBody = JSON.parse(event.body)
                        const paperDeliveryAddress = jsonBody
                        console.log('[CONS] Paper Delivery Address', paperDeliveryAddress)
                        const whitelist = await getParameterFromStore('pn-PaperDeliveriesWhitelist')
                        console.log('[CONS] Whitelist', whitelist)
                        if(isPaperDeliveryAddressWhitelisted(paperDeliveryAddress, whitelist)){
                            return forwardRequest(event, process.env.ConsolidatoreBaseUrl)
                        }
                    }
                } 
                return forwardRequest(event, process.env.MockConsolidatoreBaseUrl)
              }

              throw new Error('Unhandled event', event)            
          }

          exports.handler = async(event) => {

              console.log(JSON.stringify(event))

              try {
                  const response = await actAsReversProxy(event)
                  return response
              } catch(e){
                  console.log('error', e)
                  const response = {
                      statusCode: 500,
                      body: JSON.stringify({
                          message: e.message
                      })
                  }
                  
                  return response
              }
              
          };


      Handler: index.handler
      Runtime: nodejs18.x
      Environment:
        Variables:
          ExternalChannelBaseUrl: !Ref ExternalChannelBaseUrl
          MockExternalChannelBaseUrl: !Ref MockExternalChannelBaseUrl
          ConsolidatoreBaseUrl: !Ref ConsolidatoreBaseUrl
          MockConsolidatoreBaseUrl: !Ref MockConsolidatoreBaseUrl
          SSM_PARAMETER_STORE_TIMEOUT_MILLIS: 5000
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt LambdaProxySecurityGroup.GroupId
        SubnetIds: !Ref Subnets
      Role: !GetAtt LambdaProxyFunctionExecutionRole.Arn
      Timeout: 30
      TracingConfig:
        Mode: Active
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"
        - !Sub "arn:aws:lambda:${AWS::Region}:325218067255:layer:AWS-Parameters-and-Secrets-Lambda-Extension:2"         


  # Load balancer target group

  AlbLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaProxyFunction.Arn
      Principal: elasticloadbalancing.amazonaws.com
      SourceAccount: !Ref AWS::AccountId

  LambdaProxyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - AlbLambdaPermission
    Properties:
      TargetType: lambda
      Targets:
        - Id: !GetAtt LambdaProxyFunction.Arn

  # Load balancer forward rule; forward only path pattern defined with MappedPaths
  LambdaProxyLoadBalancerRoutingRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ApplicationLoadBalancerListener
      Priority: 15
      Conditions:
        - Field: path-pattern
          Values:
            - /external-channel/*
            - /external-channels/*
            - /piattaforma-notifiche-ingress/*
      Actions:
        - Type: forward
          TargetGroupArn: !Ref LambdaProxyTargetGroup
          Order: 1