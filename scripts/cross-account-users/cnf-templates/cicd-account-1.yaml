AWSTemplateFormatVersion: "2010-09-09"
Description: Template to create the IAM Policies in the CICD Account

Parameters:
  # ARN of the roles in Account DEV
  RoleAdministratorAccessDEV:
    Type: String
    Description: 'Enter the ARN of the role AdministratorAccess in Account Dev'
  
  RoleReadOnlyAccessDEV:
    Type: String
    Description: 'Enter the ARN of the Role ReadOnlyAccess in Account Dev'

  # ARN of the roles in Account HotFix
  RoleAdministratorAccessHOTFIX:
    Type: String
    Description: 'Enter the ARN of the role AdministratorAccess in Account HotFix'

  RoleReadOnlyAccessHOTFIX:
    Type: String
    Description: 'Enter the ARN of the Role ReadOnlyAccess in Account HotFix'

Resources:

  ######################
  ####### IAM ##########
  ######################

  # Policy that has Read Only for Logs, CodePipeline, CodeBuild and a permission to start builds
  PolicyReadOnly:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: PolicyReadOnlyLogsCodePipelineCodeBuild
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          # ReadOnly Logs
          - Effect: Allow
            Action: 
              - "logs:Describe*"
              - "logs:Get*"
              - "logs:List*"
              - "logs:StartQuery"
              - "logs:StopQuery"
              - "logs:TestMetricFilter"
              - "logs:FilterLogEvents"
            Resource: '*'
          # ReadOnly CodePipeline
          - Effect: Allow
            Action:
              - "codepipeline:GetPipeline"
              - "codepipeline:GetPipelineState"
              - "codepipeline:GetPipelineExecution"
              - "codepipeline:ListPipelineExecutions"
              - "codepipeline:ListActionExecutions"
              - "codepipeline:ListActionTypes"
              - "codepipeline:ListPipelines"
              - "codepipeline:ListTagsForResource"
              - "s3:ListAllMyBuckets"
              - "codestar-notifications:ListNotificationRules"
              - "codestar-notifications:ListEventTypes"
              - "codestar-notifications:ListTargets"
            Resource: "*"
          - Effect: Allow
            Action:
              - "s3:GetObject"
              - "s3:ListBucket"
              - "s3:GetBucketPolicy"
            Resource: "arn:aws:s3::*:codepipeline-*"
          - Effect: Allow
            Action:
              - "codestar-notifications:DescribeNotificationRule"
            Resource: "*"
            Condition:
              StringLike:
                "codestar-notifications:NotificationsForResource": "arn:aws:codepipeline:*"
          # ReadOnly CodeBuild
          - Effect: Allow
            Action: 
              - "codebuild:BatchGet*"
              - "codebuild:GetResourcePolicy"
              - "codebuild:List*"
              - "codebuild:DescribeTestCases"
              - "codebuild:DescribeCodeCoverages"
              - "codecommit:GetBranch"
              - "codecommit:GetCommit"
              - "codecommit:GetRepository"
              - "cloudwatch:GetMetricStatistics"
              - "events:DescribeRule"
              - "events:ListTargetsByRule"
              - "events:ListRuleNamesByTarget"
              - "logs:GetLogEvents"
            Resource: "*"
          - Effect: Allow
            Action:
              - "codestar-connections:ListConnections"
              - "codestar-connections:GetConnection"
            Resource: "arn:aws:codestar-connections:*:*:connection/*"
          - Effect: Allow
            Action:
              - "codestar-notifications:DescribeNotificationRule"
            Resource: "*"
            Condition:
              StringLike:
                "codestar-notifications:NotificationsForResource": "arn:aws:codebuild:*"
          - Effect: Allow
            Action:
              - "codestar-notifications:ListNotificationRules"
              - "codestar-notifications:ListEventTypes"
              - "codestar-notifications:ListTargets"
            Resource: "*"
          # Start a Build
          - Effect: Allow
            Action:
              - "codebuild:StartBuild"
            Resource: "*"

  # Policy that allows to assume the AdministratorAccess Role in the DEV Account (will be attached to an IAM Group)
  PolicyAssumeAdminAccessDEV:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: AssumeAdminAccessDEV
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 
              - "sts:AssumeRole"
            Resource: !Ref RoleAdministratorAccessDEV

  # Policy that allows to assume the ReadOnly Role in the DEV Account (will be attached to an IAM Group)
  PolicyAssumeReadOnlyDEV:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: AssumeReadOnlyDEV
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 
              - "sts:AssumeRole"
            Resource: !Ref RoleReadOnlyAccessDEV

  # Policy that allows to assume the AdministratorAccess Role in the HotFix Account (will be attached to an IAM Group)
  PolicyAssumeAdminAccessHOTFIX:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: AssumeAdminAccessHOTFIX
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 
              - "sts:AssumeRole"
            Resource: !Ref RoleAdministratorAccessHOTFIX

  # Policy that allows to assume the ReadOnly Role in the HotFix Account (will be attached to an IAM Group)
  PolicyAssumeReadOnlyHOTFIX:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: AssumeReadOnlyHOTFIX
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 
              - "sts:AssumeRole"
            Resource: !Ref RoleReadOnlyAccessHOTFIX

  # Role for Lambda Function
  RoleLambdaUpdateUserTagsUserEvent:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaUpdateTags_userEvent
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: 
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  
  # Policy for Lambda
  PolicyLambdaUpdateUserTagsUserEvent:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: PolicyLambdaUpdateUserTags
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "iam:*"
            Resource: "*"
      Roles:
        - !Ref RoleLambdaUpdateUserTagsUserEvent

  # Role for Lambda Function
  RoleLambdaUpdateUserTagsPolicyEvent:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaUpdateTags_policyEvent
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: 
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  
  # Policy for Lambda
  PolicyLambdaUpdateUserTagsPolicyEvent:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: PolicyLambdaUpdateUserTags_policyEvent
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "iam:*"
            Resource: "*"
      Roles:
        - !Ref RoleLambdaUpdateUserTagsPolicyEvent

  #######################
  ####### Lambda ########
  #######################

  LambdaUpdateUserTagsUserEvent:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3

          client = boto3.client("iam")

          def get_group_name(event):
              """
              Returns the name of the group from where the user was added or removed
              Return type: str
              """
              group_name = event["detail"]["requestParameters"]["groupName"]
              return group_name


          def get_name_from_arn(arn):
              """
              Returns the name of a AWS resource based on its ARN
              Return type: str
              """
              name = arn.split("/")[-1]
              return name

          def get_event_type(event):
              """
              Return the type of the event: AddUserToGroup or RemoveUserFromGroup
              Return type: str
              """
              event_type = event["detail"]["eventName"]
              return event_type
              

          def get_user_arn(event):
              """
              Returns the ARN of the user that was added/removed in/from the group
              Return type: str
              """
              user_name = event["detail"]["requestParameters"]["userName"]
              account_id = event["account"]
              user_arn = "arn:aws:iam::" + account_id + ":user/" + user_name
              return user_arn

          def add_tag_user(user_arn, tagKey, tagValue):
              """
              Adds a tag to a user 
              Return type: none
              """
              user_name = get_name_from_arn(user_arn)
              client.tag_user(
                  UserName=user_name,
                  Tags=[
                      {
                          'Key': tagKey,
                          'Value': tagValue
                      }
                  ]
              )


          def add_tags_user(user_arn, tags):
              """
              tags is a list of dictionary of Key=X and Value=Y
              """
              for tag in tags:
                  add_tag_user(user_arn, tagKey=tag["Key"], tagValue=tag["Value"])
              
          def remove_tag_user(user_arn, tagKey):
              """
              Removes a tag from a user 
              Return type: none
              """
              user_name = get_name_from_arn(user_arn)
              client.untag_user(
                  UserName=user_name,
                  TagKeys=[
                      tagKey
                  ]
              )
                
          def remove_tags_user(user_arn, tags):
              """
              tags is a list of dictionary of Key=X and Value=Y
              """
              for tag in tags:
                  remove_tag_user(user_arn, tagKey=tag["Key"])
              

          def get_policies_attached_to_group(group_name):
              """
              Input:
                  - group_name: str
              Output:
                  - list of string
              """
              response = client.list_attached_group_policies(
                  GroupName=group_name
              )
              policies_arn = [response["AttachedPolicies"][i]["PolicyArn"] for i in range(len(response["AttachedPolicies"]))]
              return policies_arn
              

          def get_policy_tags(policy_arn):
              """
              Based on a policy_arn, this function returns the tags associated with that policy
              Input: 
                  - policy_arn: str
              Output: 
                  - list(dict) where dict = {Key:x, Value:y} 
              """
              response = client.list_policy_tags(
                  PolicyArn=policy_arn
              )
              return response["Tags"]

          def filter_tags_from_key(tags, filterKey):
              """
              This function takes as input a list of tags and filter them to only keep those
              which start with a specific filterKey
              Input: 
                  - tags: list(dict) where dict = {Key:x, Value:y}
                  - filterKey: str
              Output: 
                  - list(dict) where dict = {Key:x, Value:y}
              """
              filtered_tags = list()
              for tag in tags:
                  if tag["Key"].startswith(filterKey):
                      filtered_tags.append(tag)
                  else:
                      continue
              return filtered_tags

          def lambda_handler(event, context):
              # Collect necessary information
              user_arn = get_user_arn(event)
              group_name = get_group_name(event)
              event_type = get_event_type(event)
              group_policies = get_policies_attached_to_group(group_name)
              print(group_policies)
              
              # For each policy attached to the group
              if event_type=="AddUserToGroup":
                  for policy_arn in group_policies:
                      tags = get_policy_tags(policy_arn)
                      filtered_tags = filter_tags_from_key(tags, filterKey="pn-")
                      print(filtered_tags)
                      if filtered_tags:
                          add_tags_user(user_arn, filtered_tags)
              elif event_type=="RemoveUserFromGroup":
                  for policy_arn in group_policies:
                      tags = get_policy_tags(policy_arn)
                      filtered_tags = filter_tags_from_key(tags, filterKey="pn-")
                      if filtered_tags:
                          remove_tags_user(user_arn, filtered_tags)
              
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Lambda!')
              }


      Description: "Function to update the user tags when an IAM user is added or removed from a group"
      FunctionName: UpdateUserTags_userEvent
      Handler: "index.lambda_handler"
      Role: !GetAtt RoleLambdaUpdateUserTagsUserEvent.Arn
      Timeout: 10
      Runtime: python3.9
 
  LambdaUpdateUserTagsPolicyEvent:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3

          client = boto3.client("iam")

          def get_group_name(event):
              """
              Returns the name of the group from where the user was added or removed
              Return type: str
              """
              group_name = event["detail"]["requestParameters"]["groupName"]
              return group_name
              
              
          def get_policy_arn(event):
              """
              Return the ARN of the policy concerned by the event
              """
              policy_arn = event["detail"]["requestParameters"]["policyArn"]
              return policy_arn


          def get_name_from_arn(arn):
              """
              Returns the name of a AWS resource based on its ARN
              Return type: str
              """
              name = arn.split("/")[-1]
              return name


          def get_event_type(event):
              """
              Return the type of the event: AttachGroupPolicy or DetachGroupPolicy
              Return type: str
              """
              event_type = event["detail"]["eventName"]
              return event_type
              
          def get_users_in_group(group_name):
              """
              Returns the list of users in a group
              """
              response = client.get_group(
                  GroupName=group_name
              )
              users_arn = [response['Users'][i]['Arn'] for i in range(len(response["Users"]))]
              return users_arn

              
          def add_tag_user(user_arn, tagKey, tagValue):
              """
              Adds a tag to a user 
              Return type: none
              """
              user_name = get_name_from_arn(user_arn)
              client.tag_user(
                  UserName=user_name,
                  Tags=[
                      {
                          'Key': tagKey,
                          'Value': tagValue
                      }
                  ]
              )


          def add_tags_user(user_arn, tags):
              """
              tags is a list of dictionary of Key=X and Value=Y
              """
              for tag in tags:
                  add_tag_user(user_arn, tagKey=tag["Key"], tagValue=tag["Value"])
                  

          def add_tags_users(users_arn, tags):
              """
              Add a list of tags to a list of users
              """
              for user_arn in users_arn:
                  add_tags_user(user_arn, tags)
                  
              
          def remove_tag_user(user_arn, tagKey):
              """
              Removes a tag from a user 
              Return type: none
              """
              user_name = get_name_from_arn(user_arn)
              client.untag_user(
                  UserName=user_name,
                  TagKeys=[
                      tagKey
                  ]
              )
                
          def remove_tags_user(user_arn, tags):
              """
              tags is a list of dictionary of Key=X and Value=Y
              """
              for tag in tags:
                  remove_tag_user(user_arn, tagKey=tag["Key"])
              

          def remove_tags_users(users_arn, tags):
              """
              Remove tags for a list of users
              """
              for user_arn in users_arn:
                  remove_tags_user(user_arn, tags)
                  
              
          def get_policy_tags(policy_arn):
              """
              Based on a policy_arn, this function returns the tags associated with that policy
              Input: 
                  - policy_arn: str
              Output: 
                  - list(dict) where dict = {Key:x, Value:y} 
              """
              response = client.list_policy_tags(
                  PolicyArn=policy_arn
              )
              return response["Tags"]
              

          def filter_tags_from_key(tags, filterKey):
              """
              This function takes as input a list of tags and filter them to only keep those
              which start with a specific filterKey
              Input: 
                  - tags: list(dict) where dict = {Key:x, Value:y}
                  - filterKey: str
              Output: 
                  - list(dict) where dict = {Key:x, Value:y}
              """
              filtered_tags = list()
              for tag in tags:
                  if tag["Key"].startswith(filterKey):
                      filtered_tags.append(tag)
                  else:
                      continue
              return filtered_tags


          def lambda_handler(event, context):
              # Collect necessary information
              group_name = get_group_name(event)
              event_type = get_event_type(event)
              policy_arn = get_policy_arn(event)
              policy_tags = get_policy_tags(policy_arn)
              users_in_group = get_users_in_group(group_name)
              filtered_tags = filter_tags_from_key(policy_tags, filterKey="pn-")
              
              if filtered_tags:
                  if event_type=="AttachGroupPolicy":
                      add_tags_users(users_in_group, filtered_tags)
                  elif event_type=="DetachGroupPolicy":
                      remove_tags_users(users_in_group, filtered_tags)
              
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Lambda!')
              }

      Description: "Function to update the user tags when a Policy is attached/detached from an IAM Group"
      FunctionName: UpdateUserTags_policyEvent
      Handler: "index.lambda_handler"  
      Role: !GetAtt RoleLambdaUpdateUserTagsPolicyEvent.Arn
      Timeout: 10
      Runtime: python3.9

  #######################
  ##### EventBridge #####
  #######################

  EventRuleUserEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: "Rule triggered when a user is added or removed from specific IAM Groups"
      EventPattern: 
        !Sub |
        {
          "source": ["aws.iam"],
          "detail-type": ["AWS API Call via CloudTrail"],
          "detail": {
            "eventSource": ["iam.amazonaws.com"],
            "eventName": ["AddUserToGroup", "RemoveUserFromGroup"]
          }
        }
      Name: UserAddedRemovedFromIAMGroup
      Targets:
        - Arn: !GetAtt LambdaUpdateUserTagsUserEvent.Arn
          Id: LambdaUpdateUserTags_userEvent 

  EventBridgeLambdaPermissionUserEvent:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaUpdateUserTagsUserEvent.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventRuleUserEvent.Arn
  
  EventRulePolicyEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: "Rule triggered when a policy is attached/detached from an IAM Group"
      EventPattern: 
        !Sub |
        {
          "source": ["aws.iam"],
          "detail-type": ["AWS API Call via CloudTrail"],
          "detail": {
            "eventSource": ["iam.amazonaws.com"],
            "eventName": ["AttachGroupPolicy", "DetachGroupPolicy"]
          }
        }
      Name: PolicyAttachedDetachedFromIAMGroup
      Targets:
        - Arn: !GetAtt LambdaUpdateUserTagsPolicyEvent.Arn
          Id: LambdaUpdateUserTags_policyEvent 

  EventBridgeLambdaPermissionPolicyEvent:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaUpdateUserTagsPolicyEvent.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventRulePolicyEvent.Arn