AWSTemplateFormatVersion: '2010-09-09'
Description: Expose to the internet the API of a service with API-GW

Parameters:

  MicroServiceUniqueName:
    Type: String
    Description: Microservice unique name

  DnsName:
    Type: String
    Description: Custom DNS to register this api to

  IntendedUsage:
    Type: String
    AllowedValues:
      - B2B
      - WEB
    Description: B2B or WEB usage. Used from other back-end system or used from a browser

  ServiceApiPath:
    Type: String
    Description: path of the exposed API

  NetworkLoadBalancerLink:
    Type: String
    Description: Link inside the VPC
  ApplicationLoadBalancerDomain:
    Type: String
    Description: Application load balancer that dispatch request to microserveces

Conditions:
  IsWeb: !Equals [ !Ref IntendedUsage, 'WEB' ]

Resources:

  PublicRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${MicroServiceUniqueName}-public-api'
      FailOnWarnings: true
      EndpointConfiguration:
        Types:
          - REGIONAL

  PublicApiProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PublicRestApi
      ParentId: !GetAtt PublicRestApi.RootResourceId
      PathPart: '{proxy+}'

  PublicApiProxyAnyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: !Sub 'Proxy to ${MicroServiceUniqueName} public API'
      RestApiId: !Ref PublicRestApi
      ResourceId: !Ref PublicApiProxyResource
      HttpMethod: ANY
      ApiKeyRequired: false
      AuthorizationType: NONE
      RequestParameters:
        Fn::If:
          - IsWeb
          - method.request.path.proxy: true
            method.request.header.WebInjectedHeader: false
          - method.request.path.proxy: true
            method.request.header.B2BInjectedHeader: false
      Integration:
        ConnectionType: VPC_LINK
        ConnectionId: !Ref NetworkLoadBalancerLink
        IntegrationHttpMethod: ANY
        Type: HTTP_PROXY
        Uri: !Sub 'http://${ApplicationLoadBalancerDomain}:8080/${ServiceApiPath}/{proxy}'
        RequestParameters:
          Fn::If:
            - IsWeb
            - integration.request.path.proxy: method.request.path.proxy
              integration.request.header.WebInjectedHeader: "'web_header_value'"
            - integration.request.path.proxy: method.request.path.proxy
              integration.request.header.B2BInjectedHeader: "'b2b_header_value'"
        PassthroughBehavior: "WHEN_NO_MATCH"
        TimeoutInMillis: 29000

  PublicRestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - PublicApiProxyAnyMethod
    Properties:
      RestApiId: !Ref PublicRestApi

  PublicRestApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref PublicRestApi
      StageName: unique
      TracingEnabled: true
      DeploymentId: !Ref PublicRestApiDeployment
      AccessLogSetting:
        DestinationArn: !GetAtt "PublicApiLogGroup.Arn"
        Format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","routeKey":"$context.routeKey","status":$context.status,"responseLatency":$context.responseLatency}'
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          MetricsEnabled: 'true'
          DataTraceEnabled: 'false'

  PublicApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1

  # Expose API to custom domain
  APIMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: !Ref ServiceApiPath
      DomainName: !Ref DnsName
      RestApiId: !Ref PublicRestApi
      Stage: !Ref PublicRestApiStage

Outputs:

  # - Public API URL
  ApiGatewayUrlBeta:
    Value: !Sub 'https://${PublicRestApi}.execute-api.${AWS::Region}.amazonaws.com/unique/'
    Description: Base URL for API Requests
