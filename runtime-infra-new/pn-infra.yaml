AWSTemplateFormatVersion: 2010-09-09
Description: 'This template deploys the base infra for PN'

Parameters:
  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'

  VpcNumber:
    Type: String
    Description: Second byte from the left for VPC CIDR

  TemplateBucketBaseUrl:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'

Resources:

  ###                       VPC BASE CONFIGURATIONS                       ###
  ###########################################################################

  # VPC and subnets
  VPC:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/vpc.yaml"
      Parameters:
        VpcName: !Ref ProjectName
        VpcNumber: !Ref VpcNumber

  # Private connection from subnets to AWS services
  VPCEndpoints:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/vpc-endpoints.yaml"
      Parameters:
        VpcName: !Ref ProjectName
        VpcNumber: !Ref VpcNumber
        Subnets: !GetAtt VPC.Outputs.PublicSubnetsIds
        RouteTableIds: !GetAtt VPC.Outputs.PublicRouteTables
        VpcId: !GetAtt VPC.Outputs.VpcId

  # LoadBalancer
  LoadBalancer:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/load-balancer.yaml"
      Parameters:
        LoadBalancerName: !Ref ProjectName
        Subnets: !GetAtt VPC.Outputs.PublicSubnetsIds
        VpcId: !GetAtt VPC.Outputs.VpcId

  ###                             ECS CLUSTER                             ###
  ###########################################################################

  ECSCluster:
    DependsOn: LoadBalancer
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/ecs-cluster.yaml"
      Parameters:
        MacroServiceName: !Sub '${ProjectName}-core'

  # PN-Core Delivery
  PnDeliveryMicroservice:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/ecs-service.yaml"
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-delivery'
        CpuValue: 1024
        MemoryAmount: 2GB
        ContainerImageURI: '911845998067.dkr.ecr.eu-west-3.amazonaws.com/api-first-springboot:latest'
        ContainerEnvEntry1: !Sub 'PROJECT_NAME=${ProjectName}'
        ContainerEnvEntry2: !Sub 'QUEUE_NAME=${DeliveryPushInputsQueue.Outputs.QueueURL}'
        ContainerEnvEntry3: 'ENTRY3=3'
        ContainerEnvEntry4: 'ENTRY4=4'
        ContainerEnvEntry5: 'ENTRY5=5'
        ContainerEnvEntry6: 'ENTRY6=6'
        ContainerEnvEntry7: 'ENTRY7=7'
        ContainerEnvEntry8: 'ENTRY8=8'
        ContainerEnvEntry9: 'ENTRY9=9'
        ContainerEnvEntry10: 'ENTRY10=10'
        ContainerEnvEntry11: 'ENTRY11=11'
        ContainerEnvEntry12: 'ENTRY12=12'
        ContainerEnvEntry13: 'ENTRY13=13'
        ContainerEnvEntry14: 'ENTRY14=14'
        ContainerEnvEntry15: 'ENTRY15=15'
        ContainerEnvEntry16: 'ENTRY16=16'
        ContainerEnvEntry17: 'ENTRY17=17'
        ContainerEnvEntry18: 'ENTRY18=18'
        ContainerEnvEntry19: 'ENTRY19=19'
        ContainerEnvEntry20: 'ENTRY20=20'
        ContainerEnvEntry21: 'ENTRY21=21'
        ContainerEnvEntry22: 'ENTRY22=22'
        ContainerEnvEntry23: 'ENTRY23=23'
        ContainerEnvEntry24: 'ENTRY24=24'
        ContainerEnvEntry25: 'ENTRY25=25'
        ContainerEnvEntry26: 'ENTRY26=26'
        ContainerEnvEntry27: 'ENTRY27=27'
        ContainerEnvEntry28: 'ENTRY28=28'
        ContainerEnvEntry29: 'ENTRY29=29'
        ContainerEnvEntry30: 'ENTRY30=30'
        MappedPaths: '/delivery/*,/delivery-private/*'
        ECSClusterName: !GetAtt ECSCluster.Outputs.ClusterName
        Subnets: !GetAtt VPC.Outputs.PublicSubnetsIds
        VpcId: !GetAtt VPC.Outputs.VpcId
        LoadBalancerListenerArn: !GetAtt LoadBalancer.Outputs.ApplicationLoadBalancerListenerArn

  # Grant operational rights to PN-Core Delivery microservice
  PnDeliveryTaskPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${ProjectName}-delivery-CustomTaskPolicy'
      Roles:
        - !GetAtt PnDeliveryMicroservice.Outputs.TaskRoleName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sqs:ChangeMessageVisibility
              - sqs:ChangeMessageVisibilityBatch
              - sqs:DeleteMessage
              - sqs:DeleteMessageBatch
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:ReceiveMessage
              - sqs:SendMessage
              - sqs:SendMessageBatch
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectAcl
              - s3:GetObjectLegalHold
              - s3:GetObjectRetention
              - s3:GetObjectTagging
              - s3:GetObjectVersion
              - s3:GetObjectVersionAcl
              - s3:GetObjectVersionTagging
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - cassandra:Modify
              - cassandra:Select
            Resource:
              - '*'


  # Expose PN-Core Delivery public API with API-GW
  PnDeliveryPublicAPI:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/api-gw-expose-service.yaml"
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-delivery'
        ServiceApiPath: 'delivery'
        NetworkLoadBalancerLink: !GetAtt LoadBalancer.Outputs.NetworkLoadBalancerLink
        ApplicationLoadBalancerDomain: !GetAtt LoadBalancer.Outputs.ApplicationLoadBalancerDomain


  ###                     MESSAGE ORIENTED MIDDLEWARE                     ###
  ###########################################################################

  ### SQS ###
  DeliveryPushInputsQueue:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/sqs-queue.yaml"
      Parameters:
        QueueName: !Sub '${ProjectName}-delivery_push_inputs'
        DelaySeconds: 1

  DeliveryPushActionsQueue:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/sqs-queue.yaml"
      Parameters:
        QueueName: !Sub '${ProjectName}-delivery_push_actions'
        DelaySeconds: 1

  DeliveryPushActionsDoneQueue:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/sqs-queue.yaml"
      Parameters:
        QueueName: !Sub '${ProjectName}-delivery_push_actions-done'
        DelaySeconds: 2



  ExternalChannelsInputsQueue:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/sqs-queue.yaml"
      Parameters:
        QueueName: !Sub '${ProjectName}-external_channel_inputs'
        DelaySeconds: 1

  ExternalChannelsOutputsQueue:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/sqs-queue.yaml"
      Parameters:
        QueueName: !Sub '${ProjectName}-external_channel_outputs'
        DelaySeconds: 1

  ExternalChannelsElabResQueue:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/sqs-queue.yaml"
      Parameters:
        QueueName: !Sub '${ProjectName}-external_channel_elab_res'
        DelaySeconds: 1



