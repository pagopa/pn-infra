AWSTemplateFormatVersion: 2010-09-09
Description: 'This template deploys the queues needed for monitoring'

Parameters:
  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'

  AlarmSNSTopicArn:
    Type: String
    Description: ARN of the SNS topic for alarms

  LogsKinesisSourceStreamArn:
    Default: ''
    Type: String
    Description: where to send logs

  LogsKinesisStreamName:
    Type: String
    Default: ''
    Description: 'Kinesis stream name to send logs to'

  CdcKinesisStreamName:
    Type: String
    Default: ''
    Description: 'Kinesis stream name to send CDC logs to'

  LogsKinesisMaxAgeInMilliseconds:
    Type: Number
    Description: 'MaxAgeInMilliseconds for Kinesis Logs GetRecords'

  CdcKinesisMaxAgeInMilliseconds:
    Type: Number
    Description: 'MaxAgeInMilliseconds for Kinesis Cdc GetRecords'

  LogsKinesisMaxAgeInMillisecondsOncall:
    Type: Number
    Description: 'MaxAgeInMilliseconds for Kinesis Logs GetRecords (oncall)'

  CdcKinesisMaxAgeInMillisecondsOncall:
    Type: Number
    Description: 'MaxAgeInMilliseconds for Kinesis Cdc GetRecords (oncall)'

  LogsBucketName:
    Type: String
    Description: 'Name of the bucket where logs are stored'
    
  LogsBucketKmsKeyArn:
    Type: String
    Description: 'ARN of the KMS key used to encrypt the logs bucket'

  DiagnosticLambdaLoggerName:
    Type: String
    Description: 'Name of the diagnostic lambda logger'
    Default: 'pn-diagnostic-logger'

  DiagnosticLoggerMemory:
    Type: Number
    Default: 128
    Description: 'Memory size for the diagnostic logger lambda'

  DiagnosticBatchSize:
    Type: Number
    Default: 1
    Description: 'Batch size for the diagnostic logger lambda'

  LambdasBucketName:
    Type: String
    Description: 'Name of the bucket where lambdas are stored'

  BucketBasePath:
    Type: String
    Description: 'Base path for the bucket'

  TemplateBucketBaseUrl:
    Type: String
    Description: 'Base URL for the bucket'
    
Conditions:
  SendLogToKinesis: !Not [ !Equals [ !Ref LogsKinesisSourceStreamArn, '' ] ]

Resources:
 ###                            Event adn Alarm                           ###
  ############################################################################

  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${ProjectName}-ECSOutOfMemoryStoppedTasksEvent"
      Description: Triggered when an Amazon ECS Task is stopped due to OOM
      EventPattern:
        source:
          - aws.ecs
        detail-type:
          - ECS Task State Change
        detail:
          desiredStatus:
            - STOPPED
          lastStatus:
            - STOPPED
          containers:
            reason:
              - prefix: "OutOfMemory"
      State: ENABLED
      Targets:
        - Arn: !GetAtt LogGroupOOMEvents.Arn
          Id: LogTarget
    
  # Creating a log group for monitoring the OOM events
  LogGroupOOMEvents:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/events/${ProjectName}-ecs-oom-errors"
      RetentionInDays: 90

  # Resource based policy to allow EventBridge to publish to CloudWatch Logs
  LogGroupOOMEventsPolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: !Sub "${ProjectName}-EventBridgeToCWLogsPolicy"
      PolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "EventBridgetoCWLogsCreateLogStreamPolicy",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "events.amazonaws.com"
                ]
              },
              "Action": [
                "logs:CreateLogStream"
              ],
              "Resource": [
                "${LogGroupOOMEvents.Arn}"
              ]
            },
            {
              "Sid": "EventBridgetoCWLogsPutLogEventsPolicy",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "events.amazonaws.com"
                ]
              },
              "Action": [
                "logs:PutLogEvents"
              ],
              "Resource": [
                "${LogGroupOOMEvents.Arn}"
              ],
              "Condition": {
                "ArnEquals": {"AWS:SourceArn": "${EventRule.Arn}"}
              }
            }
          ]
        }

  # CloudWatch metric: it is exepcted to be a very rare event so it is acceptable to have one metric for all containers
  # Note: the container that runs out of memory is detailed in the log event
  OutOfMemoryLogsMetricFilter: 
    Type: AWS::Logs::MetricFilter
    Properties: 
      LogGroupName: !Ref LogGroupOOMEvents
      FilterPattern: ' '
      MetricTransformations: 
        - MetricValue: 1
          MetricNamespace: "OutOfMemoryErrors"
          MetricName: !Sub "${ProjectName}-ECSOutOfMemory"

  CloudWatchAlarmOOM:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-ECSOutOfMemory-Alarm"
      AlarmDescription: "CloudWatch alarm for when ECS task stop with OOM errors."
      TreatMissingData: notBreaching        
      AlarmActions:
        - !Ref AlarmSNSTopicArn
      DatapointsToAlarm: 1            
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 60
      Period: 60
      Namespace: OutOfMemoryErrors   
      MetricName: !Sub "${ProjectName}-ECSOutOfMemory"
      Statistic: Sum
      Threshold: 1
 
  SubscriptionFilterServiceRole:
    Condition: SendLogToKinesis
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: logs.amazonaws.com
        Version: "2012-10-17"
      Path: /
      Policies:
        -
          PolicyName: !Sub '${ProjectName}-monitoring-subscription-role'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - kinesis:PutRecord
                Effect: Allow
                Resource: "*"
              - Action:
                - "kms:Encrypt"
                - "kms:GenerateDataKey"
                - "kms:Decrypt"
                Effect: Allow
                Resource: "*"

  OomSubscriptionFilter:
    Condition: SendLogToKinesis
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      RoleArn:
        Fn::GetAtt:
          - "SubscriptionFilterServiceRole"
          - "Arn"
      LogGroupName: !Ref LogGroupOOMEvents
      FilterPattern: ' '
      DestinationArn: !Ref LogsKinesisSourceStreamArn
  
  # Logs Kinesis GetRecords.IteratorAgeMilliseconds alarm
  LogsKinesisGetRecordsIteratorAgeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-LogsKinesis-IteratorAge-Alarm"
      AlarmDescription: "CloudWatch alarm for when Kinesis Logs GetRecords.IteratorAgeMilliseconds is too high."
      TreatMissingData: notBreaching        
      AlarmActions:
        - !Ref AlarmSNSTopicArn
      Dimensions:
        - Value: !Ref LogsKinesisStreamName
          Name: StreamName        
      DatapointsToAlarm: 10            
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 60
      Period: 60
      Namespace: AWS/Kinesis   
      MetricName: GetRecords.IteratorAgeMilliseconds
      Statistic: Maximum
      Threshold: !Ref LogsKinesisMaxAgeInMilliseconds

  OncallLogsKinesisGetRecordsIteratorAgeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "oncall-${ProjectName}-LogsKinesis-IteratorAge-Alarm"
      AlarmDescription: "CloudWatch alarm for when Kinesis Logs GetRecords.IteratorAgeMilliseconds is too high."
      TreatMissingData: notBreaching        
      AlarmActions:
        - !Ref AlarmSNSTopicArn
      Dimensions:
        - Value: !Ref LogsKinesisStreamName
          Name: StreamName        
      DatapointsToAlarm: 10            
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 60
      Period: 60
      Namespace: AWS/Kinesis   
      MetricName: GetRecords.IteratorAgeMilliseconds
      Statistic: Maximum
      Threshold: !Ref LogsKinesisMaxAgeInMillisecondsOncall

  # Cdc Kinesis GetRecords.IteratorAgeMilliseconds alarm
  CdcKinesisGetRecordsIteratorAgeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-CdcKinesis-IteratorAge-Alarm"
      AlarmDescription: "CloudWatch alarm for when Kinesis Cdc GetRecords.IteratorAgeMilliseconds is too high."
      TreatMissingData: notBreaching        
      AlarmActions:
        - !Ref AlarmSNSTopicArn
      Dimensions:
        - Value: !Ref CdcKinesisStreamName
          Name: StreamName
      DatapointsToAlarm: 10           
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 60
      Period: 60
      Namespace: AWS/Kinesis   
      MetricName: GetRecords.IteratorAgeMilliseconds
      Statistic: Maximum
      Threshold: !Ref CdcKinesisMaxAgeInMilliseconds

  OncallCdcKinesisGetRecordsIteratorAgeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "oncall-${ProjectName}-CdcKinesis-IteratorAge-Alarm"
      AlarmDescription: "CloudWatch alarm for when Kinesis Cdc GetRecords.IteratorAgeMilliseconds is too high."
      TreatMissingData: notBreaching        
      AlarmActions:
        - !Ref AlarmSNSTopicArn
      Dimensions:
        - Value: !Ref CdcKinesisStreamName
          Name: StreamName
      DatapointsToAlarm: 10           
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 60
      Period: 60
      Namespace: AWS/Kinesis   
      MetricName: GetRecords.IteratorAgeMilliseconds
      Statistic: Maximum
      Threshold: !Ref CdcKinesisMaxAgeInMillisecondsOncall

  ClockErrorBoundAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "pn-Clock-Error-Bound-Alarm"
      AlarmDescription: "CloudWatch Alarm for Clock Error Bound limit over threshold"
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref AlarmSNSTopicArn
      Metrics:
        - Id: q1
          Expression: "SELECT MAX(ClockErrorBound) FROM SCHEMA(\"ECS/ContainerInsights\", ClusterName,Family,TaskID) GROUP BY ClusterName"
          Period: 600
          ReturnData: False
        - Id: e2
          Expression: "IF(MAX(q1) < 100, 0, 1)"
          Period: 600
      DatapointsToAlarm: 2
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 2
      Threshold: 1

  SynchronizationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "pn-Synchronization-Alarm"
      AlarmDescription: "CloudWatch Alarm for Synchronization value different by Synchronized"
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref AlarmSNSTopicArn
      Metrics:
        - Id: q1
          Expression: "SELECT MAX(Synchronization) FROM SCHEMA(\"ECS/ContainerInsights\", ClusterName,Family,TaskID) GROUP BY ClusterName"
          Period: 600
          ReturnData: False
        - Id: e2
          Expression: "IF(MAX(q1) < 1, 0, 1)"
          Period: 600
      DatapointsToAlarm: 2
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 2
      Threshold: 1

  # Trail for diagnostic lambda functions
  DiagnosticLambdaCloudTrail:
    Type: AWS::CloudTrail::Trail
    Properties:
      TrailName: pn-DiagnosticLambdaCloudTrail
      IsMultiRegionTrail: false
      IsOrganizationTrail: false
      EnableLogFileValidation: true
      AdvancedEventSelectors:
        - Name: diagnostic-lambda-selector
          FieldSelectors:
            - Field: "eventCategory"
              Equals: 
                - "Data"
            - Field: "resources.type"
              Equals: 
                - "AWS::Lambda::Function"                
            - Field: "resources.ARN"
              StartsWith: 
                - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:diagnostic"
      S3BucketName: !Ref LogsBucketName
      S3KeyPrefix: "diagnosticTrail"
      IsLogging: true

  DiagnosticLoggerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${DiagnosticLambdaLoggerName}-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
      Policies:
        - PolicyName: !Sub '${DiagnosticLambdaLoggerName}-role-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: allS3
                Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:ListObjects'
                Resource: 
                  - !Sub "arn:${AWS::Partition}:s3:::${LogsBucketName}/diagnosticTrail/*"
              - Sid: kmsDecrypt
                Effect: Allow
                Action:
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                  - kms:DescribeKey
                Resource: !Ref LogsBucketKmsKeyArn
              - Sid: receiveSqs
                Effect: Allow
                Action:
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                  - "sqs:ChangeMessageVisibility"
                  - "sqs:GetQueueUrl"
                Resource: 
                  - !Sub 'arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${ProjectName}-diagnostic-cloudtrail-file'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        # - 'arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy'

  DiagnosticLoggerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref DiagnosticLambdaLoggerName
      Runtime: nodejs22.x
      Role: !GetAtt DiagnosticLoggerLambdaRole.Arn
      Handler: index.handler
      MemorySize: !Ref DiagnosticLoggerMemory
      Timeout: 30
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"      
      Code:
        S3Bucket: !Ref LambdasBucketName
        S3Key: !Sub ${BucketBasePath}/diagnostic-logger.zip

  DiagnosticLoggerLambdaQueuePermission:
   Type: AWS::Lambda::Permission
   Properties:
     Action: 'lambda:InvokeFunction'
     FunctionName: !GetAtt DiagnosticLoggerLambda.Arn
     Principal: 'sqs.amazonaws.com'
     SourceAccount: !Ref AWS::AccountId
     SourceArn: !Sub 'arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${ProjectName}-diagnostic-cloudtrail-file'

  DiagnosticLoggerLambdaQueueSourceMapping:
    DependsOn:
      - DiagnosticLoggerLambdaQueuePermission
    Type: AWS::Lambda::EventSourceMapping
    Properties: 
      BatchSize: !Ref DiagnosticBatchSize
      Enabled: True
      EventSourceArn: !Sub 'arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${ProjectName}-diagnostic-cloudtrail-file'
      FunctionName: !Ref DiagnosticLoggerLambda
      MaximumBatchingWindowInSeconds: 0 #default value

  DiagnosticLoggerLambdaAlarms:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/lambda-alarms.yaml"
      Parameters:
        FunctionName: !Ref DiagnosticLoggerLambda
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn

Outputs:
  OOMAlarmArn:
    Value: !GetAtt CloudWatchAlarmOOM.Arn
    Description: 'ARN of cloudwatch out of memory alarm'

  LogsKinesisGetRecordsIteratorAgeAlarmArn:
    Value: !GetAtt LogsKinesisGetRecordsIteratorAgeAlarm.Arn

  CdcKinesisGetRecordsIteratorAgeAlarmArn:
    Value: !GetAtt CdcKinesisGetRecordsIteratorAgeAlarm.Arn    