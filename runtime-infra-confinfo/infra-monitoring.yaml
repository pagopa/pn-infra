AWSTemplateFormatVersion: 2010-09-09
Description: 'This template deploys the queues needed for monitoring'

Parameters:
  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'

  AlarmSNSTopicArn:
    Type: String
    Description: ARN of the SNS topic for alarms

  LogsKinesisSourceStreamArn:
    Default: ''
    Type: String
    Description: where to send logs

  LogsKinesisStreamName:
    Type: String
    Default: ''
    Description: 'Kinesis stream name to send logs to'

  CdcKinesisStreamName:
    Type: String
    Default: ''
    Description: 'Kinesis stream name to send CDC logs to'

  LogsKinesisMaxAgeInMilliseconds:
    Type: Number
    Description: 'MaxAgeInMilliseconds for Kinesis Logs GetRecords'

  CdcKinesisMaxAgeInMilliseconds:
    Type: Number
    Description: 'MaxAgeInMilliseconds for Kinesis Cdc GetRecords'

  LogsKinesisMaxAgeInMillisecondsOncall:
    Type: Number
    Description: 'MaxAgeInMilliseconds for Kinesis Logs GetRecords (oncall)'

  CdcKinesisMaxAgeInMillisecondsOncall:
    Type: Number
    Description: 'MaxAgeInMilliseconds for Kinesis Cdc GetRecords (oncall)'


Conditions:
  SendLogToKinesis: !Not [ !Equals [ !Ref LogsKinesisSourceStreamArn, '' ] ]

Resources:
 ###                            Event adn Alarm                           ###
  ############################################################################

  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${ProjectName}-ECSOutOfMemoryStoppedTasksEvent"
      Description: Triggered when an Amazon ECS Task is stopped due to OOM
      EventPattern:
        source:
          - aws.ecs
        detail-type:
          - ECS Task State Change
        detail:
          desiredStatus:
            - STOPPED
          lastStatus:
            - STOPPED
          containers:
            reason:
              - prefix: "OutOfMemory"
      State: ENABLED
      Targets:
        - Arn: !GetAtt LogGroupOOMEvents.Arn
          Id: LogTarget
    
  # Creating a log group for monitoring the OOM events
  LogGroupOOMEvents:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/events/${ProjectName}-ecs-oom-errors"
      RetentionInDays: 90

  # Resource based policy to allow EventBridge to publish to CloudWatch Logs
  LogGroupOOMEventsPolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: !Sub "${ProjectName}-EventBridgeToCWLogsPolicy"
      PolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "EventBridgetoCWLogsCreateLogStreamPolicy",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "events.amazonaws.com"
                ]
              },
              "Action": [
                "logs:CreateLogStream"
              ],
              "Resource": [
                "${LogGroupOOMEvents.Arn}"
              ]
            },
            {
              "Sid": "EventBridgetoCWLogsPutLogEventsPolicy",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "events.amazonaws.com"
                ]
              },
              "Action": [
                "logs:PutLogEvents"
              ],
              "Resource": [
                "${LogGroupOOMEvents.Arn}"
              ],
              "Condition": {
                "ArnEquals": {"AWS:SourceArn": "${EventRule.Arn}"}
              }
            }
          ]
        }

  # CloudWatch metric: it is exepcted to be a very rare event so it is acceptable to have one metric for all containers
  # Note: the container that runs out of memory is detailed in the log event
  OutOfMemoryLogsMetricFilter: 
    Type: AWS::Logs::MetricFilter
    Properties: 
      LogGroupName: !Ref LogGroupOOMEvents
      FilterPattern: ' '
      MetricTransformations: 
        - MetricValue: 1
          MetricNamespace: "OutOfMemoryErrors"
          MetricName: !Sub "${ProjectName}-ECSOutOfMemory"

  CloudWatchAlarmOOM:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-ECSOutOfMemory-Alarm"
      AlarmDescription: "CloudWatch alarm for when ECS task stop with OOM errors."
      TreatMissingData: notBreaching        
      AlarmActions:
        - !Ref AlarmSNSTopicArn
      DatapointsToAlarm: 1            
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 60
      Period: 60
      Namespace: OutOfMemoryErrors   
      MetricName: !Sub "${ProjectName}-ECSOutOfMemory"
      Statistic: Sum
      Threshold: 1
 
  SubscriptionFilterServiceRole:
    Condition: SendLogToKinesis
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: logs.amazonaws.com
        Version: "2012-10-17"
      Path: /
      Policies:
        -
          PolicyName: !Sub '${ProjectName}-monitoring-subscription-role'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - kinesis:PutRecord
                Effect: Allow
                Resource: "*"
              - Action:
                - "kms:Encrypt"
                - "kms:GenerateDataKey"
                - "kms:Decrypt"
                Effect: Allow
                Resource: "*"

  OomSubscriptionFilter:
    Condition: SendLogToKinesis
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      RoleArn:
        Fn::GetAtt:
          - "SubscriptionFilterServiceRole"
          - "Arn"
      LogGroupName: !Ref LogGroupOOMEvents
      FilterPattern: ' '
      DestinationArn: !Ref LogsKinesisSourceStreamArn
  
  # Logs Kinesis GetRecords.IteratorAgeMilliseconds alarm
  LogsKinesisGetRecordsIteratorAgeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-LogsKinesis-IteratorAge-Alarm"
      AlarmDescription: "CloudWatch alarm for when Kinesis Logs GetRecords.IteratorAgeMilliseconds is too high."
      TreatMissingData: notBreaching        
      AlarmActions:
        - !Ref AlarmSNSTopicArn
      Dimensions:
        - Value: !Ref LogsKinesisStreamName
          Name: StreamName        
      DatapointsToAlarm: 10            
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 60
      Period: 60
      Namespace: AWS/Kinesis   
      MetricName: GetRecords.IteratorAgeMilliseconds
      Statistic: Maximum
      Threshold: !Ref LogsKinesisMaxAgeInMilliseconds

  OncallLogsKinesisGetRecordsIteratorAgeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "oncall-${ProjectName}-LogsKinesis-IteratorAge-Alarm"
      AlarmDescription: "CloudWatch alarm for when Kinesis Logs GetRecords.IteratorAgeMilliseconds is too high."
      TreatMissingData: notBreaching        
      AlarmActions:
        - !Ref AlarmSNSTopicArn
      Dimensions:
        - Value: !Ref LogsKinesisStreamName
          Name: StreamName        
      DatapointsToAlarm: 10            
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 60
      Period: 60
      Namespace: AWS/Kinesis   
      MetricName: GetRecords.IteratorAgeMilliseconds
      Statistic: Maximum
      Threshold: !Ref LogsKinesisMaxAgeInMillisecondsOncall

  # Cdc Kinesis GetRecords.IteratorAgeMilliseconds alarm
  CdcKinesisGetRecordsIteratorAgeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-CdcKinesis-IteratorAge-Alarm"
      AlarmDescription: "CloudWatch alarm for when Kinesis Cdc GetRecords.IteratorAgeMilliseconds is too high."
      TreatMissingData: notBreaching        
      AlarmActions:
        - !Ref AlarmSNSTopicArn
      Dimensions:
        - Value: !Ref CdcKinesisStreamName
          Name: StreamName
      DatapointsToAlarm: 10           
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 60
      Period: 60
      Namespace: AWS/Kinesis   
      MetricName: GetRecords.IteratorAgeMilliseconds
      Statistic: Maximum
      Threshold: !Ref CdcKinesisMaxAgeInMilliseconds

  OncallCdcKinesisGetRecordsIteratorAgeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "oncall-${ProjectName}-CdcKinesis-IteratorAge-Alarm"
      AlarmDescription: "CloudWatch alarm for when Kinesis Cdc GetRecords.IteratorAgeMilliseconds is too high."
      TreatMissingData: notBreaching        
      AlarmActions:
        - !Ref AlarmSNSTopicArn
      Dimensions:
        - Value: !Ref CdcKinesisStreamName
          Name: StreamName
      DatapointsToAlarm: 10           
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 60
      Period: 60
      Namespace: AWS/Kinesis   
      MetricName: GetRecords.IteratorAgeMilliseconds
      Statistic: Maximum
      Threshold: !Ref CdcKinesisMaxAgeInMillisecondsOncall

  ClockErrorBoundAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "pn-Clock-Error-Bound-Alarm"
      AlarmDescription: "CloudWatch Alarm for Clock Error Bound limit over threshold"
      TreatMissingData: notBreaching
      Metrics:
        - Id: q1
          Expression: "SELECT MAX(ClockErrorBound) FROM SCHEMA(\"ECS/ContainerInsights\", ClusterName,Family,TaskID) WHERE ClusterName = 'pn-confidential-ecs-cluster' GROUP BY ClusterName"
          Period: 600
          ReturnData: False
        - Id: e2
          Expression: "IF(MAX(q1) < 100, 0, 1)"
          Period: 600
      DatapointsToAlarm: 2
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 2
      Threshold: 1

  SynchronizationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "pn-Synchronization-Alarm"
      AlarmDescription: "CloudWatch Alarm for Synchronization value different by Synchronized"
      TreatMissingData: notBreaching
      Metrics:
        - Id: q1
          Expression: "SELECT MAX(Synchronization) FROM SCHEMA(\"ECS/ContainerInsights\", ClusterName,Family,TaskID) WHERE ClusterName = 'pn-confidential-ecs-cluster' GROUP BY ClusterName"
          Period: 600
          ReturnData: False
        - Id: e2
          Expression: "IF(MAX(q1) < 1, 0, 1)"
          Period: 600
      DatapointsToAlarm: 2
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 2
      Threshold: 1

Outputs:
  OOMAlarmArn:
    Value: !GetAtt CloudWatchAlarmOOM.Arn
    Description: 'ARN of cloudwatch out of memory alarm'

  LogsKinesisGetRecordsIteratorAgeAlarmArn:
    Value: !GetAtt LogsKinesisGetRecordsIteratorAgeAlarm.Arn

  CdcKinesisGetRecordsIteratorAgeAlarmArn:
    Value: !GetAtt CdcKinesisGetRecordsIteratorAgeAlarm.Arn    