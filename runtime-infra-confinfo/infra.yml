AWSTemplateFormatVersion: 2010-09-09
Description: 'Template containing the infra resources for pn data vault'

Parameters:
  ProjectName:
    Type: String
    Description: Nome dell'ambiente destinazione

  TemplateBucketBaseUrl:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'

  Version:
    Type: String
    Description: 'keep track of used projects commitIds'

  VpcId:
    Type: String
    Description: VpcId of the VPC where to install PN-CONFIDENTIAL-INFO
    
  VpcCidr:
    Type: String
    Description: Cidr of the VPC where to install PN-CONFIDENTIAL-INFO

  VpcSubnets:
    Type: String
    Description: subnets where to install PN-CONFIDENTIAL-INFO
  
  VpcSubnetsRoutingTables:
    Type: String
    Description: routing table for subnets where to install PN-CORE

  PrivateHostedZone:
    Type: String
    Description: private hosted zone where register the application load balancer

  BucketSuffix:
    Type: String
    Default: "001"
    Description: Suffix to the log bucket name

  PnCoreAwsAccountId:
    Type: String
    Default: '-'
    Description: AWS AccountId of pn-core account in same environment

  AlarmSNSTopicArn:
    Type: String
    Description: ARN of the Alarm SNS Topic

  AlarmSNSTopicName:
    Type: String
    Description: Alarm SNS Topic Name
  
  SMSUsdMonthlyAlarmThreshold:
    Type: Number
    Description: Monthly Budget for send SMS in USD

  SESSentDailyAlarmThresholdPercentage:
    Type: Number
    Description: Daily Max Number for Email Sent from SES Service
  
  SesQuotaLambdaLogGroupRetentionInDays:
    Type: Number
    Default: 5
    Description: Retention LogGroup Lambda Quota Ses Monitoring

  ApplicationLoadBalancerArn: 
    Type: String
    Default: '-'
    Description: Application load balancer

  ApplicationLoadBalancerAwsDns: 
    Type: String
    Default: '-'
    Description: Application load balancer AWS DNS

  ApplicationLoadBalancerAwsDnsZoneId:
    Type: String
    Default: '-'
    Description: Application load balancer AWS DNS Zone ID

  ApplicationLoadBalancerListenerArn:
    Type: String
    Default: '-'
    Description: Application load balancer listener ARN

  VpcEndpointsRequired:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false

  VpcEgressSubnetsIds:
    Type: String
    Default: '-'
    Description: List of egress subnets
     
  EcsDefaultSecurityGroup:
    Type: String
    Description: ECS default security group

  PnVPCDefaultSecurityGroup:
    Type: String
    Default: ''
    Description: 'Default VPC security group'

  LogsBucketKmsKeyArn:
    Type: String
  LogsBucketName:
    Type: String
  CdcKinesisStreamName:
    Type: String
  CdcKinesisStreamArn:
    Type: String
  CdcKinesisStreamKeyArn:
    Type: String
  LogsKinesisStreamName:
    Type: String
  LogsKinesisStreamArn:
    Type: String
  LogsKinesisStreamKeyArn:
    Type: String
  SandboxSafeStorageBaseUrl:
    Type: String
  SafeStorageFileAccessLogsBucketName:
    Type: String
  SafeStorageFileAccessLogsBucketPathPrefix:
    Type: String
  PnCoreTargetEventBus:
    Type: String
    Default: ''
  
  SafeStorageBucketName:
    Type: String
    Default: '-'

  LogRetention:
    Type: Number
    Default: 14
    
  EnvironmentType:
    Type: String
    Description: "Environment type (dev, test, uat, hotfix, prod)"
    AllowedValues:
      - dev
      - test
      - uat
      - hotfix
      - prod

  BackupCronExpression:
    Type: String

  ApplicationLoadBalancerMetricsDimensionName:
    Type: String
    Default: ''
    
  EventBusDeadLetterQueueMaximumRetentionPeriod:
    Type: Number
    Default: "1209600"
    Description: "The number of seconds that Amazon SQS retains a message. You can specify an integer 
      value from 60 seconds (1 minute) to 1,209,600 seconds (14 days)."

  OncallDlqRatio:
    Type: Number
    Default: 0.1
    Description: Wakeup alarm ratio between messages written to DLQ and messages read from queue

  LogsKinesisMaxAgeInMilliseconds:
    Type: Number
    Default: 36000000 # 10 hours
    Description: 'MaxAgeInMilliseconds for Kinesis Logs GetRecords'

  LogsKinesisMaxAgeInMillisecondsOncall:
    Type: Number
    Default: 216000000 # 60 hours
    Description: 'MaxAgeInMilliseconds for Kinesis Logs GetRecords'

  CdcKinesisMaxAgeInMilliseconds:
    Type: Number
    Default: 3600000 # 1 hour
    Description: 'MaxAgeInMilliseconds for Kinesis Cdc GetRecords'

  CdcKinesisMaxAgeInMillisecondsOncall:
    Type: Number
    Default: 43200000 # 12 hours
    Description: 'MaxAgeInMilliseconds for Kinesis Cdc GetRecords'   

  # Data Monitoring pass-through params
  DynamoDbExportTableNames:
    Type: String
    Description: 'Comma separated list of DynamoDB tables to export'
    Default: ''

  DynamoDbExportPrefix:
    Type: String
    Description: 'Prefix for the DynamoDB export'
    Default: 'incremental2024'

  ParquetBucketPath:
    Type: String
    Description: parquet files s3 bucket path
    Default: 'parquet'

  DataMonitoringCodebuildComputeType:
    Type: String
    Description: Codebuild compute type (https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html)
    Default: BUILD_GENERAL1_LARGE

  DataMonitoringIndexCronExpression:
    Type: String
    Description: Cron expression for the scheduled rule, e.g. cron(0 9 * * ? *)
    Default: '' # example: 'cron(0 9 * * ? *)'

  DataMonitoringScriptVersion:
    Type: String
    Description: 'The version of the BI or not BI EC metadata'
    Default: ec_metadata_extract_v0_1

  DataLakeAccountId:
    Type: String
    Description: 'Datalake AWS Account ID'
    Default: ''
    
  # Lambda deploy parameters
  CdBucketName:
    Type: String
    Description: 'The bucket name where to deploy CD artifacts'
    Default: ''
  
  BucketBasePath:
    Type: String
    Description: 'The base path of the bucket where to deploy the lambdas'
    Default: ''

  # PdfRaster Output
  PdfRasterVpcId:
    Type: String
    Description: Id della VPC contenete il microservizio PdfRaster
    Default: ''
  
  PdfRasterVpcCidr:
    Type: String
    Description: CIDR della VPC contenete il microservizio PdfRaster
    Default: ''
  
  PdfRasterDefaultSecurityGroup:
    Type: String
    Description: Default PdfRaster VPC security group
    Default: ''

  PdfRasterVpcSubnets:
    Type: String
    Description: Subnets della VPC contenente il microservizio PdfRaster
    Default: ''

  PdfRasterVpcSubnetsCidrs:
    Type: String
    Description: CIDRs delle subnets della VPC contenente il microservizio PdfRaster
    Default: ''
  
  PdfRasterApplicationLoadBalancerArn:
    Type: String
    Description: ECS cluster Application Load Balancer ARN, attach microservice listeners here
    Default: ''

  PdfRasterApplicationLoadBalancerMetricsDimensionName:
    Type: String
    Description: ECS cluster Application Load Balancer name used for metrics
    Default: ''

  PdfRasterApplicationLoadBalancerAwsDns:
    Type: String
    Description: ECS cluster Application Load Balancer AWS released DNS, can be used to call microservices
    Default: ''

  PdfRasterApplicationLoadBalancerAwsDnsZoneId:
    Type: String
    Description: ECS cluster Application Load Balancer AWS hosted Zone, usefull for aliases
    Default: ''

  PdfRasterApplicationLoadBalancerListenerArn:
    Type: String
    Description: ECS cluster Application Load Balancer Listener ARN, attach here new microservice routing rule
    Default: ''

  PdfRasterWebappSecurityGroupId:
    Type: String
    Description: WebApp security group id
    Default: ''

  PdfRasterWebappSecurityGroupArn:
    Type: String
    Description: WebApp security group ARN

  ServiceEndpointToPdfRaster:
    Type: String
    Description: Service endpoint for PdfRaster connections
    Default: ''

  EnvironmentType:
    Type: String
    Description: "Environment type (dev, test, uat, hotfix, prod)"
    AllowedValues:
      - dev
      - test
      - uat
      - hotfix
      - prod

Conditions:
  IsAlbArnEmpty: !Equals [ !Ref ApplicationLoadBalancerArn, '-' ]
  IsAlbArnDnsEmpty: !Equals [ !Ref ApplicationLoadBalancerAwsDns, '-' ]
  IsAlbArnDnsZoneIdEmpty: !Equals [ !Ref ApplicationLoadBalancerAwsDnsZoneId, '-' ]
  IsAlbListenerArnEmpty: !Equals [ !Ref ApplicationLoadBalancerListenerArn, '-' ]
  RequiresAlbCreation: !Or [ !Condition IsAlbArnEmpty, !Condition IsAlbArnDnsEmpty, !Condition IsAlbArnDnsZoneIdEmpty, !Condition IsAlbListenerArnEmpty ]

  RequiresVpcEndpoints: !Equals [ !Ref VpcEndpointsRequired, true ]

  IsEgressDefined: !Not [ !Equals [ !Ref VpcEgressSubnetsIds, '-' ] ]
  HasPnCoreAwsAccountId: !Not [ !Equals [ !Ref PnCoreAwsAccountId, '-' ] ]

  HasFixedSafeStorageBucketName: !Not [ !Equals [ !Ref SafeStorageBucketName, '-' ] ]

Resources:

  LogsExporterRole:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/log-bucket-access-role.yaml"
      Parameters:
        ProjectName: !Ref ProjectName
        LogsBucketName: !Ref LogsBucketName
        LogsBucketKmsKeyArn: !Ref LogsBucketKmsKeyArn
        SafeStorageAccountId: !Ref AWS::AccountId
        DataLakeAccountId1: '-'
        DataLakeAccountId2: '-'
        BucketSuffix: !Ref BucketSuffix 
        MoreBucketResourcePolicyStatements: 
          Fn::If:
            - HasPnCoreAwsAccountId
            - !Sub |
                ,{
                  "Sid": "pnCoreListing",
                  "Effect": "Allow",
                  "Principal": {
                      "AWS": "arn:${AWS::Partition}:iam::${PnCoreAwsAccountId}:root"
                  },
                  "Action": "s3:ListBucket",
                  "Resource": "arn:${AWS::Partition}:s3:::${LogsBucketName}"
                },
                {
                  "Sid": "pnCoreLimitedGet",
                  "Effect": "Allow",
                  "Principal": {
                      "AWS": "arn:${AWS::Partition}:iam::${PnCoreAwsAccountId}:root"
                  },
                  "Action": "s3:GetObject",
                  "Resource": "arn:${AWS::Partition}:s3:::${LogsBucketName}/safeStorageObjectPutAndGetTracing/*"
                },
                {
                  "Sid": "pnCoreGetLogsToS3",
                  "Effect": "Allow",
                  "Principal": {
                      "AWS": "arn:${AWS::Partition}:iam::${PnCoreAwsAccountId}:root"
                  },
                  "Action": "s3:GetObject",
                  "Resource": "arn:${AWS::Partition}:s3:::${LogsBucketName}/logsTos3/*"
                },
                {
                  "Sid": "pnDiagnosticCloudtrailWrite",
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "cloudtrail.amazonaws.com"
                  },
                  "Action": "s3:PutObject",
                  "Resource": "arn:${AWS::Partition}:s3:::${LogsBucketName}/diagnosticTrail/*",
                  "Condition":{
                    "StringLike":{
                      "aws:SourceArn": [ 
                        "arn:${AWS::Partition}:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/*"
                      ]                  
                    }
                  }
                }
            - ""
  
  ###             Export dynamo CDC to Log saving bucket             ###
  ###########################################################################
  CdcToExternalBucket:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/kinesis-source-stream-to-logs-bucket.yaml"
      Parameters:
        ProjectName: !Ref ProjectName
        SourceKinesisDataStreamArn: !Ref CdcKinesisStreamArn
        SourceKinesisDataStreamKeyArn: !Ref CdcKinesisStreamKeyArn
        LogsBucketName: !Ref LogsBucketName
        LogsExporterRoleArn: !GetAtt LogsExporterRole.Outputs.LogsIngestionRoleArn
        StreamNamePrefix: 'cdcTos3'
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn
        StreamContent: DYNAMO_CDC

  ###             Export CloudWatch Logs to Log saving bucket             ###
  ###########################################################################
  LogsToExternalBucket:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/kinesis-source-stream-to-logs-bucket.yaml"
      Parameters:
        ProjectName: !Ref ProjectName
        SourceKinesisDataStreamArn: !Ref LogsKinesisStreamArn
        SourceKinesisDataStreamKeyArn: !Ref LogsKinesisStreamKeyArn
        LogsBucketName: !Ref LogsBucketName
        LogsExporterRoleArn: !GetAtt LogsExporterRole.Outputs.LogsIngestionRoleArn
        StreamNamePrefix: 'logsTos3'
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn    
        StreamContent: CLOUDWATCH_LOGS         

  ###                       CLOUDFORMATION TRANSFORM LAMBDAS              ###
  ###########################################################################
  UpdateDeploymentTransform:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/lambda-update-deployment-transform.yaml"

  CfTransform:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/lambda-cf-transform.yaml"
      Parameters:
        EnvironmentType: !Ref EnvironmentType

  CloudWatchDashboardTransform:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/lambda-cloudwatch-dashboard-transform.yaml"

  
  # Private connection from subnets to AWS services
  VPCEndpoints:
    Condition: RequiresVpcEndpoints
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/vpc-endpoints.yaml"
      Parameters:
        VpcName: !Ref ProjectName
        VpcCidr: !Ref VpcCidr
        Subnets: !Ref VpcSubnets
        RouteTableIds: !Ref VpcSubnetsRoutingTables
        VpcId: !Ref VpcId

  ###                       APPLICATION LOAD BALANCER                       ###
  #############################################################################
  # Application load balancer
  ApplicationLoadBalancer:
    Condition: RequiresAlbCreation
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internal
      IpAddressType: ipv4
      Subnets: !Split [ ',', !Ref VpcSubnets ]
      SecurityGroups:
        - !Ref WebappSecurityGroup
      LoadBalancerAttributes:
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: true

  # Application load balancer listener
  ApplicationLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: RequiresAlbCreation
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Protocol: HTTP
      Port: 8080
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 404
            ContentType: "application/json"
            MessageBody: "{ \"error\": \"404\", \"message\": \"Load balancer rule not configured\" }"
          Order: 1

  # Application security groups
  WebappSecurityGroup:
    Condition: RequiresAlbCreation
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectName}-webapp-security-group
      GroupDescription: "ingres tcp 8080, egress all"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref VpcId


  # Load balancer private fixed DNS
  Route53RecordSetGroup:
    Condition: RequiresAlbCreation
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub 'alb.confidential.${ProjectName}.internal'
      Type: A
      HostedZoneId: !Ref PrivateHostedZone  
      AliasTarget:
        DNSName: !GetAtt ApplicationLoadBalancer.DNSName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID

  ###                             ECS CLUSTER                             ###
  ###########################################################################

  # The cluster
  ECSCluster:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/ecs-cluster.yaml"
      Parameters:
        MacroServiceName: !Sub '${ProjectName}-confidential'

  # The cluster for pn-pdfraster
  PdfRasterECSCluster:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/ecs-cluster.yaml"
      Parameters:
        MacroServiceName: !Sub '${ProjectName}-pdfraster'

 ###                             ELASTIC FILE SYSTEM                     ###
  ###########################################################################

  FargateEFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
        PerformanceMode: generalPurpose
        Encrypted: true
        ThroughputMode: bursting
        FileSystemTags: 
          - 
            Key: Name
            Value: Fargate-EFS

  # create each mountpoint for internal subnet:
  MountFargateEfsTarget1:
      Type: AWS::EFS::MountTarget
      Properties: 
          FileSystemId: !Ref FargateEFSFileSystem
          SecurityGroups: 
            - !Ref EFSSecurityGroup
          SubnetId: !Select [0, !Split [",", !Ref VpcSubnets]] 

  MountFargateEfsTarget2:
      Type: AWS::EFS::MountTarget
      Properties: 
          FileSystemId: !Ref FargateEFSFileSystem
          SecurityGroups: 
            - !Ref EFSSecurityGroup
          SubnetId: !Select [1, !Split [",", !Ref VpcSubnets]] 

  MountFargateEfsTarget3:
      Type: AWS::EFS::MountTarget
      Properties: 
          FileSystemId: !Ref FargateEFSFileSystem
          SecurityGroups: 
            - !Ref EFSSecurityGroup
          SubnetId: !Select [2, !Split [",", !Ref VpcSubnets]] 

  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: EFS Security Group
      SecurityGroupIngress:
        # All Subnet can mount EFS:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049

  ###                          PN-CONFINFO EVENT BUS                       ###
  ###########################################################################
  PnConfinfoEventBus:
    Type: AWS::Events::EventBus
    Properties: 
      Name: !Sub '${ProjectName}-ConfinfoEventBus'

  # Standard Queue for events Dead Letter Queue
  EventBusDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: !Ref EventBusDeadLetterQueueMaximumRetentionPeriod
      QueueName: !Sub '${ProjectName}-ConfinfoEventBus-DLQ'

  # Allow access from the same confinfo system
  PnConfinfoEventBusAccessPolicy: 
    Type: AWS::Events::EventBusPolicy
    Properties: 
      EventBusName: !Ref PnConfinfoEventBus
      StatementId: "AllowEventPutBySafeStorage"
      Statement: 
        Effect: "Allow"
        Principal: 
          AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
        Action: "events:PutEvents"
        Resource: !GetAtt "PnConfinfoEventBus.Arn"

  # Dead Letter Queue policy 
  EventBusDeadLetterQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref "EventBusDeadLetterQueue"
      PolicyDocument:
        Statement:
          - Sid: "SendEventsToDLQ"
            Effect: "Allow"
            Principal: 
              Service: 
                - "events.amazonaws.com"
            Action: 
              - "SQS:SendMessage"
            Resource:
              - !GetAtt "EventBusDeadLetterQueue.Arn"

  # Alarm for Dead letter queue has messages
  DLQHasMessagesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-ConfinfoEventBus-DLQ-HasMessage'
      AlarmDescription: "CloudWatch alarm for when DLQ has 1 or more messages."
      Namespace: "AWS/SQS"
      MetricName: "ApproximateNumberOfMessagesVisible"
      Dimensions:
        - Name: "QueueName"
          Value: !Sub '${EventBusDeadLetterQueue.QueueName}'
      Statistic: "Sum"
      TreatMissingData: "notBreaching"
      Period: 60
      Threshold: 1
      ComparisonOperator: "GreaterThanOrEqualToThreshold" 
      EvaluationPeriods: 1       
      AlarmActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}'
      InsufficientDataActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}'
      OKActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}'

  OncallDLQHasMessagesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'oncall-${ProjectName}-ConfinfoEventBus-DLQ-HasMessage'
      AlarmDescription: "CloudWatch alarm for when DLQ has 1 or more messages."
      TreatMissingData: "notBreaching"
      Threshold: 1
      ComparisonOperator: "GreaterThanOrEqualToThreshold" 
      EvaluationPeriods: 5      
      Metrics:
        - Id: m1
          MetricStat:
            Metric:
              Dimensions:
                - Name: QueueName
                  Value: !Sub '${EventBusDeadLetterQueue.QueueName}'
              MetricName: NumberOfMessagesReceived
              Namespace: AWS/SQS
            Period: 60
            Stat: Sum
          ReturnData: False
        - Id: m2
          MetricStat:
            Metric:
              Dimensions:
                - Name: EventBusName
                  Value: !Sub '${ProjectName}-ConfinfoEventBus'
              MetricName: MatchedEvents
              Namespace: AWS/Events
            Period: 60
            Stat: Sum
          ReturnData: False
        - Id: e1
          Expression: !Sub IF(m2>0 AND m1/m2>${OncallDlqRatio}, 1, 0)
          Label: !Sub "${ProjectName}-ConfinfoEventBus-HasDLQMessage-OnCall-Metric"        
      AlarmActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}'
      InsufficientDataActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}'
      OKActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}'

# SNS Subscription for SES log
  SnsSubscription:
      Type: AWS::SNS::Subscription
      Properties:
          Protocol: lambda
          Endpoint: !GetAtt SesLambdaFunction.Arn
          TopicArn: !Ref SesSnsTopic

# SES Lambda for Log
  SesLambdaInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
          Action: lambda:InvokeFunction
          Principal: sns.amazonaws.com
          SourceArn:  !Ref SesSnsTopic
          FunctionName: !Ref SesLambdaFunction

  SesLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: SesLambdaFunctionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: '*'
            
  SesLambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Join
        - ""
        - -  "/aws/lambda/"
          - !Ref SesLambdaFunction

  SesLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.10
      Timeout: 5
      Handler: index.lambda_handler
      Role: !GetAtt SesLambdaFunctionRole.Arn
      Code:
        ZipFile: |
              import re

              def replace_email(string):
                  pattern = r'\b([A-Za-z0-9._%+-]+)@([A-Za-z0-9.-]+\.[A-Za-z]{2,})\b'
                  return re.sub(pattern, r'***@\2', string)

              def lambda_handler(event, context):
                  single_event = event['Records'][0]['Sns']['Message']
                  single_event = replace_email(single_event)

                  print(single_event)
                  return single_event

# SES Lambda for Monitoring Emails Quota
  SesQuotaMonitoringLambdaScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "ScheduledRule"
      ScheduleExpression: "rate(30 minutes)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt SesQuotaMonitoringLambdaFunction.Arn
          Id: "TargetSesQuotaMonitoringLambdaFunction"

  SesQuotaMonitoringLambdaInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
          Action: lambda:InvokeFunction
          Principal: events.amazonaws.com
          SourceArn:  !GetAtt SesQuotaMonitoringLambdaScheduledRule.Arn
          FunctionName: !Ref SesQuotaMonitoringLambdaFunction

  SesQuotaMonitoringLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: SesQuotaMonitoringLambdaFunctionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - cloudwatch:PutMetricData
              - ses:GetSendStatistics
              - ses:GetSendQuota
            Resource: '*'
            
  SesQuotaMonitoringLambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref SesQuotaLambdaLogGroupRetentionInDays
      LogGroupName: !Join
        - ""
        - -  "/aws/lambda/"
          - !Ref SesQuotaMonitoringLambdaFunction

  SesQuotaMonitoringLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.10
      Timeout: 30
      Handler: index.lambda_handler
      Role: !GetAtt SesQuotaMonitoringLambdaFunctionRole.Arn
      Code:
        ZipFile: |
            import json
            import boto3

            def lambda_handler(event, context):
                # Ottieni la quota di invio globale
                client = boto3.client('ses')
                quota = client.get_send_quota()

                # Crea un oggetto metrica
                ses_send_quota_metric = {
                    'MetricName': 'MailSentLast24Hours',
                    'Dimensions': [
                        {
                            'Name': 'Region',
                            'Value': 'eu-south-1'
                        }
                    ],
                    'Value': quota['SentLast24Hours']
                }
            
                quota_percentage = quota['SentLast24Hours'] * 100 / quota['Max24HourSend']
                
                ses_quota_usage = {
                    'MetricName': 'MailUsageLast24HoursPercentage',
                    'Dimensions': [
                        {
                            'Name': 'Region',
                            'Value': 'eu-south-1'
                        }
                    ],
                    'Value': int(quota_percentage)
                }
                
                

                # Invia la metrica a CloudWatch
                cloudwatch_client = boto3.client('cloudwatch')
                cloudwatch_client.put_metric_data(
                    Namespace='AWS/SES',
                    MetricData=[ses_quota_usage]
                )
                
                # Invia la metrica a CloudWatch
                cloudwatch_client.put_metric_data(
                    Namespace='AWS/SES',
                    MetricData=[ses_send_quota_metric]
                )

                return {
                    'ses_quota_usage': ses_quota_usage,
                    'ses_send_quota_metric': ses_send_quota_metric
                }
                

  
  # SES and SMS Dashboard Cloudwatch      
  SesSmsDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: "SES-SNS-Dashboard"
      DashboardBody: !Sub  |
        {
            "widgets": [
                {
                    "height": 3,
                    "width": 12,
                    "y": 0,
                    "x": 0,
                    "type": "metric",
                    "properties": {
                        "metrics": [
                            [ "AWS/SES", "Reputation.BounceRate", { "region": "eu-south-1", "visible": false } ],
                            [ ".", "Reputation.ComplaintRate", { "region": "eu-south-1", "visible": false } ],
                            [ ".", "Send", { "region": "eu-south-1" } ],
                            [ ".", "Delivery", { "region": "eu-south-1" } ],
                            [ ".", "Bounce", { "region": "eu-south-1" } ]
                        ],
                        "view": "singleValue",
                        "stacked": false,
                        "region": "eu-south-1",
                        "period": 86400,
                        "title": "SES_mails_sent_last24hours",
                        "stat": "Sum",
                        "yAxis": {
                            "left": {
                                "min": 0
                            }
                        }
                    }
                },
                {
                    "height": 3,
                    "width": 11,
                    "y": 0,
                    "x": 12,
                    "type": "metric",
                    "properties": {
                        "metrics": [
                            [ "AWS/SNS", "SMSSuccessRate", "SMSType", "Transactional", "Country", "IT" ]
                        ],
                        "view": "singleValue",
                        "stacked": true,
                        "region": "eu-south-1",
                        "title": "SMS_sent_last24hours",
                        "yAxis": {
                            "left": {
                                "min": 0,
                                "max": 50000
                            }
                        },
                        "period": 86400,
                        "stat": "Sum"
                    }
                },
                {
                    "height": 4,
                    "width": 12,
                    "y": 3,
                    "x": 0,
                    "type": "log",
                    "properties": {
                        "query": "SOURCE '${SesLambdaFunctionLogGroup}' | fields @timestamp, @message, @logStream, @log\n| filter @message like /eventType/\n| sort @timestamp desc\n| limit 20",
                        "region": "eu-south-1",
                        "stacked": false,
                        "view": "table"
                    }
                },
                {
                    "height": 4,
                    "width": 11,
                    "y": 3,
                    "x": 12,
                    "type": "metric",
                    "properties": {
                        "metrics": [
                            [ "AWS/SNS", "SMSMonthToDateSpentUSD", { "region": "eu-south-1" } ]
                        ],
                        "view": "singleValue",
                        "stacked": false,
                        "region": "eu-south-1",
                        "yAxis": {
                            "left": {
                                "min": 0,
                                "max": 10000
                            }
                        },
                        "period": 300,
                        "stat": "Maximum",
                        "title": "SMS_MonthBilling_USD"
                    }
                },
                {
                    "type": "metric",
                    "x": 0,
                    "y": 7,
                    "width": 12,
                    "height": 4,
                    "properties": {
                        "metrics": [
                            [ "AWS/SES", "MailUsageLast24HoursPercentage", "Region", "eu-south-1", { "id": "m1", "region": "eu-south-1" } ]
                        ],
                        "sparkline": true,
                        "view": "singleValue",
                        "region": "eu-south-1",
                        "stat": "Maximum",
                        "period": 300,
                        "stacked": true
                    }
                  }
            ]
        }

  SMSUsdMonthlyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
        AlarmName: !Sub '${ProjectName}-Confinfo-SMS-MonthToDateSpentUSD'
        AlarmDescription: CloudWatch alarm for the monthly SMS SpentUSD threshold is 80%
        ActionsEnabled: true
        MetricName: SMSMonthToDateSpentUSD
        Namespace: AWS/SNS
        Statistic: Maximum
        Dimensions: []
        Period: 300
        EvaluationPeriods: 1
        DatapointsToAlarm: 1
        Threshold: !Ref SMSUsdMonthlyAlarmThreshold
        ComparisonOperator: GreaterThanOrEqualToThreshold
        TreatMissingData: missing
        AlarmActions:
          - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}'
        OKActions:
          - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}'

  SESSentDailyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
        AlarmName: !Sub '${ProjectName}-Confinfo-SES-MailDailySends'
        AlarmDescription: CloudWatch alarm for the daily Mail Sent threshold is 80%
        ActionsEnabled: true
        MetricName: MailUsageLast24HoursPercentage
        Namespace: PN/SES
        Statistic: Maximum
        Dimensions: []
        Period: 300
        EvaluationPeriods: 1
        DatapointsToAlarm: 1
        Threshold: !Ref SESSentDailyAlarmThresholdPercentage
        ComparisonOperator: GreaterThanOrEqualToThreshold
        TreatMissingData: missing
        AlarmActions:
          - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}'
        OKActions:
          - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}'


  # Define the SNS topic for SES log
  SesSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
        TopicName: pn-sessns-topic
 
    
  # Policy allow SES to publish event to SNS topic for SES log
  SesTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Sid: "Allow SES publish to SNS"
            Effect: Allow
            Principal:
              Service: ses.amazonaws.com
            Action: 'SNS:Publish'
            Resource: !Ref  SesSnsTopic
            Condition:
              StringLike:
                'AWS:SourceArn': 'arn:aws:ses:*'
      Topics:
        - !Ref SesSnsTopic

Outputs:

  AlarmSNSTopicArn:
    Value: !Ref AlarmSNSTopicArn
    Description: ARN of the Alarm SNS Topic

  AlarmSNSTopicName:
    Value: !Ref AlarmSNSTopicName
    Description: Alarm SNS Topic name

  VpcId:
    Description: VpcId of the VPC where to install PN-CONFIDENTIAL-INFO
    Value: !Ref VpcId

  VpcCidr:
    Description: Cidr of the VPC where PN-CONFIDENTIAL-INFO is installed
    Value: !Ref VpcCidr

  VpcSubnets:
    Description: subnets where to install PN-CONFIDENTIAL-INFO
    Value: !Ref VpcSubnets

  # Confidential Data Change Data Capture kinesis stream
  ConfidentialInfoCdcKinesisSourceStreamArn:
    Value: !Ref CdcKinesisStreamArn
    Description: kinesis stream Arn for ConfidentialObject dynamo table

  # Kinesis Source Stream containing the CloudWatch Logs
  ConfidentialInfoLogsKinesisSourceStreamArn:
    Description: 'Kinesis source Logs stream ARN'
    Value: !Ref LogsKinesisStreamArn

  # Back-compatibility for logsaver
  LogsKinesisSourceStreamArn:
    Description: 'Kinesis source Logs stream ARN'
    Value: !Ref LogsKinesisStreamArn

  # Back-compatibility for logsaver
  CdcKinesisSourceStreamArn:
    Description: 'Kinesis source Logs stream ARN'
    Value: !Ref CdcKinesisStreamArn

  # Back-compatibility for logsaver
  LogsExporterPolicyArn:
    Description: Policy used by LogsExporterRoleArn Role
    Value: !GetAtt LogsExporterRole.Outputs.LogsIngestionPolicyArn

  # Back-compatibility for logsaver
  LogsToExternalBucketArn:
    Description: 'Logs Delivery stream to S3 ARN'
    Value: !GetAtt LogsToExternalBucket.Outputs.DeliveryStreamArn

  LogsToExternalBucketAlarmArn:
    Description: 'Log delivery stream alarm ARN'
    Value: !GetAtt LogsToExternalBucket.Outputs.DeliveryStreamErrorLogsMetricAlarmArn

  CdcToExternalBucketArn:
    Description: 'Cdc Delivery stream to S3 ARN'
    Value: !GetAtt CdcToExternalBucket.Outputs.DeliveryStreamArn

  CdcToExternalBucketAlarmArn:
    Description: 'Cdc delivery stream alarm ARN'
    Value: !GetAtt CdcToExternalBucket.Outputs.DeliveryStreamErrorLogsMetricAlarmArn

  # Back-compatibility for logsaver
  SubnetsIds:
    Description: subnets where to install PN-CONFIDENTIAL-INFO
    Value: !Ref VpcSubnets

  ApplicationLoadBalancerListenerArn:
    Value: !If [ RequiresAlbCreation, !Ref ApplicationLoadBalancerListener, !Ref ApplicationLoadBalancerListenerArn ] 
    Description: Application Load Balancer listener Arn

  ApplicationLoadBalancerDomain:
    Value: !If [ RequiresAlbCreation, !Sub '${ApplicationLoadBalancer.DNSName}', !Ref ApplicationLoadBalancerAwsDns ]
    Description: Application Load Balancer Domain to use for http URL
  
  # ECS Cluster
  ECSClusterName:
    Value: !GetAtt ECSCluster.Outputs.ClusterName
    Description: ECS cluster name
  
  PdfRasterECSClusterName:
    Value: !GetAtt PdfRasterECSCluster.Outputs.ClusterName
    Description: ECS cluster name for pn-pdfraster
    
  # EFS Filesystem:
  FargateEFSFileSystemID:
    Value: !Ref FargateEFSFileSystem

  LogsBucketKmsKeyArn:
    Value: !Ref LogsBucketKmsKeyArn
  LogsBucketName:
    Value: !Ref LogsBucketName
  CdcKinesisStreamName:
    Value: !Ref CdcKinesisStreamName
  CdcKinesisMaxAgeInMilliseconds:
    Value: !Ref CdcKinesisMaxAgeInMilliseconds    
  CdcKinesisMaxAgeInMillisecondsOncall:
    Value: !Ref CdcKinesisMaxAgeInMillisecondsOncall    
  CdcKinesisStreamArn:
    Value: !Ref CdcKinesisStreamArn
  CdcKinesisStreamKeyArn:
    Value: !Ref CdcKinesisStreamKeyArn
  LogsKinesisStreamName:
    Value: !Ref LogsKinesisStreamName
  LogsKinesisMaxAgeInMilliseconds:
    Value: !Ref LogsKinesisMaxAgeInMilliseconds
  LogsKinesisMaxAgeInMillisecondsOncall:
    Value: !Ref LogsKinesisMaxAgeInMillisecondsOncall
  LogsKinesisStreamArn:
    Value: !Ref LogsKinesisStreamArn
  LogsKinesisStreamKeyArn:
    Value: !Ref LogsKinesisStreamKeyArn
  SandboxSafeStorageBaseUrl:
    Value: !If [ RequiresAlbCreation, !Ref SandboxSafeStorageBaseUrl, !Sub 'http://${ApplicationLoadBalancerAwsDns}:8080/' ]

  PnCoreTargetEventBus:
    Value: !Ref PnCoreTargetEventBus
  
  VpcEgressSubnetsIds:
    Value: !If [ IsEgressDefined, !Ref VpcEgressSubnetsIds, !Ref VpcSubnets ]
  
  EcsDefaultSecurityGroup:
    Value: !Ref EcsDefaultSecurityGroup
  PnVPCDefaultSecurityGroup:
    Value: !Ref PnVPCDefaultSecurityGroup
  SafeStorageFileAccessLogsBucketName:
    Value: !Ref SafeStorageFileAccessLogsBucketName
  SafeStorageFileAccessLogsBucketPathPrefix:
    Value: !Ref SafeStorageFileAccessLogsBucketPathPrefix
  
  SafeStorageBucketName:
    Value: !If [ HasFixedSafeStorageBucketName, !Ref SafeStorageBucketName, !Sub "${ProjectName}-safestorage-${AWS::Region}-${AWS::AccountId}" ]

  LogRetention:
    Value: !Ref LogRetention

  BackupCronExpression:
    Value: !Ref BackupCronExpression

  ApplicationLoadBalancerMetricsDimensionName:
    Value: !Ref ApplicationLoadBalancerMetricsDimensionName

  ConfinfoEventBusName:
    Value: !Ref PnConfinfoEventBus

  ConfinfoEventBusArn:
    Value: !GetAtt PnConfinfoEventBus.Arn

  EventBusDeadLetterQueueArn:
    Value: !GetAtt EventBusDeadLetterQueue.Arn

  EventBusDeadLetterQueueUrl:
    Value: !Ref EventBusDeadLetterQueue

  EventBusDeadLetterQueueName:
    Value: !GetAtt EventBusDeadLetterQueue.QueueName

  SesLambdaFunctionName:
    Value: !Ref SesLambdaFunction

  PnCoreAwsAccountId:
    Value: !Ref PnCoreAwsAccountId

  # Data Monitoring pass-through params
  DynamoDbExportTableNames:
    Value: !Ref DynamoDbExportTableNames
  DynamoDbExportPrefix:
    Value: !Ref DynamoDbExportPrefix
  ParquetBucketPath:
    Value: !Ref ParquetBucketPath
  DataMonitoringCodebuildComputeType:
    Value: !Ref DataMonitoringCodebuildComputeType
  DataMonitoringIndexCronExpression:
    Value: !Ref DataMonitoringIndexCronExpression
  DataMonitoringScriptVersion:
    Value: !Ref DataMonitoringScriptVersion
  DataLakeAccountId:
    Value: !Ref DataLakeAccountId
    
  # required for core compatibility
  EnvironmentType:
    Value: !Ref EnvironmentType
  LambdasBucketName:
    Value: !Ref CdBucketName

  # Lambdas pass-through parameters
  CdBucketName:
    Value: !Ref CdBucketName
  
  BucketBasePath:
    Value: !Ref BucketBasePath
    
  # pdf raster output
  PdfRasterVpcId:
    Value: !Ref PdfRasterVpcId
  
  PdfRasterVpcCidr:
    Value: !Ref PdfRasterVpcCidr
  
  PdfRasterDefaultSecurityGroup:
    Value: !Ref PdfRasterDefaultSecurityGroup

  PdfRasterVpcSubnets:
    Value: !Ref PdfRasterVpcSubnets

  PdfRasterVpcSubnetsCidrs:
    Value: !Ref PdfRasterVpcSubnetsCidrs
  
  PdfRasterApplicationLoadBalancerArn:
    Value: !Ref PdfRasterApplicationLoadBalancerArn

  PdfRasterApplicationLoadBalancerMetricsDimensionName:
    Value: !Ref PdfRasterApplicationLoadBalancerMetricsDimensionName

  PdfRasterApplicationLoadBalancerAwsDns:
    Value: !Ref PdfRasterApplicationLoadBalancerAwsDns

  PdfRasterApplicationLoadBalancerAwsDnsZoneId:
    Value: !Ref PdfRasterApplicationLoadBalancerAwsDnsZoneId

  PdfRasterApplicationLoadBalancerListenerArn:
    Value: !Ref PdfRasterApplicationLoadBalancerListenerArn

  PdfRasterWebappSecurityGroupId:
    Value: !Ref PdfRasterWebappSecurityGroupId

  PdfRasterWebappSecurityGroupArn:
    Value: !Ref PdfRasterWebappSecurityGroupArn

  ServiceEndpointToPdfRaster:
    Value: !Ref ServiceEndpointToPdfRaster
    