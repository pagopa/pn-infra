AWSTemplateFormatVersion: '2010-09-09'
Description: Template for log analytics services

Parameters:
  ProjectName:
    Type: String
    Default: pn
    Description: Base name for pn project

  LogsBucketName:
    Type: String
    Description: Logs bucket name

  LogsBucketKmsKeyArn:
    Type: String
    Description: Arn of logs bucket KMS key
  
  GlueCrawlerSchedule:
    Type: String
    Default: ''
    Description: Cron expression for the Glue Crawler schedule. #e.g. 'cron(0 1 * * ? *)'

Conditions:
  IsGlueCrawlerScheduled: !Not
    - !Equals
      - !Ref GlueCrawlerSchedule
      - ''

Resources:
  GlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: log_analytics_database
        Description: Database for Log analytics 

  GlueTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref GlueDatabase
      TableInput:
        Name: log_analytics_table
        TableType: EXTERNAL_TABLE
        Parameters:
          compression.type: gzip
          EXTERNAL: 'TRUE'
        StorageDescriptor:
          Location: !Sub s3://${LogsBucketName}/logsTos3
          InputFormat: com.amazon.ionhiveserde.formats.IonInputFormat
          OutputFormat: com.amazon.ionhiveserde.formats.IonOutputFormat
          SerdeInfo:
            SerializationLibrary: com.amazon.ionhiveserde.IonHiveSerDe
            Parameters:
              serialization.format: '1'
          Columns:
            - Name: messagetype
              Type: string
            - Name: owner
              Type: string
            - Name: loggroup
              Type: string
            - Name: logstream
              Type: string
            - Name: subscriptionfilters
              Type: array<string>
            - Name: logevents
              Type: array<struct<id:string,timestamp:bigint,message:string>>
        PartitionKeys:
          - Name: year
            Type: string
          - Name: month
            Type: string
          - Name: day
            Type: string
          - Name: hour
            Type: string

  ApiGatewayView:
    Type: AWS::Glue::Table
    DependsOn: GlueTable
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref GlueDatabase
      TableInput:
        Name: apigateway_view
        TableType: VIRTUAL_VIEW
        Parameters:
          presto_view: 'true'
          comment: Presto View for API Gateway Logs
        StorageDescriptor:
          Columns:
            - Name: year
              Type: string
            - Name: month
              Type: string
            - Name: day
              Type: string
            - Name: hour
              Type: string
            - Name: messagetype
              Type: string
            - Name: owner
              Type: string
            - Name: loggroup
              Type: string
            - Name: logstream
              Type: string
            - Name: subscriptionfilters
              Type: array<string>
            - Name: event_id
              Type: string
            - Name: event_timestamp
              Type: bigint
            - Name: requesttime
              Type: string
            - Name: requestid
              Type: string
            - Name: httpmethod
              Type: string
            - Name: path
              Type: string
            - Name: status
              Type: int
            - Name: responselatency
              Type: double
            - Name: xraytraceid
              Type: string
            - Name: integrationrequestid
              Type: string
            - Name: functionresponsestatus
              Type: string
            - Name: integrationlatency
              Type: double
            - Name: integrationservicestatus
              Type: string
            - Name: authorizestatus
              Type: string
            - Name: authorizerstatus
              Type: string
            - Name: authorizerlatency
              Type: double
            - Name: authorizerrequestid
              Type: string
            - Name: ip
              Type: string
            - Name: useragent
              Type: string
            - Name: principalid
              Type: string
            - Name: cxid
              Type: string
            - Name: cxtype
              Type: string
            - Name: sourcechannel
              Type: string
            - Name: sourceversion
              Type: string
            - Name: uid
              Type: string
        ViewOriginalText: !Sub
          - '/* Presto View: ${View} */'
          - View: !Base64
              Fn::Sub:
                - |
                  {
                    "originalSql": "SELECT year, month, day, hour, messageType, owner, logGroup, logStream, subscriptionFilters, e.id AS event_id, e.timestamp AS event_timestamp, JSON_EXTRACT_SCALAR(e.message, '$.requestTime') AS requestTime, JSON_EXTRACT_SCALAR(e.message, '$.requestId') AS requestId, JSON_EXTRACT_SCALAR(e.message, '$.httpMethod') AS httpMethod, JSON_EXTRACT_SCALAR(e.message, '$.path') AS path, TRY(CAST(JSON_EXTRACT_SCALAR(e.message, '$.status') AS INTEGER)) AS status, TRY(CAST(JSON_EXTRACT_SCALAR(e.message, '$.responseLatency') AS DOUBLE)) AS responseLatency, JSON_EXTRACT_SCALAR(e.message, '$.xrayTraceId') AS xrayTraceId, JSON_EXTRACT_SCALAR(e.message, '$.integrationRequestId') AS integrationRequestId, JSON_EXTRACT_SCALAR(e.message, '$.functionResponseStatus') AS functionResponseStatus, TRY(CAST(JSON_EXTRACT_SCALAR(e.message, '$.integrationLatency') AS DOUBLE)) AS integrationLatency, JSON_EXTRACT_SCALAR(e.message, '$.integrationServiceStatus') AS integrationServiceStatus, JSON_EXTRACT_SCALAR(e.message, '$.authorizeStatus') AS authorizeStatus, JSON_EXTRACT_SCALAR(e.message, '$.authorizerStatus') AS authorizerStatus, TRY(CAST(JSON_EXTRACT_SCALAR(e.message, '$.authorizerLatency') AS DOUBLE)) AS authorizerLatency, JSON_EXTRACT_SCALAR(e.message, '$.authorizerRequestId') AS authorizerRequestId, JSON_EXTRACT_SCALAR(e.message, '$.ip') AS ip, JSON_EXTRACT_SCALAR(e.message, '$.userAgent') AS userAgent, JSON_EXTRACT_SCALAR(e.message, '$.principalId') AS principalId, JSON_EXTRACT_SCALAR(e.message, '$.cxId') AS cxId, JSON_EXTRACT_SCALAR(e.message, '$.cxType') AS cxType, JSON_EXTRACT_SCALAR(JSON_EXTRACT(e.message, '$.sourceChannelDetails'), '$.channel') AS sourceChannel, JSON_EXTRACT_SCALAR(JSON_EXTRACT(e.message, '$.sourceChannelDetails'), '$.version') AS sourceVersion, JSON_EXTRACT_SCALAR(e.message, '$.uid') AS uid FROM ${DatabaseName}.${TableName} CROSS JOIN UNNEST(logEvents) AS t(e) WHERE logGroup LIKE 'pn-%'",
                    "catalog": "awsdatacatalog",
                    "schema": "${DatabaseName}",
                    "columns": [
                      {"name": "year", "type": "varchar"},
                      {"name": "month", "type": "varchar"},
                      {"name": "day", "type": "varchar"},
                      {"name": "hour", "type": "varchar"},
                      {"name": "messagetype", "type": "varchar"},
                      {"name": "owner", "type": "varchar"},
                      {"name": "loggroup", "type": "varchar"},
                      {"name": "logstream", "type": "varchar"},
                      {"name": "subscriptionfilters", "type": "array(varchar)"},
                      {"name": "event_id", "type": "varchar"},
                      {"name": "event_timestamp", "type": "bigint"},
                      {"name": "requesttime", "type": "varchar"},
                      {"name": "requestid", "type": "varchar"},
                      {"name": "httpmethod", "type": "varchar"},
                      {"name": "path", "type": "varchar"},
                      {"name": "status", "type": "integer"},
                      {"name": "responselatency", "type": "double"},
                      {"name": "xraytraceid", "type": "varchar"},
                      {"name": "integrationrequestid", "type": "varchar"},
                      {"name": "functionresponsestatus", "type": "varchar"},
                      {"name": "integrationlatency", "type": "double"},
                      {"name": "integrationservicestatus", "type": "varchar"},
                      {"name": "authorizestatus", "type": "varchar"},
                      {"name": "authorizerstatus", "type": "varchar"},
                      {"name": "authorizerlatency", "type": "double"},
                      {"name": "authorizerrequestid", "type": "varchar"},
                      {"name": "ip", "type": "varchar"},
                      {"name": "useragent", "type": "varchar"},
                      {"name": "principalid", "type": "varchar"},
                      {"name": "cxid", "type": "varchar"},
                      {"name": "cxtype", "type": "varchar"},
                      {"name": "sourcechannel", "type": "varchar"},
                      {"name": "sourceversion", "type": "varchar"},
                      {"name": "uid", "type": "varchar"}
                    ]
                  }
                - DatabaseName: !Ref GlueDatabase
                  TableName: !Ref GlueTable

  EcsMicroservicesView:
    Type: AWS::Glue::Table
    DependsOn: GlueTable
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref GlueDatabase
      TableInput:
        Name: ecs_microservices_view
        TableType: VIRTUAL_VIEW
        Parameters:
          presto_view: 'true'
          comment: Presto View for ECS Microservices Logs
        StorageDescriptor:
          Columns:
            - Name: year
              Type: string
            - Name: month
              Type: string
            - Name: day
              Type: string
            - Name: hour
              Type: string
            - Name: messagetype
              Type: string
            - Name: owner
              Type: string
            - Name: loggroup
              Type: string
            - Name: logstream
              Type: string
            - Name: subscriptionfilters
              Type: array<string>
            - Name: event_id
              Type: string
            - Name: event_timestamp
              Type: timestamp
            - Name: message_timestamp_string
              Type: string
            - Name: logger_name
              Type: string
            - Name: thread_name
              Type: string
            - Name: level
              Type: string
            - Name: level_value
              Type: int
            - Name: trace_id
              Type: string
            - Name: iun
              Type: string
            - Name: ctx_awsmessageid
              Type: string
            - Name: aws_xray_trace_id
              Type: string
            - Name: log_message
              Type: string
        ViewOriginalText: !Sub
          - '/* Presto View: ${View} */'
          - View: !Base64
              Fn::Sub:
                - |
                  {
                    "originalSql": "SELECT year, month, day, hour, messageType, owner, logGroup, logStream, subscriptionFilters, e.id AS event_id, from_unixtime(e.timestamp / 1000) AS event_timestamp, JSON_EXTRACT_SCALAR(e.message, '$[\"@timestamp\"]') AS message_timestamp_string, JSON_EXTRACT_SCALAR(e.message, '$[\"logger_name\"]') AS logger_name, JSON_EXTRACT_SCALAR(e.message, '$[\"thread_name\"]') AS thread_name, JSON_EXTRACT_SCALAR(e.message, '$[\"level\"]') AS level, CAST(JSON_EXTRACT(e.message, '$[\"level_value\"]') AS INTEGER) AS level_value, JSON_EXTRACT_SCALAR(e.message, '$[\"trace_id\"]') AS trace_id, JSON_EXTRACT_SCALAR(e.message, '$[\"iun\"]') AS iun, JSON_EXTRACT_SCALAR(e.message, '$[\"ctx_awsMessageId\"]') AS ctx_awsmessageid, JSON_EXTRACT_SCALAR(e.message, '$[\"AWS-XRAY-TRACE-ID\"]') AS aws_xray_trace_id, JSON_EXTRACT_SCALAR(e.message, '$[\"message\"]') AS log_message FROM ${DatabaseName}.${TableName} CROSS JOIN UNNEST(logEvents) AS t(e) WHERE logGroup LIKE '/aws/ecs/pn-%'",
                    "catalog": "awsdatacatalog",
                    "schema": "${DatabaseName}",
                    "columns": [
                      {"name": "year", "type": "varchar"},
                      {"name": "month", "type": "varchar"},
                      {"name": "day", "type": "varchar"},
                      {"name": "hour", "type": "varchar"},
                      {"name": "messagetype", "type": "varchar"},
                      {"name": "owner", "type": "varchar"},
                      {"name": "loggroup", "type": "varchar"},
                      {"name": "logstream", "type": "varchar"},
                      {"name": "subscriptionfilters", "type": "array(varchar)"},
                      {"name": "event_id", "type": "varchar"},
                      {"name": "event_timestamp", "type": "timestamp"},
                      {"name": "message_timestamp_string", "type": "varchar"},
                      {"name": "logger_name", "type": "varchar"},
                      {"name": "thread_name", "type": "varchar"},
                      {"name": "level", "type": "varchar"},
                      {"name": "level_value", "type": "integer"},
                      {"name": "trace_id", "type": "varchar"},
                      {"name": "iun", "type": "varchar"},
                      {"name": "ctx_awsmessageid", "type": "varchar"},
                      {"name": "aws_xray_trace_id", "type": "varchar"},
                      {"name": "log_message", "type": "varchar"}
                    ]
                  }
                - DatabaseName: !Ref GlueDatabase
                  TableName: !Ref GlueTable

  LambdaSafeStorageLoggerView:
    Type: AWS::Glue::Table
    DependsOn: GlueTable
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref GlueDatabase
      TableInput:
        Name: lambda_safestorage_logger_view
        TableType: VIRTUAL_VIEW
        Parameters:
          presto_view: 'true'
          comment: Optimized view for pn-safestorage-logger Lambda logs
        StorageDescriptor:
          Columns:
            - Name: year
              Type: string
            - Name: month
              Type: string
            - Name: day
              Type: string
            - Name: hour
              Type: string
            - Name: messageType
              Type: string
            - Name: owner
              Type: string
            - Name: logGroup
              Type: string
            - Name: logStream
              Type: string
            - Name: subscriptionFilters
              Type: array<string>
            - Name: event_id
              Type: string
            - Name: event_timestamp
              Type: string
            - Name: message_text
              Type: string
            - Name: message_id
              Type: string
            - Name: sqs_event_source
              Type: string
            - Name: sqs_event_source_arn
              Type: string
            - Name: sqs_region
              Type: string
            - Name: s3_event_version
              Type: string
            - Name: s3_event_source
              Type: string
            - Name: s3_event_time
              Type: string
            - Name: s3_event_name
              Type: string
            - Name: s3_user_identity
              Type: string
            - Name: s3_source_ip
              Type: string
            - Name: s3_bucket_name
              Type: string
            - Name: s3_object_key
              Type: string
            - Name: s3_object_size
              Type: bigint
            - Name: s3_object_etag
              Type: string
            - Name: s3_object_version_id
              Type: string
        ViewOriginalText: !Sub
          - '/* Presto View: ${View} */'
          - View: !Base64
              Fn::Sub:
                - |
                  {
                    "originalSql": "SELECT year, month, day, hour, messagetype AS messageType, owner, loggroup AS logGroup, logstream AS logStream, subscriptionfilters AS subscriptionFilters, e.id AS event_id, from_unixtime(e.timestamp / 1000) AS event_timestamp, IF(position('{' IN e.message) > 0, substr(e.message, 1, position('{' IN e.message) - 1), e.message) AS message_text, json_extract_scalar(TRY(json_parse(IF(position('{' IN e.message) > 0, substr(e.message, position('{' IN e.message)), NULL))), '$.Records[0].messageId') AS message_id, json_extract_scalar(TRY(json_parse(IF(position('{' IN e.message) > 0, substr(e.message, position('{' IN e.message)), NULL))), '$.Records[0].eventSource') AS sqs_event_source, json_extract_scalar(TRY(json_parse(IF(position('{' IN e.message) > 0, substr(e.message, position('{' IN e.message)), NULL))), '$.Records[0].eventSourceARN') AS sqs_event_source_arn, json_extract_scalar(TRY(json_parse(IF(position('{' IN e.message) > 0, substr(e.message, position('{' IN e.message)), NULL))), '$.Records[0].awsRegion') AS sqs_region, json_extract_scalar(TRY(json_parse(json_extract_scalar(TRY(json_parse(IF(position('{' IN e.message) > 0, substr(e.message, position('{' IN e.message)), NULL))), '$.Records[0].body'))), '$.Records[0].eventVersion') AS s3_event_version, json_extract_scalar(TRY(json_parse(json_extract_scalar(TRY(json_parse(IF(position('{' IN e.message) > 0, substr(e.message, position('{' IN e.message)), NULL))), '$.Records[0].body'))), '$.Records[0].eventSource') AS s3_event_source, TRY(cast(json_extract_scalar(TRY(json_parse(json_extract_scalar(TRY(json_parse(IF(position('{' IN e.message) > 0, substr(e.message, position('{' IN e.message)), NULL))), '$.Records[0].body'))), '$.Records[0].eventTime') AS timestamp)) AS s3_event_time, json_extract_scalar(TRY(json_parse(json_extract_scalar(TRY(json_parse(IF(position('{' IN e.message) > 0, substr(e.message, position('{' IN e.message)), NULL))), '$.Records[0].body'))), '$.Records[0].eventName') AS s3_event_name, json_extract_scalar(TRY(json_parse(json_extract_scalar(TRY(json_parse(IF(position('{' IN e.message) > 0, substr(e.message, position('{' IN e.message)), NULL))), '$.Records[0].body'))), '$.Records[0].userIdentity.principalId') AS s3_user_identity, json_extract_scalar(TRY(json_parse(json_extract_scalar(TRY(json_parse(IF(position('{' IN e.message) > 0, substr(e.message, position('{' IN e.message)), NULL))), '$.Records[0].body'))), '$.Records[0].requestParameters.sourceIPAddress') AS s3_source_ip, json_extract_scalar(TRY(json_parse(json_extract_scalar(TRY(json_parse(IF(position('{' IN e.message) > 0, substr(e.message, position('{' IN e.message)), NULL))), '$.Records[0].body'))), '$.Records[0].s3.bucket.name') AS s3_bucket_name, json_extract_scalar(TRY(json_parse(json_extract_scalar(TRY(json_parse(IF(position('{' IN e.message) > 0, substr(e.message, position('{' IN e.message)), NULL))), '$.Records[0].body'))), '$.Records[0].s3.object.key') AS s3_object_key, TRY(cast(json_extract_scalar(TRY(json_parse(json_extract_scalar(TRY(json_parse(IF(position('{' IN e.message) > 0, substr(e.message, position('{' IN e.message)), NULL))), '$.Records[0].body'))), '$.Records[0].s3.object.size') AS bigint)) AS s3_object_size, json_extract_scalar(TRY(json_parse(json_extract_scalar(TRY(json_parse(IF(position('{' IN e.message) > 0, substr(e.message, position('{' IN e.message)), NULL))), '$.Records[0].body'))), '$.Records[0].s3.object.eTag') AS s3_object_etag, json_extract_scalar(TRY(json_parse(json_extract_scalar(TRY(json_parse(IF(position('{' IN e.message) > 0, substr(e.message, position('{' IN e.message)), NULL))), '$.Records[0].body'))), '$.Records[0].s3.object.versionId') AS s3_object_version_id FROM ${DatabaseName}.${TableName} CROSS JOIN UNNEST(logevents) AS t(e)",
                    "catalog": "awsdatacatalog",
                    "schema": "${DatabaseName}",
                    "columns": [
                      {"name": "year", "type": "varchar"},
                      {"name": "month", "type": "varchar"},
                      {"name": "day", "type": "varchar"},
                      {"name": "hour", "type": "varchar"},
                      {"name": "messageType", "type": "varchar"},
                      {"name": "owner", "type": "varchar"},
                      {"name": "logGroup", "type": "varchar"},
                      {"name": "logStream", "type": "varchar"},
                      {"name": "subscriptionFilters", "type": "array(varchar)"},
                      {"name": "event_id", "type": "varchar"},
                      {"name": "event_timestamp", "type": "timestamp"},
                      {"name": "message_text", "type": "varchar"},
                      {"name": "message_id", "type": "varchar"},
                      {"name": "sqs_event_source", "type": "varchar"},
                      {"name": "sqs_event_source_arn", "type": "varchar"},
                      {"name": "sqs_region", "type": "varchar"},
                      {"name": "s3_event_version", "type": "varchar"},
                      {"name": "s3_event_source", "type": "varchar"},
                      {"name": "s3_event_time", "type": "timestamp"},
                      {"name": "s3_event_name", "type": "varchar"},
                      {"name": "s3_user_identity", "type": "varchar"},
                      {"name": "s3_source_ip", "type": "varchar"},
                      {"name": "s3_bucket_name", "type": "varchar"},
                      {"name": "s3_object_key", "type": "varchar"},
                      {"name": "s3_object_size", "type": "bigint"},
                      {"name": "s3_object_etag", "type": "varchar"},
                      {"name": "s3_object_version_id", "type": "varchar"}
                    ]
                  }
                - DatabaseName: !Ref GlueDatabase
                  TableName: !Ref GlueTable

  GlueCrawlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetBucketLocation
                  - s3:ListBucket
                  - s3:GetObject
                Resource:
                  - !Sub arn:aws:s3:::${LogsBucketName}
                  - !Sub arn:aws:s3:::${LogsBucketName}/*
        - PolicyName: S3EncryptionAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetEncryptionConfiguration
                Resource:
                  - !Sub arn:aws:s3:::${LogsBucketName}
        - PolicyName: KMSEncryptionAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                Resource:
                  - !Ref LogsBucketKmsKeyArn

  GlueCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: LogAnalyticsCrawler
      Role: !GetAtt GlueCrawlerRole.Arn
      DatabaseName: !Ref GlueDatabase
      Targets:
        CatalogTargets:
          - DatabaseName: !Ref GlueDatabase
            Tables:
              - !Ref GlueTable
      SchemaChangePolicy:
        UpdateBehavior: LOG
        DeleteBehavior: LOG
      Configuration: |
        {
          "Version": 1.0,
          "CrawlerOutput": {
            "Partitions": {
              "AddOrUpdateBehavior": "InheritFromTable"
            }
          }
        }
      TablePrefix: ''
      Schedule: !If
        - IsGlueCrawlerScheduled
        - ScheduleExpression: !Ref GlueCrawlerSchedule
        - !Ref AWS::NoValue

  AthenaWorkGroup:
    Type: AWS::Athena::WorkGroup
    Properties:
      Name: LogAnalyticsWorkGroup
      Description: WorkGroup for Log analytics queries
      State: ENABLED
      WorkGroupConfiguration:
        ResultConfiguration:
          OutputLocation: !Sub s3://${AthenaResultsBucket}/
  
  AthenaResultsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub '${ProjectName}-log-analytics-athena-results-${AWS::Region}-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  AthenaResultsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AthenaResultsBucket  
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: athena.amazonaws.com
            Action:
              - s3:PutObject
              - s3:GetObject
            Resource:
              - !Sub "arn:aws:s3:::${AthenaResultsBucket}/*"
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
          - Effect: Allow
            Principal:
              Service: athena.amazonaws.com
            Action: 
              - s3:ListBucket
            Resource:
              - !Sub "arn:aws:s3:::${AthenaResultsBucket}"
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
