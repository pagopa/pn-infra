AWSTemplateFormatVersion: '2010-09-09'
Description: API gateway Piattaforma Notifiche with ApiKey Authorizer for direct API calls.

Parameters:
  EnvName:
    Type: String
    Description: Nome dell'ambiente destinazione
  EnvNumber:
    Type: String
    Description: Second byte from the left for VPC CIDR
  APIDomain:
    Description: "Domain for API"
    Type: String
  WebDomain:
    Description: "Domain for webapp"
    Type: String
  APICertificateArn:
    Description: "ACM API Certificate ARN"
    Type: String
  WebCertificateArn:
    Description: "ACM Web Certificate ARN"
    Type: String
  HostedZoneId:
    Description: "Hosted Zone Id in which you want to add record"
    Type: String

Resources:
  #############################################################################
  ###                         PROXY TO DELIVERY API                         ###
  #############################################################################
  ApiGwRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${EnvName}-public-api'
      Description: Api Gataway for direct API call with Api Key
      FailOnWarnings: true
      BinaryMediaTypes:
        - 'image~1png'
        - 'image~1jpeg'
        - 'application~1pdf'
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiGWAPICustomDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref APIDomain
      RegionalCertificateArn: !Ref APICertificateArn
      EndpointConfiguration:
        Types:
          - REGIONAL
      SecurityPolicy: TLS_1_2
  Route53RecordSetGroup:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref APIDomain
      Type: A
      HostedZoneId: !Ref HostedZoneId
      AliasTarget:
        DNSName: !GetAtt ApiGWAPICustomDomain.RegionalDomainName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt ApiGWAPICustomDomain.RegionalHostedZoneId

  ApiGwRestApiDeliveryRes:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGwRestApi
      ParentId: !GetAtt ApiGwRestApi.RootResourceId
      PathPart: delivery
  ApiGwRestApiDeliveryResV3:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGwRestApi
      ParentId: !Ref ApiGwRestApiDeliveryRes
      PathPart: v3
  ApiGwRestApiDeliveryResV3ApiDocs:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGwRestApi
      ParentId: !Ref ApiGwRestApiDeliveryResV3
      PathPart: api-docs
  ApiGwRestApiDeliveryRes2:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGwRestApi
      ParentId: !Ref ApiGwRestApiDeliveryRes
      PathPart: '{proxy+}'
  ApiGwRestApiDeliveryAnyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: proxy to delivery
      RestApiId: !Ref ApiGwRestApi
      ResourceId: !Ref ApiGwRestApiDeliveryRes2
      HttpMethod: ANY
      ApiKeyRequired: true
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref ApikeyAuthorizer
      RequestParameters:
        method.request.path.proxy: true
        method.request.header.X-PagoPA-PN-PA: false
        method.request.header.X-PagoPA-User-Id: false
        method.request.header.X-PagoPA-User-Secret: false
        method.request.querystring.recipientId: false
        method.request.querystring.senderId: false
        method.request.querystring.startDate: false
        method.request.querystring.endDate: false
        method.request.querystring.status: false
        method.request.querystring.subjectRegExp: false
        method.request.querystring.token: false
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Content-Type: false
            method.response.header.Content-Disposition: false
        - StatusCode: 307
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Content-Type: false
            method.response.header.Content-Disposition: false
            method.response.header.Location: false
        - StatusCode: 400
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Content-Type: false
            method.response.header.Content-Disposition: false
            method.response.header.Location: false
        - StatusCode: 401
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Content-Type: false
            method.response.header.Content-Disposition: false
            method.response.header.Location: false
        - StatusCode: 404
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Content-Type: false
            method.response.header.Content-Disposition: false
            method.response.header.Location: false
        - StatusCode: 500
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Content-Type: false
            method.response.header.Content-Disposition: false
            method.response.header.Location: false
      Integration:
        ConnectionType: VPC_LINK
        ConnectionId: !ImportValue
          "Fn::Sub": '${EnvName}-nlb-link-id'
        IntegrationHttpMethod: ANY
        Type: HTTP
        #Uri: !Sub 'http://${PrivateApplicationLoadBalancer.DNSName}:8080/delivery/{proxy}'
        Uri: !Join ['', ["http://", { 'Fn::ImportValue': { 'Fn::Sub':'${EnvName}-alb-domain'}}, ":8080/delivery/{proxy}"]]
        RequestParameters:
          integration.request.path.proxy: method.request.path.proxy
          integration.request.header.X-PagoPA-PN-PA: context.authorizer.pa_id
          integration.request.header.X-PagoPA-User-Id: method.request.header.X-PagoPA-User-Id
          integration.request.header.X-PagoPA-User-Secret: method.request.header.X-PagoPA-User-Secret
          integration.request.querystring.recipientId: method.request.querystring.recipientId
          integration.request.querystring.senderId: method.request.querystring.senderId
          integration.request.querystring.startDate: method.request.querystring.startDate
          integration.request.querystring.endDate: method.request.querystring.endDate
          integration.request.querystring.status: method.request.querystring.status
          integration.request.querystring.subjectRegExp: method.request.querystring.subjectRegExp
          integration.request.querystring.token: method.request.querystring.token
        PassthroughBehavior: "WHEN_NO_MATCH"
        TimeoutInMillis: 29000
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: !Join ['', ["'https://", !Ref WebDomain , "'"]]
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Content-Disposition: integration.response.header.Content-Disposition
            ResponseTemplates:
              application/json: ""
          - StatusCode: 307
            SelectionPattern: 307
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: !Join ['', ["'https://", !Ref WebDomain , "'"]]
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Content-Disposition: integration.response.header.Content-Disposition
              method.response.header.Location: integration.response.header.Location
            ResponseTemplates:
              application/json: ""
          - StatusCode: 400
            SelectionPattern: 400
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: !Join ['', ["'https://", !Ref WebDomain , "'"]]
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Content-Disposition: integration.response.header.Content-Disposition
              method.response.header.Location: integration.response.header.Location
            ResponseTemplates:
              application/json: ""
          - StatusCode: 401
            SelectionPattern: 401
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: !Join ['', ["'https://", !Ref WebDomain , "'"]]
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Content-Disposition: integration.response.header.Content-Disposition
              method.response.header.Location: integration.response.header.Location
            ResponseTemplates:
              application/json: ""
          - StatusCode: 404
            SelectionPattern: 404
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: !Join ['', ["'https://", !Ref WebDomain , "'"]]
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Content-Disposition: integration.response.header.Content-Disposition
              method.response.header.Location: integration.response.header.Location
            ResponseTemplates:
              application/json: ""
          - StatusCode: 500
            SelectionPattern: 500
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: !Join ['', ["'https://", !Ref WebDomain , "'"]]
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Content-Disposition: integration.response.header.Content-Disposition
              method.response.header.Location: integration.response.header.Location
            ResponseTemplates:
              application/json: ""
  ApiGwRestApiDeliveryCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: CORS for delivery
      RestApiId: !Ref ApiGwRestApi
      ResourceId: !Ref ApiGwRestApiDeliveryRes2
      HttpMethod: OPTIONS
      ApiKeyRequired: false
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.proxy: true
        method.request.header.X-PagoPA-PN-PA: true
        method.request.header.X-PagoPA-User-Id: true
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: Empty
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{\"statusCode\": 200}"
        PassthroughBehavior: "WHEN_NO_MATCH"
        TimeoutInMillis: 29000
        CacheNamespace: "w053mc"
        CacheKeyParameters: [ ]
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: !Join ['', ["'https://", !Ref WebDomain , "'"]]
            ResponseTemplates:
              application/json: ""
  ApiGwRestApiDeliveryApiDocsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: get documentation
      RestApiId: !Ref ApiGwRestApi
      ResourceId: !Ref ApiGwRestApiDeliveryResV3ApiDocs
      HttpMethod: GET
      ApiKeyRequired: false
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        ConnectionType: VPC_LINK
        ConnectionId: !ImportValue
          "Fn::Sub": '${EnvName}-nlb-link-id'
        IntegrationHttpMethod: GET
        Type: HTTP
        #Uri: !Sub 'http://${PrivateApplicationLoadBalancer.DNSName}:8080/delivery/{proxy}'
        Uri: !Join ['', ["http://", { 'Fn::ImportValue': { 'Fn::Sub':'${EnvName}-alb-domain'}}, ":8080/delivery/v3/api-docs"]]
        PassthroughBehavior: "WHEN_NO_MATCH"
        TimeoutInMillis: 29000
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
  ApiGwRestApiDeliveryApiDocsCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: CORS for delivery
      RestApiId: !Ref ApiGwRestApi
      ResourceId: !Ref ApiGwRestApiDeliveryResV3ApiDocs
      HttpMethod: OPTIONS
      ApiKeyRequired: false
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: Empty
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{\"statusCode\": 200}"
        PassthroughBehavior: "WHEN_NO_MATCH"
        TimeoutInMillis: 29000
        CacheNamespace: "w053mc"
        CacheKeyParameters: [ ]
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
  ApiGwRestApiBetaDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGwRestApiDeliveryAnyMethod
      - ApiGwRestApiDeliveryCORSMethod
      - ApiGwRestApiDeliveryApiDocsGetMethod
      - ApiGwRestApiDeliveryApiDocsCORSMethod
    Properties:
      RestApiId: !Ref ApiGwRestApi
      Description: 'Beta deployment for rest api gw'
  ApiGwRestApiBetaStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref ApiGwRestApi
      StageName: beta
      TracingEnabled: true
      DeploymentId: !Ref ApiGwRestApiBetaDeployment
      Description: 'Beta stage for rest api gw'
      AccessLogSetting:
        DestinationArn: !GetAtt "PublicApiLogGroup.Arn"
        Format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","routeKey":"$context.routeKey","status":$context.status,"responseLatency":$context.responseLatency}'
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          MetricsEnabled: 'true'
          DataTraceEnabled: 'false'

  APIMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn: Route53RecordSetGroup
    Properties:
      #BasePath: product
      DomainName: !Ref APIDomain
      RestApiId: !Ref ApiGwRestApi
      Stage: !Ref ApiGwRestApiBetaStage

  PublicApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1


  ApiKeyLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: ApikeyAuthorizer
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebapiGwRestApi}/authorizers/${ApikeyAuthorizer}"

  ApikeyAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: pn-auth-fleet_apikeyAuthorizer
      Type: REQUEST
      AuthorizerResultTtlInSeconds: '300'
      AuthorizerUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:558518206506:function:apikeyAuthorizer/invocations'
      IdentitySource: method.request.header.x-api-key
      RestApiId: !Ref ApiGwRestApi


  #############################################################################
  ###                     PROXY TO EXTERNAL CHANNEL API                     ###
  #############################################################################
  ExtChaApiGwRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${EnvName}-extcha-public-api'
      Description: Api che effettuano proxy ai microservizi di back-end
      FailOnWarnings: true
      BinaryMediaTypes:
        - 'image~1png'
        - 'image~1jpeg'
        - 'application~1pdf'
      EndpointConfiguration:
        Types:
          - REGIONAL
  ExtChaApiGwRestApiRes:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExtChaApiGwRestApi
      ParentId: !GetAtt ExtChaApiGwRestApi.RootResourceId
      PathPart: external-channel
  ExtChaApiGwRestApiRes2:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExtChaApiGwRestApi
      ParentId: !Ref ExtChaApiGwRestApiRes
      PathPart: '{proxy+}'
  ExtChaApiGwRestApiAnyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: proxy to external channel
      RestApiId: !Ref ExtChaApiGwRestApi
      ResourceId: !Ref ExtChaApiGwRestApiRes2
      HttpMethod: ANY
      ApiKeyRequired: true
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.proxy: true
        method.request.querystring.eventId: false
        method.request.querystring.attachmentKey: false
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Content-Type: false
            method.response.header.Content-Disposition: false
        - StatusCode: 307
          ResponseParameters:
            method.response.header.Content-Type: false
            method.response.header.Content-Disposition: false
            method.response.header.Location: false
        - StatusCode: 401
          ResponseParameters:
            method.response.header.Content-Type: false
            method.response.header.Content-Disposition: false
      Integration:
        ConnectionType: VPC_LINK
        ConnectionId: !ImportValue
          "Fn::Sub": '${EnvName}-extcha-nlb-link-id'
        IntegrationHttpMethod: ANY
        Type: HTTP
        Uri: !Join [ '', [ "http://", { 'Fn::ImportValue': { 'Fn::Sub': '${EnvName}-extcha-alb-domain' } }, ":8080/external-channel/{proxy}" ] ]
        RequestParameters:
          integration.request.path.proxy: method.request.path.proxy
          integration.request.querystring.eventId: method.request.querystring.eventId
          integration.request.querystring.attachmentKey: method.request.querystring.attachmentKey
        PassthroughBehavior: "WHEN_NO_MATCH"
        TimeoutInMillis: 29000
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: ""
            ResponseParameters:
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Content-Disposition: integration.response.header.Content-Disposition
            ResponseTemplates:
              application/json: ""
          - StatusCode: 307
            SelectionPattern: 307
            ResponseParameters:
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Content-Disposition: integration.response.header.Content-Disposition
              method.response.header.Location: integration.response.header.Location
            ResponseTemplates:
              application/json: ""
          - StatusCode: 401
            SelectionPattern: 401
            ResponseParameters:
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Content-Disposition: integration.response.header.Content-Disposition
            ResponseTemplates:
              application/json: ""
  ExtChaApiGwRestApiBetaDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ExtChaApiGwRestApiAnyMethod
    Properties:
      RestApiId: !Ref ExtChaApiGwRestApi
      Description: 'Beta deployment for rest api gw'
  ExtChaApiGwRestApiBetaStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref ExtChaApiGwRestApi
      StageName: beta
      TracingEnabled: true
      DeploymentId: !Ref ExtChaApiGwRestApiBetaDeployment
      Description: 'Beta stage for rest api gw'
      AccessLogSetting:
        DestinationArn: !GetAtt "PublicApiLogGroup.Arn"
        Format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","routeKey":"$context.routeKey","status":$context.status,"responseLatency":$context.responseLatency}'
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          MetricsEnabled: 'true'
          DataTraceEnabled: 'false'

  #############################################################################
  ###                        API KEYS AND USAGE PLANS                       ###
  #############################################################################
  ApiKeyPaPoC:
    Type: AWS::ApiGateway::ApiKey
    Properties: 
      Name: !Sub '${EnvName}-PocPaApiKey'
      Description: PoC API-Key used by PA 
      Enabled: true
  
  BetaUsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    Properties:
      ApiStages:
        - ApiId: !Ref ApiGwRestApi
          Stage: !Ref ApiGwRestApiBetaStage
        - ApiId: !Ref ExtChaApiGwRestApi
          Stage: !Ref ExtChaApiGwRestApiBetaStage
      Description: Beta Plan
      Throttle:
        BurstLimit: 2000
        RateLimit: 1000
  ApiKeyPaPoCBeta:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties: 
      KeyType: API_KEY
      KeyId: !Ref ApiKeyPaPoC
      UsagePlanId: !Ref BetaUsagePlan

  
Outputs:
  # - API Gateway access informations
  ApiGatewayUrlBeta:
    Value: !Sub 'https://${APIDomain}'
    Description: Base URL for API Requests
    Export:
      Name: !Sub '${EnvName}-api-gw-url'
  ExtChaApiGatewayUrlBeta:
    Value: !Sub 'https://${ExtChaApiGwRestApi}.execute-api.${AWS::Region}.amazonaws.com/beta/'
    Description: Base URL for API Requests
    Export:
      Name: !Sub '${EnvName}-extcha-api-gw-url'
  ApiKeyId:
    Value: !Sub '${ApiKeyPaPoC.APIKeyId}'
    Description: API Key ID. Use it to look for secret token to memorize in your browser
    Export:
      Name: !Sub '${EnvName}-api-key-id'

