AWSTemplateFormatVersion: '2010-09-09'
Description: Hello World served from API gateway

Parameters:
  EnvName:
    Type: String
    Description: Nome dell'ambiente destinazione
  EnvNumber:
    Type: String
    Description: Second byte from the left for VPC CIDR

Resources:
  #############################################################################
  ###                            HELLO WORLD API                            ###
  #############################################################################
  HelloWorldApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${EnvName}-helloworld-api'
      Description: API pubbliche hello world
      FailOnWarnings: true
      EndpointConfiguration:
        Types: 
          - REGIONAL
      Body:
        swagger: "2.0"
        info:
          title: 'Hello world API'
          version: '0.0.1'
        basePath: "/hello"
        schemes:
          - "https"
        securityDefinitions:
          api_key:
            type: apiKey
            name: x-api-key
            in: header
        paths:
          /v1/:
            get:
              summary: "Greet"
              description: ""
              operationId: "greet"
              produces:
                - "application/json"
              responses:
                "200":
                  description: "Ok"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              security:
                - api_key: []
              x-amazon-apigateway-integration:
                type: mock
                httpMethod: GET
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    statusCode: 200
                    responseTemplates:
                      application/json: '{ "message":"Hello World!! By API-GW, updated", "usedApiKeyId": "$context.identity.apiKeyId" }'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: !Join ['', ["'", { 'Fn::ImportValue': { 'Fn::Sub':'${EnvName}-cdn-url'}}, "'"]]
            options:
              summary: "Greet"
              description: ""
              operationId: "greetOpt"
              produces:
                - "application/json"
              responses:
                "200":
                  description: "Ok"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                type: mock
                httpMethod: OPTIONS
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    statusCode: 200
                    responseTemplates:
                      application/json: ''
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: !Join ['', ["'", { 'Fn::ImportValue': { 'Fn::Sub':'${EnvName}-cdn-url'}}, "'"]]
  HelloWorldApiDeploymentBeta:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref HelloWorldApi
  HelloWorldApiStageBeta:
    Type: AWS::ApiGateway::Stage
    Properties:
      Description: Beta stage of helloworld api
      RestApiId: !Ref HelloWorldApi
      DeploymentId: !Ref HelloWorldApiDeploymentBeta
      StageName: beta


  #############################################################################
  ###                         PROXY TO DELIVERY API                         ###
  #############################################################################
  ApiGwRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${EnvName}-public-api'
      Description: Api che effettuano proxy ai microservizi di back-end
      FailOnWarnings: true
      EndpointConfiguration:
        Types:
          - REGIONAL
  ApiGwRestApiDeliveryRes:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGwRestApi
      ParentId: !GetAtt ApiGwRestApi.RootResourceId
      PathPart: delivery
  ApiGwRestApiDeliveryRes2:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGwRestApi
      ParentId: !Ref ApiGwRestApiDeliveryRes
      PathPart: '{proxy+}'
  ApiGwRestApiDeliveryAnyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: proxy to delivery
      RestApiId: !Ref ApiGwRestApi
      ResourceId: !Ref ApiGwRestApiDeliveryRes2
      HttpMethod: ANY
      ApiKeyRequired: true
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.proxy: true
        method.request.header.X-PagoPA-PN-PA: true
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.X-Prova: false
      Integration:
        ConnectionType: VPC_LINK
        ConnectionId: !ImportValue
          "Fn::Sub": '${EnvName}-nlb-link-id'
        IntegrationHttpMethod: ANY
        Type: HTTP
        #Uri: !Sub 'http://${PrivateApplicationLoadBalancer.DNSName}:8080/delivery/{proxy}'
        Uri: !Join ['', ["http://", { 'Fn::ImportValue': { 'Fn::Sub':'${EnvName}-alb-domain'}}, ":8080/delivery/{proxy}"]]
        RequestParameters:
          integration.request.path.proxy: method.request.path.proxy
          integration.request.header.X-PagoPA-PN-PA: method.request.header.X-PagoPA-PN-PA
        PassthroughBehavior: "WHEN_NO_MATCH"
        TimeoutInMillis: 29000
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: !Join ['', ["'", { 'Fn::ImportValue': { 'Fn::Sub':'${EnvName}-cdn-url'}}, "'"]]
              method.response.header.X-Prova: "'*'"
            ResponseTemplates:
              application/json: ""
  ApiGwRestApiDeliveryCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: CORS for delivery
      RestApiId: !Ref ApiGwRestApi
      ResourceId: !Ref ApiGwRestApiDeliveryRes2
      HttpMethod: OPTIONS
      ApiKeyRequired: true
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.proxy: true
        method.request.header.X-PagoPA-PN-PA: true
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: Empty
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{\"statusCode\": 200}"
        PassthroughBehavior: "WHEN_NO_MATCH"
        TimeoutInMillis: 29000
        CacheNamespace: "w053mc"
        CacheKeyParameters: [ ]
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: '*'
              method.response.header.Access-Control-Allow-Methods: '*'
              method.response.header.Access-Control-Allow-Origin: !Join ['', ["'", { 'Fn::ImportValue': { 'Fn::Sub':'${EnvName}-cdn-url'}}, "'"]]
            ResponseTemplates:
              application/json: ""
  ApiGwRestApiBetaDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGwRestApiDeliveryAnyMethod
    Properties:
      RestApiId: !Ref ApiGwRestApi
      Description: 'Beta deployment for rest api gw'
  ApiGwRestApiBetaStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref ApiGwRestApi
      StageName: beta
      DeploymentId: !Ref ApiGwRestApiBetaDeployment
      Description: 'Beta stage for rest api gw'


  #############################################################################
  ###                        API KEYS AND USAGE PLANS                       ###
  #############################################################################
  ApiKeyPaPoC:
    Type: AWS::ApiGateway::ApiKey
    Properties: 
      Name: PocPaApiKey
      Description: PoC API-Key used by PA 
      Enabled: true
  
  BetaUsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    Properties:
      ApiStages:
        - ApiId: !Ref HelloWorldApi
          Stage: !Ref HelloWorldApiStageBeta
        - ApiId: !Ref ApiGwRestApi
          Stage: !Ref ApiGwRestApiBetaStage
      Description: Beta Plan
      Throttle:
        BurstLimit: 20
        RateLimit: 10
  ApiKeyPaPoCBeta:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties: 
      KeyType: API_KEY
      KeyId: !Ref ApiKeyPaPoC
      UsagePlanId: !Ref BetaUsagePlan

  
Outputs:
  # - API Gateway access informations
  HelloApiGatewayUrlBeta:
    Value: !Sub 'https://${HelloWorldApi}.execute-api.${AWS::Region}.amazonaws.com/beta/'
    Description: Base URL for API Requests
    Export:
      Name: !Sub '${EnvName}-hello-api-gw-url'
  ApiGatewayUrlBeta:
    Value: !Sub 'https://${ApiGwRestApi}.execute-api.${AWS::Region}.amazonaws.com/beta/'
    Description: Base URL for API Requests
    Export:
      Name: !Sub '${EnvName}-api-gw-url'
  ApiKeyId:
    Value: !Sub '${ApiKeyPaPoC.APIKeyId}'
    Description: API Key ID. Use it to look for secret token to memorize in your browser
    Export:
      Name: !Sub '${EnvName}-api-key-id'

