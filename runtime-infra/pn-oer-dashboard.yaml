AWSTemplateFormatVersion: 2010-09-09
Description: 'This template deploys the OER dashboard'

Parameters:
  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'

  Version:
    Type: String
    Description: 'keep track of used projects commitIds'

  ConfidentialInfoAccountId:
    Type: String
    Default: ''
    Description: 'Confidential Info AWS Account ID'

  Alb:
    Type: String
    Default: ''
    Description: 'ALB'

  RaddTargetGroup:
    Type: String
    Default: ''
    Description: 'RADD Target Group'

  OpenSearchArn:
    Type: String
    Default: ''
    Description: 'OpenSearch ARN'

  LogsBucketName:
    Type: String
    Default: ''
    Description: 'Logs Bucket Name'

Resources:

  StorageFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          'use strict';
          const AWS = require('aws-sdk');
          const cloudwatch = new AWS.CloudWatch({apiVersion: '2010-08-01'});
          const dynamoDB = new AWS.DynamoDB();

          const sts = new AWS.STS({apiVersion: '2011-06-15'});

          const DOCS = `PN Storage Widget`

          var helpdeskCloudwatch = null;

          function assumeRole(role){
            var roleToAssume = {
              RoleArn: role,
              RoleSessionName: 'session1',
              DurationSeconds: 900
            };
            //Assume Role
            const data = sts.assumeRole(roleToAssume).promise(); 
            
            return data;  
          }

          function getBucketSize(bucketName, startTime, endTime) {
              var params = {
                StartTime: startTime.toISOString(),
                EndTime: endTime.toISOString(),
                Dimensions: [
                  {
                    Name: 'BucketName',
                    Value: bucketName
                  },
                  {
                    Name: 'StorageType',
                    Value: 'StandardStorage'
                  },
                ],
                Period: 86400,
                Statistics: ['Average'],
                MetricName: 'BucketSizeBytes',
                Namespace: 'AWS/S3'
              };
              
              console.log('params', params);
              return cloudwatch.getMetricStatistics(params).promise();
          }

          function getOpenSearchSpace(clientId, domainName, startTime, endTime, metricName){
            var params = {
                StartTime: startTime.toISOString(),
                EndTime: endTime.toISOString(),
                Dimensions: [
                  {
                    Name: 'ClientId',
                    Value: clientId
                  },
                  {
                    Name: 'DomainName',
                    Value: domainName
                  },
                ],
                Period: 60,
                Statistics: ['Maximum'],
                MetricName: metricName,
                Namespace: 'AWS/ES'
              };
              
              return helpdeskCloudwatch.getMetricStatistics(params).promise();
          }

          async function getOpenSearchSize(openSearchArn, startTime, endTime){
            const roleArn = 'arn:aws:iam::558518206506:role/aws-service-role/cloudwatch-crossaccount.amazonaws.com/AWSServiceRoleForCloudWatchCrossAccount';
            const assumeRoleCredentials = await assumeRole(roleArn);
            helpdeskCloudwatch = new AWS.CloudWatch({
              apiVersion: '2011-06-15',
              accessKeyId: assumeRoleCredentials.Credentials.AccessKeyId,
              secretAccessKey: assumeRoleCredentials.Credentials.SecretAccessKey,
              sessionToken: assumeRoleCredentials.Credentials.SessionToken
            })
            
            return assumeRoleCredentials;
          }


          function listDynamoTables() {
              var params = {
                
              };
              return dynamoDB.listTables(params).promise();
          }

          function getDynamoTableSize(tableName){
            var params = {
              TableName: tableName
            }
            
            return dynamoDB.describeTable(params).promise();
          }

          async function getDynamoTablesSize(){
            const listTablesResult = await listDynamoTables()
            const ret = []
            for(let i=0; i<listTablesResult.TableNames.length; i++){
              const tableName = listTablesResult.TableNames[i]
              const describeTableResult = await getDynamoTableSize(tableName)
              const tableSize = describeTableResult.Table.TableSizeBytes
              ret.push({
                type: 'DynamoDB',
                name: tableName,
                size: tableSize
              })
            }
            
            return ret;
          }

          const CSS = ``

          exports.handler = async (event) => {
            
            if (event.describe) {
              return DOCS;   
            }
            const widgetContext = event.widgetContext;
            const timeRange = widgetContext.timeRange.zoom || widgetContext.timeRange;
            const startTime = new Date(timeRange.start);
            const endTime = new Date(timeRange.end);
            const region = event.region;
              
            const tables = []

            const bucketName = process.env.LOGS_BUCKET_NAME
            if(bucketName){
              const res = await getBucketSize(bucketName, startTime, endTime);
              tables.push({
                type: 'S3',
                name: bucketName,
                size: res.Datapoints.length>0?res.Datapoints[0].Average:'n/a'
              })
            }

            const openSearchArn = process.env.OPENSEARCH_ARN
            if(openSearchArn){
              const { domainName, size } = await getOpenSearchSize(openSearchArn, startTime, endTime);
              tables.push({
                type: 'OpenSearch',
                name: domainName,
                size: size
              })
            }

            const dynamoTables = await getDynamoTablesSize()
            for(let i=0; i<dynamoTables.length; i++){
              tables.push(dynamoTables[i]);
            }
            
            const initialValue = 0;
            const totalDynamoSize = tables.reduce(
              (accumulator, currentValue) => accumulator + currentValue.size,
              initialValue
            );
            
            tables.push({
              type: 'DynamoDB',
              name: 'Total DynamoDB Size',
              size: totalDynamoSize
            })

            const metricRows = tables.map((resource, i) => {
              let html = `<tr><td>${resource.type}</td><td><b>${resource.name}</b></td>`;
              html += `<td>${resource.size}</td></tr>`;
              return html;
            });
              
            const tableStart = `<h3>Storage widget</h3><table class="cwdb-no-default-styles"><thead><tr><th>Resource Type</th><th>Resource Name</th><th>Size (in bytes)</th></tr></thead>`
            return CSS + tableStart + `<tbody>${metricRows.join('')}</tbody></table>`;    
          };

      Description: "Storage function custom widget"
      FunctionName: pn-storage-function
      Handler: index.handler
      Environment: 
        Variables:
          LOGS_BUCKET_NAME: !Ref LogsBucketName
          OPENSEARCH_ARN: !Ref OpenSearchArn
          ACCOUNT_ID: !Sub ${AWS::AccountId}
          REGION: !Sub ${AWS::Region}
      MemorySize: 128
      Role: !GetAtt StorageFunctionIAMRole.Arn
      Runtime: nodejs16.x
      Timeout: 60

  StorageFunctionIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/pn-storage-function:*
              - Action:
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:ListMetrics
                  - dynamodb:List*
                  - dynamodb:DescribeTable
                  - sts:AssumeRole
                Effect: Allow
                Resource: '*'
          PolicyName: pn-storage-function-policy

  StorageFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${StorageFunction}
      RetentionInDays: 14


  MicroservicesDashboard:
    Type: AWS::CloudWatch::Dashboard
    DependsOn:
      - StorageFunction
    Properties:
      DashboardName: !Sub ${ProjectName}-OER-Dashboard
      DashboardBody: 
        'Fn::Transform':
          Name: 'OerDashboardBodyTransform'
          Parameters:
            Region: !Sub ${AWS::Region}
            # Cloudformation doesn't allow to use IF conditions as Marco parameters so the optionality is managed at Lambda level
            ConfidentialInfoAccountId: !Ref ConfidentialInfoAccountId
            MicroservicesAlarmArns:
              - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:pn-external-registries-CompositeAlarm
              - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:pn-mandate-CompositeAlarm
              - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:pn-delivery-CompositeAlarm
              - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:pn-auth-fleet-v2-CompositeAlarm              
              - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:pn-downtime-logs-CompositeAlarm                            
              - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:pn-user-attributes-CompositeAlarm
              - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:pn-paper-channel-CompositeAlarm
              - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:pn-radd-fsu-CompositeAlarm
              - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:pn-infra-CompositeAlarm
              - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:pn-frontend-CompositeAlarm
              - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:pn-delivery-push-CompositeAlarm
              - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:pn-logsaver-be-CompositeAlarm
              - !Sub arn:aws:cloudwatch:${AWS::Region}:$CONFIDENTIAL_INFO_ACCOUNT_ID:alarm:pn-data-vault-CompositeAlarm
            MicroservicesDashboardLinks:
              - !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=pn-external-registries       
              - !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=pn-mandate
              - !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=pn-delivery
              - !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=pn-auth-fleet-v2            
              - !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=pn-downtime-logs                         
              - !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=pn-user-attributes
              - !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=pn-paper-channel
              - !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=pn-radd-fsu
              - !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=pn-infra
              - !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=pn-frontend
              - !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=pn-delivery-push
              - !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=pn-logsaver-be
              - !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=pn-data-vault;accountId=$CONFIDENTIAL_INFO_ACCOUNT_ID
            FunctionalAlarmsArns:
              - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:pn-CompositeAlarm-NotificationInput
              - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:pn-CompositeAlarm-NotificationOutput
              - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:pn-CompositeAlarm-NotificationProgress
            FunctionalAlarmsNames:
              - Nuove Notifiche
              - Lettura Notifiche
              - Workflow
            LoginAvailability:
              - "API:pn-token-exchange-api"
            ReadNotificationAvailability:
              - "API:pn-token-exchange-api"
              - "API:pn-delivery-progress-public-api-B2B"
              - "API:pn-delivery-public-api-B2B"
              - "API:pn-delivery-public-api-IO"
              - "API:pn-delivery-public-api-WEB"
              - "API:pn-delivery-push-public-api-B2B"
              - "API:pn-delivery-push-public-api-IO"
              - "API:pn-delivery-push-public-api-WEB"
              - !Sub "ALB:${Alb}:${RaddTargetGroup}"
            WriteNotificationAvailability:
              - "API:pn-delivery-public-api-B2B"
              - "API:pn-delivery-public-api-IO"
              - "API:pn-delivery-public-api-WEB"
              - "API:pn-delivery-public-api-WEB"
              - "API:pn-ExternalRegistry-public-api-B2B"
              - "API:pn-ExternalRegistry-public-api-WEB"
            MandateAvailability:
              - "API:pn-mandate-public-api-WEB"
              - "API:pn-token-exchange-api"
              - "API:API:pn-ExternalRegistry-public-api-WEB"
            DigitalAddressAvailability:
              - "API:pn-token-exchange-api"
              - "API:pn-UserAttributes-public-api-WEB"
              - "API:pn-ExternalRegistry-public-api-WEB"
            ApiKeyAvailability:
              - "API:pn-token-exchange-api"
              - "API:pn-ApikeyManager-public-api-WEB"
              - "API:pn-ApikeyManager-bo-public-api-WEB"
            StorageWidgetFunction: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:pn-storage-function
Outputs:
  Version:
    Value: !Ref Version
