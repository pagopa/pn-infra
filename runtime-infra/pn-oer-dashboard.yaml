AWSTemplateFormatVersion: 2010-09-09
Description: 'This template deploys the OER dashboard'

Parameters:
  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'

  Version:
    Type: String
    Description: 'keep track of used projects commitIds'

  ConfidentialInfoAccountId:
    Type: String
    Default: ''
    Description: 'Confidential Info AWS Account ID'

  Alb:
    Type: String
    Default: ''
    Description: 'ALB'

  RaddTargetGroup:
    Type: String
    Default: ''
    Description: 'RADD Target Group'

  OpenSearchArn:
    Type: String
    Default: ''
    Description: 'OpenSearch ARN'

  LogsBucketName:
    Type: String
    Default: ''
    Description: 'Logs Bucket Name'

Resources:

  StorageFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          'use strict';
          const AWS = require('aws-sdk');
          const cloudwatch = new AWS.CloudWatch({apiVersion: '2010-08-01'});
          const dynamoDB = new AWS.DynamoDB();

          const DOCS = `PN Storage Widget`

          function listDynamoTables() {
              var params = {
                
              };
              return dynamoDB.listTables(params).promise();
          }

          function getDynamoTableSize(tableName){
            var params = {
              TableName: tableName
            }
            
            return dynamoDB.describeTable(params).promise();
          }

          async function getDynamoTablesSize(){
            const listTablesResult = await listDynamoTables()
            const ret = []
            for(let i=0; i<listTablesResult.TableNames.length; i++){
              const tableName = listTablesResult.TableNames[i]
              const describeTableResult = await getDynamoTableSize(tableName)
              const tableSize = describeTableResult.Table.TableSizeBytes
              ret.push({
                name: tableName,
                size: tableSize
              })
            }
            
            return ret;
          }

          const CSS = `<style>td,th{font-family:Arial,sans-serif;font-size:14px;white-space:nowrap;text-align:left;padding:3px;border-bottom:1px solid #f2f2f2}td:first-child{text-align:left}tr:hover{background:#fbf8e9!important;transition:all .1s ease-in-out}tbody tr:nth-child(even){background:#f5f5f5;box-shadow:0 1px 0 rgba(255,255,255,.8) inset}th{text-align:left;text-shadow:0 1px 0 rgba(255,255,255,.5);border-bottom:1px solid #ccc;background-color:#dce9f9;background-image:linear-gradient(top,#ebf3fc,#dce9f9)}th:first-child{border-radius:6px 0 0 0}th:last-child{border-radius:0 6px 0 0}th:only-child{border-radius:6px 6px 0 0}</style>`

          exports.handler = async (event) => {
            
            if (event.describe) {
              return DOCS;   
            }

            const tables = []

            const dynamoTables = await getDynamoTablesSize()
            for(let i=0; i<dynamoTables.length; i++){
              tables.push(dynamoTables[i]);
            }
            
            const initialValue = 0;
            const totalDynamoSize = tables.reduce(
              (accumulator, currentValue) => accumulator + currentValue.size,
              initialValue
            );
            
            tables.push({
              name: 'Total DynamoDB Size',
              size: totalDynamoSize
            })

            const metricRows = tables.map((resource, i) => {
              let html = `<tr><td><b>${resource.name}</b></td>`;
              html += `<td>${Number(resource.size/(1024*1024*1024)).toFixed(6)} GB</td></tr>`;
              return html;
            });
              
            const tableStart = `<table class="cwdb-no-default-styles"><thead><tr><th>Table Name</th><th>Used Storage</th></tr></thead>`
            return CSS + tableStart + `<tbody>${metricRows.join('')}</tbody></table>`;    
          };
      Description: "Storage function custom widget"
      FunctionName: pn-storage-function
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt StorageFunctionIAMRole.Arn
      Runtime: nodejs16.x
      Timeout: 60

  StorageFunctionIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/pn-storage-function:*
              - Action:
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:ListMetrics
                  - dynamodb:List*
                  - dynamodb:DescribeTable
                Effect: Allow
                Resource: '*'
          PolicyName: pn-storage-function-policy

  StorageFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${StorageFunction}
      RetentionInDays: 14

  SLAViolationHistoryFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          'use strict';
          const { LambdaClient, InvokeCommand } = require("@aws-sdk/client-lambda");
          const { Buffer } = require('node:buffer')

          const DOCS = `PM SLA Violation History` 
          const CSS = `<style>td,th{font-family:Arial,sans-serif;font-size:14px;white-space:nowrap;text-align:left;padding:3px;border-bottom:1px solid #f2f2f2}td:first-child{text-align:left}tr:hover{background:#fbf8e9!important;transition:all .1s ease-in-out}tbody tr:nth-child(even){background:#f5f5f5;box-shadow:0 1px 0 rgba(255,255,255,.8) inset}th{text-align:left;text-shadow:0 1px 0 rgba(255,255,255,.5);border-bottom:1px solid #ccc;background-color:#dce9f9;background-image:linear-gradient(top,#ebf3fc,#dce9f9)}th:first-child{border-radius:6px 0 0 0}th:last-child{border-radius:0 6px 0 0}th:only-child{border-radius:6px 6px 0 0}</style>`
          const ExtCSS = `<style>table{ width: 100%; } td { padding: 3px; } .search-form { margin-bottom: 10px; } select,input { padding: 5px; } .buttons { margin-top: 10px; } .btn { padding: 5px; } .btn-primary { background-color: #00a1b0; color: #FFF; } .btn-secondary { background-color: #FFF; color: #00a1b0; } </style>`

          async function searchSLAViolations(type, active = 'YES', olderThan, lastScannedKey = null){
            const client = new LambdaClient();
            
            const activeBool = active=='YES'?true:false
            
            const payload = {
              type,
              active: activeBool,
              olderThan
            }
            
            if(lastScannedKey){
              payload.lastScannedKey = lastScannedKey
            }
            
            const input = {
                FunctionName: process.env.SEARCH_SLA_LAMBDA_ARN,
                Payload: Buffer.from(JSON.stringify(payload))
            };
            const command = new InvokeCommand(input);
            try {
              const response = await client.send(command);
              return JSON.parse(Buffer.from(response.Payload))
            } catch(e){
              console.error(e)
            }
          }

          function renderTypeOptions(type){
            const types = ['VALIDATION', 'REFINEMENT', 'SEND_PEC', 'SEND_PAPER_AR_890', 'SEND_AMR']
            return types.map(t => {
              const selectedStr = t==type?'selected="selected"':''
              return `<option value="${t}" ${selectedStr}>${t}</option>`
            })
          }

          function renderActiveOptions(active){
            const types = ['YES', 'NO']
            return types.map(t => {
              const selectedStr = t==active?'selected="selected"':''
              return `<option value="${t}" ${selectedStr}>${t}</option>`
            })
          }

          function formatTimestamp(isoString){
            const date = new Date(isoString)
            return date.toLocaleString('en-US', { timeZone: 'UTC' }) + " [UTC]";
          }

          exports.handler = async (event, context) => {
            
            if (event.describe) {
              return DOCS;   
            }
            
            console.log(JSON.stringify(event.widgetContext));

            let paginationKeys = []
            
            const params = {
              olderThan: new Date().toISOString(),
              type: 'VALIDATION',
              active: 'YES',
              lastScannedKey: null
            }
            
            let olderThanStr = new Date().toISOString().split('T')[0];

            const formParams = event.widgetContext.forms.all;
            if(!event.resetQuery && formParams.olderThan && formParams.type && formParams.active){
              params.olderThan = new Date(formParams.olderThan+'T23:59:59.999Z')    
              params.type = formParams.type
              params.active = formParams.active
              if(formParams.paginationKeys){
                paginationKeys = formParams.paginationKeys.split(",")
              } else {
                paginationKeys = []
              }
              
              olderThanStr = formParams.olderThan
            }
            
            if(event.nextPage){
              params.lastScannedKey = event.nextPage
              paginationKeys.push(event.nextPage)
            } else if(event.prevPage) {
              let prevKey = null
              if(paginationKeys.length>1){
                paginationKeys.pop() // remove last element
                prevKey = paginationKeys[paginationKeys.length-1] // get last element
              }
              params.lastScannedKey = prevKey
            } else if(event.resetQuery){
              params.olderThan = new Date().toISOString()
              params.type = 'VALIDATION'
              params.active = 'YES'
              params.lastScannedKey = null
              paginationKeys = []
            }

            console.log('Search sla params', params)
            const parsedRes = await searchSLAViolations(params.type, params.active, params.olderThan, params.lastScannedKey)
            let slaRows = []

            if(parsedRes){
              console.log(parsedRes);
              slaRows = parsedRes.results.map((resource, i) => {
                let html = `<tr><td><b>${resource.sla_relatedEntityId}</b></td>`;
                html += `<td><b>${resource.type}</b></td>`;
                html += `<td><b>${resource.active_sla_entityName_type?'Active':'Archived'}</b></td>`;
                html += `<td><b>${formatTimestamp(resource.startTimestamp)}</b></td>`;
                html += `<td><b>${formatTimestamp(resource.slaExpiration)}</b></td></tr>`;
                return html;
              });
            }
            
            const formStart = `<div class="search-form">`
            
            const form = `Date from: <input type="date" name="olderThan" value="${olderThanStr}" />Type: <select name="type">${renderTypeOptions(params.type)}</select>Active: <select name="active">${renderActiveOptions(params.active)}</select><input type="hidden" name="paginationKeys" value="${paginationKeys.join(',')}" />`
            const buttonsStart = `<div class="buttons">`
            const actionButton = `<a class="btn btn-primary">Run query</a><cwdb-action action="call" endpoint="${context.invokedFunctionArn}"></cwdb-action>`
            let paginateButton = ''
            
            if(parsedRes.lastScannedKey) {
              paginateButton += `<a class="btn btn-secondary">Next page</a><cwdb-action action="call" endpoint="${context.invokedFunctionArn}">{ "nextPage": "${parsedRes.lastScannedKey}" }</cwdb-action>`
            }

            if(paginationKeys.length>0) {
              paginateButton += `<a class="btn btn-secondary">Prev page</a><cwdb-action action="call" endpoint="${context.invokedFunctionArn}">{ "prevPage": "true" }</cwdb-action>`
            }
            
            const resetQueryButton = `<a class="btn btn-secondary">Reset Query</a><cwdb-action action="call" endpoint="${context.invokedFunctionArn}">{ "resetQuery": "true" }</cwdb-action>`

            const buttonsEnd = `</div>`
            const formEnd = `</div>`
            
            
            const tableStart = `<table class="cwdb-no-default-styles"><thead><tr><th>Entity ID</th><th>Type</th><th>Status</th><th>Start timestamp</th><th>SLA Expiration</th></tr></thead>`
            return CSS + ExtCSS + formStart + form + buttonsStart + actionButton + paginateButton + resetQueryButton + buttonsEnd + formEnd + tableStart + `<tbody>${slaRows.join('')}</tbody></table>`;    
          };

      Description: "SLA Violation History function custom widget"
      FunctionName: pn-sla-violation-history-function
      Environment:
        Variables:
          SEARCH_SLA_LAMBDA_ARN: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:pn-searchSLAViolationsLambda
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt SlaViolationHistoryFunctionIAMRole.Arn
      Runtime: nodejs18.x
      Timeout: 60

  SlaViolationHistoryFunctionIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/pn-sla-violation-history-function:*
              - Action:
                  - lambda:InvokeFunction
                  - lambda:InvokeAsync
                Effect: Allow
                Resource:
                  - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:pn-searchSLAViolationsLambda
          PolicyName: pn-sla-violation-history-function-policy

  SlaViolationHistoryFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SLAViolationHistoryFunction}
      RetentionInDays: 14

  MicroservicesDashboard:
    Type: AWS::CloudWatch::Dashboard
    DependsOn:
      - StorageFunction
    Properties:
      DashboardName: !Sub ${ProjectName}-OER-Dashboard
      DashboardBody: 
        'Fn::Transform':
          Name: 'OerDashboardBodyTransform'
          Parameters:
            Region: !Sub ${AWS::Region}
            # Cloudformation doesn't allow to use IF conditions as Marco parameters so the optionality is managed at Lambda level
            ConfidentialInfoAccountId: !Ref ConfidentialInfoAccountId
            MicroservicesAlarmArns:
              - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:pn-external-registries-GlobalAlarm
              - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:pn-mandate-GlobalAlarm
              - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:pn-delivery-GlobalAlarm
              - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:pn-auth-fleet-v2-GlobalAlarm              
              - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:pn-downtime-logs-GlobalAlarm                            
              - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:pn-user-attributes-GlobalAlarm
              - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:pn-paper-channel-GlobalAlarm
              - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:pn-radd-fsu-GlobalAlarm
              - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:pn-infra-GlobalAlarm
              - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:pn-frontend-GlobalAlarm
              - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:pn-delivery-push-GlobalAlarm
              - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:pn-logsaver-be-GlobalAlarm
#              - !Sub arn:aws:cloudwatch:${AWS::Region}:$CONFIDENTIAL_INFO_ACCOUNT_ID:alarm:pn-data-vault-GlobalAlarm
            MicroservicesDashboardLinks:
              - !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=pn-external-registries       
              - !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=pn-mandate
              - !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=pn-delivery
              - !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=pn-auth-fleet-v2            
              - !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=pn-downtime-logs                         
              - !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=pn-user-attributes
              - !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=pn-paper-channel
              - !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=pn-radd-fsu
              - !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=pn-infra
              - !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=pn-frontend
              - !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=pn-delivery-push
              - !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=pn-logsaver-be
#              - !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=pn-data-vault;accountId=$CONFIDENTIAL_INFO_ACCOUNT_ID
            FunctionalAlarmsArns:
              - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:pn-CompositeAlarm-NotificationInput
              - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:pn-CompositeAlarm-NotificationOutput
              - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:pn-CompositeAlarm-NotificationProgress
            FunctionalAlarmsNames:
              - Nuove Notifiche
              - Lettura Notifiche
              - Workflow
            LoginAvailability:
              - "API:pn-token-exchange-api"
            ReadNotificationAvailability:
              - "API:pn-token-exchange-api"
              - "API:pn-delivery-progress-public-api-B2B"
              - "API:pn-delivery-public-api-B2B"
              - "API:pn-delivery-public-api-IO"
              - "API:pn-delivery-public-api-WEB"
              - "API:pn-delivery-push-public-api-B2B"
              - "API:pn-delivery-push-public-api-IO"
              - "API:pn-delivery-push-public-api-WEB"
              - !Sub "ALB:${Alb}:${RaddTargetGroup}"
            WriteNotificationAvailability:
              - "API:pn-delivery-public-api-B2B"
              - "API:pn-delivery-public-api-IO"
              - "API:pn-delivery-public-api-WEB"
              - "API:pn-delivery-public-api-WEB"
              - "API:pn-ExternalRegistry-public-api-B2B"
              - "API:pn-ExternalRegistry-public-api-WEB"
            MandateAvailability:
              - "API:pn-mandate-public-api-WEB"
              - "API:pn-token-exchange-api"
              - "API:API:pn-ExternalRegistry-public-api-WEB"
            DigitalAddressAvailability:
              - "API:pn-token-exchange-api"
              - "API:pn-UserAttributes-public-api-WEB"
              - "API:pn-ExternalRegistry-public-api-WEB"
            ApiKeyAvailability:
              - "API:pn-token-exchange-api"
              - "API:pn-ApikeyManager-public-api-WEB"
              - "API:pn-ApikeyManager-bo-public-api-WEB"
            StorageWidgetFunction: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:pn-storage-function
            SearchSLAViolationWidgetFunction: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:pn-sla-violation-history-function          
            OpenSearchArn: !Ref OpenSearchArn
            LogsBucketName: !Ref LogsBucketName

Outputs:
  Version:
    Value: !Ref Version
