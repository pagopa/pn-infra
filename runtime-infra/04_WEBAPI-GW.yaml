# Sample: https://github.com/aws-samples/aws-apigw-http-api-private--integrations/blob/main/templates/APIGW-HTTP-private-integration-ALB-ecs.yml
AWSTemplateFormatVersion: '2010-09-09'
Description: WEBAPI gateway Piattaforma Notifiche call with JWT token

Parameters:
  EnvName:
    Type: String
    Description: Nome dell'ambiente destinazione

Resources:

  WebapiGwRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${EnvName}-public-webapi'
      Description: Api Gateway for website with JWT Authorize
      FailOnWarnings: true
      BinaryMediaTypes:
        - 'image~1png'
        - 'image~1jpeg'
        - 'application~1pdf'
      EndpointConfiguration:
        Types:
          - REGIONAL

  WebapiGwRestApiDeliveryRes:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref WebapiGwRestApi
      ParentId: !GetAtt WebapiGwRestApi.RootResourceId
      PathPart: delivery
  WebapiGwRestApiDeliveryResV3:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref WebapiGwRestApi
      ParentId: !Ref WebapiGwRestApiDeliveryRes
      PathPart: v3
  WebapiGwRestApiDeliveryResV3ApiDocs:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref WebapiGwRestApi
      ParentId: !Ref WebapiGwRestApiDeliveryResV3
      PathPart: api-docs
  WebapiGwRestApiDeliveryRes2:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref WebapiGwRestApi
      ParentId: !Ref WebapiGwRestApiDeliveryRes
      PathPart: '{proxy+}'
  
  WebapiGwRestApiDeliveryAnyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: proxy to delivery
      RestApiId: !Ref WebapiGwRestApi
      ResourceId: !Ref WebapiGwRestApiDeliveryRes2
      HttpMethod: ANY
      ApiKeyRequired: false
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref JwtAuthorizer
      RequestParameters:
        method.request.path.proxy: true
        method.request.header.X-PagoPA-PN-PA: false
        method.request.header.X-PagoPA-User-Id: false
        method.request.header.X-PagoPA-User-Secret: false
        method.request.querystring.recipientId: false
        method.request.querystring.senderId: false
        method.request.querystring.startDate: false
        method.request.querystring.endDate: false
        method.request.querystring.status: false
        method.request.querystring.subjectRegExp: false
        method.request.querystring.token: false
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Content-Type: false
            method.response.header.Content-Disposition: false
        - StatusCode: 307
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Content-Type: false
            method.response.header.Content-Disposition: false
            method.response.header.Location: false
        - StatusCode: 400
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Content-Type: false
            method.response.header.Content-Disposition: false
            method.response.header.Location: false
        - StatusCode: 401
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Content-Type: false
            method.response.header.Content-Disposition: false
            method.response.header.Location: false
        - StatusCode: 404
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Content-Type: false
            method.response.header.Content-Disposition: false
            method.response.header.Location: false
        - StatusCode: 500
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Content-Type: false
            method.response.header.Content-Disposition: false
            method.response.header.Location: false
      Integration:
        ConnectionType: VPC_LINK
        ConnectionId: !ImportValue
          "Fn::Sub": '${EnvName}-nlb-link-id'
        IntegrationHttpMethod: ANY
        Type: HTTP
        #Uri: !Sub 'http://${PrivateApplicationLoadBalancer.DNSName}:8080/delivery/{proxy}'
        Uri: !Join [ '', [ "http://", { 'Fn::ImportValue': { 'Fn::Sub': '${EnvName}-alb-domain' } }, ":8080/delivery/{proxy}" ] ]
        RequestParameters:
          integration.request.path.proxy: method.request.path.proxy
          integration.request.header.X-PagoPA-PN-PA: context.authorizer.pa_id
          integration.request.header.X-PagoPA-User-Id: context.authorizer.user_id
          integration.request.header.X-PagoPA-User-Secret: method.request.header.X-PagoPA-User-Secret
          integration.request.querystring.recipientId: method.request.querystring.recipientId
          integration.request.querystring.senderId: method.request.querystring.senderId
          integration.request.querystring.startDate: method.request.querystring.startDate
          integration.request.querystring.endDate: method.request.querystring.endDate
          integration.request.querystring.status: method.request.querystring.status
          integration.request.querystring.subjectRegExp: method.request.querystring.subjectRegExp
          integration.request.querystring.token: method.request.querystring.token
        PassthroughBehavior: "WHEN_NO_MATCH"
        TimeoutInMillis: 29000
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: !Join [ '', [ "'", { 'Fn::ImportValue': { 'Fn::Sub': '${EnvName}-cdn-url' } }, "'" ] ]
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Content-Disposition: integration.response.header.Content-Disposition
            ResponseTemplates:
              application/json: ""
          - StatusCode: 307
            SelectionPattern: 307
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: !Join [ '', [ "'", { 'Fn::ImportValue': { 'Fn::Sub': '${EnvName}-cdn-url' } }, "'" ] ]
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Content-Disposition: integration.response.header.Content-Disposition
              method.response.header.Location: integration.response.header.Location
            ResponseTemplates:
              application/json: ""
          - StatusCode: 400
            SelectionPattern: 400
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: !Join [ '', [ "'", { 'Fn::ImportValue': { 'Fn::Sub': '${EnvName}-cdn-url' } }, "'" ] ]
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Content-Disposition: integration.response.header.Content-Disposition
              method.response.header.Location: integration.response.header.Location
            ResponseTemplates:
              application/json: ""
          - StatusCode: 401
            SelectionPattern: 401
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: !Join [ '', [ "'", { 'Fn::ImportValue': { 'Fn::Sub': '${EnvName}-cdn-url' } }, "'" ] ]
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Content-Disposition: integration.response.header.Content-Disposition
              method.response.header.Location: integration.response.header.Location
            ResponseTemplates:
              application/json: ""
          - StatusCode: 404
            SelectionPattern: 404
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: !Join [ '', [ "'", { 'Fn::ImportValue': { 'Fn::Sub': '${EnvName}-cdn-url' } }, "'" ] ]
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Content-Disposition: integration.response.header.Content-Disposition
              method.response.header.Location: integration.response.header.Location
            ResponseTemplates:
              application/json: ""
          - StatusCode: 500
            SelectionPattern: 500
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: !Join [ '', [ "'", { 'Fn::ImportValue': { 'Fn::Sub': '${EnvName}-cdn-url' } }, "'" ] ]
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Content-Disposition: integration.response.header.Content-Disposition
              method.response.header.Location: integration.response.header.Location
            ResponseTemplates:
              application/json: ""
  WebapiGwRestApiDeliveryCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: CORS for delivery
      RestApiId: !Ref WebapiGwRestApi
      ResourceId: !Ref WebapiGwRestApiDeliveryRes2
      HttpMethod: OPTIONS
      ApiKeyRequired: false
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.proxy: true
        method.request.header.X-PagoPA-PN-PA: true
        method.request.header.X-PagoPA-User-Id: true
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: Empty
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{\"statusCode\": 200}"
        PassthroughBehavior: "WHEN_NO_MATCH"
        TimeoutInMillis: 29000
        CacheNamespace: "w053mc"
        CacheKeyParameters: [ ]
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: !Join [ '', [ "'", { 'Fn::ImportValue': { 'Fn::Sub': '${EnvName}-cdn-url' } }, "'" ] ]
            ResponseTemplates:
              application/json: ""
  WebapiGwRestApiDeliveryApiDocsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: get documentation
      RestApiId: !Ref WebapiGwRestApi
      ResourceId: !Ref WebapiGwRestApiDeliveryResV3ApiDocs
      HttpMethod: GET
      ApiKeyRequired: false
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        ConnectionType: VPC_LINK
        ConnectionId: !ImportValue
          "Fn::Sub": '${EnvName}-nlb-link-id'
        IntegrationHttpMethod: GET
        Type: HTTP
        #Uri: !Sub 'http://${PrivateApplicationLoadBalancer.DNSName}:8080/delivery/{proxy}'
        Uri: !Join ['', ["http://", { 'Fn::ImportValue': { 'Fn::Sub':'${EnvName}-alb-domain'}}, ":8080/delivery/v3/api-docs"]]
        PassthroughBehavior: "WHEN_NO_MATCH"
        TimeoutInMillis: 29000
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
  WebapiGwRestApiDeliveryApiDocsCORSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: CORS for delivery
      RestApiId: !Ref WebapiGwRestApi
      ResourceId: !Ref WebapiGwRestApiDeliveryResV3ApiDocs
      HttpMethod: OPTIONS
      ApiKeyRequired: false
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          ResponseModels:
            application/json: Empty
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{\"statusCode\": 200}"
        PassthroughBehavior: "WHEN_NO_MATCH"
        TimeoutInMillis: 29000
        CacheNamespace: "w053mc"
        CacheKeyParameters: [ ]
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
              
  WebapiGwRestApiBetaDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - WebapiGwRestApiDeliveryAnyMethod
      - WebapiGwRestApiDeliveryCORSMethod
      - WebapiGwRestApiDeliveryApiDocsGetMethod
      - WebapiGwRestApiDeliveryApiDocsCORSMethod
    Properties:
      RestApiId: !Ref WebapiGwRestApi
      Description: 'Beta deployment for rest api gw'
      
  WebapiGwRestApiBetaStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref WebapiGwRestApi
      StageName: beta
      TracingEnabled: true
      DeploymentId: !Ref WebapiGwRestApiBetaDeployment
      Description: 'Beta stage for rest api gw'
      AccessLogSetting:
        DestinationArn: !GetAtt "PublicWebapiLogGroup.Arn"
        Format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","routeKey":"$context.routeKey","status":$context.status,"responseLatency":$context.responseLatency}'
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          MetricsEnabled: 'true'
          DataTraceEnabled: 'false'

  PublicWebapiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1

  JwtLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: jwtAuthorizer
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebapiGwRestApi}/authorizers/${JwtAuthorizer}"

  JwtAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: pn-auth-fleet_jwtAuthorizer
      Type: TOKEN
      AuthorizerResultTtlInSeconds: '300'
      AuthorizerUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:558518206506:function:jwtAuthorizer/invocations'
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref WebapiGwRestApi

Outputs:
  WebapiGatewayUrlBeta:
    Description: Invoke URL
    Value: !Sub https://${WebapiGwRestApi}.execute-api.${AWS::Region}.amazonaws.com/beta


