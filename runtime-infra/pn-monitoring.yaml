AWSTemplateFormatVersion: 2010-09-09
Description: 'This template deploys the queues needed for monitoring'

Parameters:
  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'

  AlarmSNSTopicArn:
    Type: String
    Description: ARN of the SNS topic for alarms

  LogsKinesisSourceStreamArn:
    Default: ''
    Type: String
    Description: where to send logs

Conditions:
  SendLogToKinesis: !Not [ !Equals [ !Ref LogsKinesisSourceStreamArn, '' ] ]

Resources:
 ###                            Event adn Alarm                           ###
  ############################################################################

  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${ProjectName}-ECSOutOfMemoryStoppedTasksEvent"
      Description: Triggered when an Amazon ECS Task is stopped due to OOM
      EventPattern:
        source:
          - aws.ecs
        detail-type:
          - ECS Task State Change
        detail:
          desiredStatus:
            - STOPPED
          lastStatus:
            - STOPPED
          containers:
            reason:
              - prefix: "OutOfMemory"
      State: ENABLED
      Targets:
        - Arn: !GetAtt LogGroupOOMEvents.Arn
          Id: LogTarget
    
  # Creating a log group for monitoring the OOM events
  LogGroupOOMEvents:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/events/${ProjectName}-ecs-oom-errors"
      RetentionInDays: 14
      Tags: 
        - Key: "pnInfraFeature"
          Value: "baseInfra"

  # Resource based policy to allow EventBridge to publish to CloudWatch Logs
  LogGroupOOMEventsPolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: !Sub "${ProjectName}-EventBridgeToCWLogsPolicy"
      PolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "EventBridgetoCWLogsCreateLogStreamPolicy",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "events.amazonaws.com"
                ]
              },
              "Action": [
                "logs:CreateLogStream"
              ],
              "Resource": [
                "${LogGroupOOMEvents.Arn}"
              ]
            },
            {
              "Sid": "EventBridgetoCWLogsPutLogEventsPolicy",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "events.amazonaws.com"
                ]
              },
              "Action": [
                "logs:PutLogEvents"
              ],
              "Resource": [
                "${LogGroupOOMEvents.Arn}"
              ],
              "Condition": {
                "ArnEquals": {"AWS:SourceArn": "${EventRule.Arn}"}
              }
            }
          ]
        }

  # CloudWatch metric: it is exepcted to be a very rare event so it is acceptable to have one metric for all containers
  # Note: the container that runs out of memory is detailed in the log event
  OutOfMemoryLogsMetricFilter: 
    Type: AWS::Logs::MetricFilter
    Properties: 
      LogGroupName: !Ref LogGroupOOMEvents
      FilterPattern: ' '
      MetricTransformations: 
        - MetricValue: 1
          MetricNamespace: "OutOfMemoryErrors"
          MetricName: !Sub "${ProjectName}-ECSOutOfMemory"

  CloudWatchAlarmOOM:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-ECSOutOfMemory-Alarm"
      AlarmDescription: "CloudWatch alarm for when ECS task stop with OOM errors."
      TreatMissingData: notBreaching        
      AlarmActions:
        - !Ref AlarmSNSTopicArn
      DatapointsToAlarm: 1            
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 60
      Period: 60
      Namespace: OutOfMemoryErrors   
      MetricName: !Sub "${ProjectName}-ECSOutOfMemory"
      Statistic: Sum
      Threshold: 1
 
  SubscriptionFilterServiceRole:
    Condition: SendLogToKinesis
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: logs.amazonaws.com
        Version: "2012-10-17"
      Path: /
      Policies:
        -
          PolicyName: !Sub '${ProjectName}-monitoring-subscription-role'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - kinesis:PutRecord
                Effect: Allow
                Resource: "*"
              - Action:
                - "kms:Encrypt"
                - "kms:GenerateDataKey"
                - "kms:Decrypt"
                Effect: Allow
                Resource: "*"
      Tags:
        - Key: "pnInfraFeature"
          Value: "baseInfra"

  OomSubscriptionFilter:
    Condition: SendLogToKinesis
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      RoleArn:
        Fn::GetAtt:
          - "SubscriptionFilterServiceRole"
          - "Arn"
      LogGroupName: !Ref LogGroupOOMEvents
      FilterPattern: ' '
      DestinationArn: !Ref LogsKinesisSourceStreamArn

Outputs:
  OOMAlarmArn:
    Value: !GetAtt CloudWatchAlarmOOM.Arn
    Description: 'ARN of cloudwatch out of memory alarm'