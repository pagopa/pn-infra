AWSTemplateFormatVersion: 2010-09-09
Description: 'This template deploys the queues needed for monitoring'

Parameters:
  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'

  AlarmSNSTopicArn:
    Type: String
    Description: ARN of the SNS topic for alarms

  LogsKinesisSourceStreamArn:
    Default: ''
    Type: String
    Description: where to send logs

  TemplateBucketBaseUrl:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'

  LambdasBucketName:
    Type: String

  LambdasBasePath:
    Type: String

  EnvironmentType:
    Type: String
    Default: ''

  PnCoreAwsAccountId:
    Type: String
    Description: Core Account ID (leave blank in Core account)
    Default: ''

  CompositeMetricGeneratorScheduleExpression:
    Type: String
    Default: 'rate(10 minutes)'

  HelpdeskAccountId:
    Type: String
    Default: ''
    Description: 'Helpdesk account ID'

  ConfidentialInfoAccountId:
    Type: String
    Default: ''
    Description: 'ConfidentialInfo account ID'

  LogsKinesisSourceStreamName:
    Type: String
    Default: ''
    Description: 'Kinesis stream name to send logs to'

  CdcKinesisSourceStreamName:
    Type: String
    Default: ''
    Description: 'Kinesis stream name to send CDC logs to'

  LogsKinesisMaxAgeInMilliseconds:
    Type: Number
    Description: 'MaxAgeInMilliseconds for Kinesis Logs GetRecords'

  CdcKinesisMaxAgeInMilliseconds:
    Type: Number
    Description: 'MaxAgeInMilliseconds for Kinesis Cdc GetRecords'

  LogsKinesisMaxAgeInMillisecondsOncall:
    Type: Number
    Description: 'MaxAgeInMilliseconds for Kinesis Logs GetRecords (oncall)'

  CdcKinesisMaxAgeInMillisecondsOncall:
    Type: Number
    Description: 'MaxAgeInMilliseconds for Kinesis Cdc GetRecords (oncall)'

  LogsBucketName:
    Type: String
    Description: 'Name of the bucket where logs are stored'

  LogsBucketKmsKeyArn:
    Type: String
    Description: 'ARN of the KMS key used to encrypt logs'
    
  DiagnosticLambdaLoggerName:
    Type: String
    Default: 'pn-diagnostic-logger'
    Description: 'Name of the diagnostic logger lambda'

  DiagnosticLoggerMemory:
    Type: Number
    Default: 128
    Description: 'Memory size for the diagnostic logger lambda'

  DiagnosticBatchSize:
    Type: Number
    Default: 1
    Description: 'Batch size for the diagnostic logger lambda'

  SSLCertExpirationCheckLambdaName:
    Type: String
    Default: 'pn-radd-SSLCertExpirationCheck'
    Description: 'Name of the SSL certificate expiration check lambda'

  SSLCertificateParameterStoreName:
    Type: String
    Default: "/radd/ssl-monitoring-domains"
    Description: SSM parameter with JSON array of domains
  
  SSLCertificateExpirationAlarmThresholdDays:
    Type: String
    Default: "30"
    Description: SSL certificare expiration threshold

  SyntheticsMonitorEndpoints:
    Type: String
    Description: Comma-separated list of URLs da monitorare
    Default: "https://cittadini.dev.notifichedigitali.it,https://selfcare.dev.notifichedigitali.it,https://imprese.dev.notifichedigitali.it,https://helpdesk.dev.notifichedigitali.it"

  SyntheticsMonitorEndpointsApi:
    Type: String
    Description: Comma-separated list of URLs da monitorare
    Default: "https://api-io.dev.notifichedigitali.it,https://api-selcpg.dev.notifichedigitali.it,https://api.bo.dev.notifichedigitali.it,https://api.cn.dev.notifichedigitali.it,https://api.dest.dev.notifichedigitali.it,https://api.dev.notifichedigitali.it,https://api.radd.dev.notifichedigitali.it,https://webapi.dev.notifichedigitali.it"

  SyntheticsMonitorTimeout:
    Type: Number
    Default: 300
    Description: Timeout (in seconds) for canary execution

Conditions:
  SendLogToKinesis: !Not [ !Equals [ !Ref LogsKinesisSourceStreamArn, '' ] ]
  IsCoreAccount: !Equals [!Ref PnCoreAwsAccountId, '' ]

Resources:
 ###                            Event adn Alarm                           ###
  ############################################################################

  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${ProjectName}-ECSOutOfMemoryStoppedTasksEvent"
      Description: Triggered when an Amazon ECS Task is stopped due to OOM
      EventPattern:
        source:
          - aws.ecs
        detail-type:
          - ECS Task State Change
        detail:
          desiredStatus:
            - STOPPED
          lastStatus:
            - STOPPED
          containers:
            reason:
              - prefix: "OutOfMemory"
      State: ENABLED
      Targets:
        - Arn: !GetAtt LogGroupOOMEvents.Arn
          Id: LogTarget
    
  StoppedTaskEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${ProjectName}-StoppedTasksEventRule"
      Description: Triggered when an Amazon ECS Task is stopped
      EventPattern:
        source:
          - aws.ecs
        detail-type:
          - ECS Task State Change
        detail:
          desiredStatus:
            - STOPPED
          lastStatus:
            - STOPPED
      State: ENABLED
      Targets:
        - Arn: !GetAtt LogGroupTaskStoppedEvents.Arn
          Id: LogTarget

  # Creating a log group for monitoring the OOM events
  LogGroupTaskStoppedEvents:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/events/${ProjectName}-ecs-stopped-events"
      RetentionInDays: 90

  # Creating a log group for monitoring the OOM events
  LogGroupOOMEvents:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/events/${ProjectName}-ecs-oom-errors"
      RetentionInDays: 90

  # Resource based policy to allow EventBridge to publish to CloudWatch Logs
  LogGroupOOMEventsPolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: !Sub "${ProjectName}-EventBridgeToCWLogsPolicy"
      PolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "EventBridgetoCWLogsCreateLogStreamPolicy",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "events.amazonaws.com"
                ]
              },
              "Action": [
                "logs:CreateLogStream"
              ],
              "Resource": [
                "${LogGroupOOMEvents.Arn}",
                "${LogGroupTaskStoppedEvents.Arn}"
              ]
            },
            {
              "Sid": "EventBridgetoCWLogsPutLogEventsPolicy",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "events.amazonaws.com"
                ]
              },
              "Action": [
                "logs:PutLogEvents"
              ],
              "Resource": [
                "${LogGroupOOMEvents.Arn}",
                "${LogGroupTaskStoppedEvents.Arn}"
              ],
              "Condition": {
                "ArnEquals": {"AWS:SourceArn": "${EventRule.Arn}"}
              }
            }
          ]
        }

  # CloudWatch metric: it is exepcted to be a very rare event so it is acceptable to have one metric for all containers
  # Note: the container that runs out of memory is detailed in the log event
  OutOfMemoryLogsMetricFilter: 
    Type: AWS::Logs::MetricFilter
    Properties: 
      LogGroupName: !Ref LogGroupOOMEvents
      FilterPattern: ' '
      MetricTransformations: 
        - MetricValue: 1
          MetricNamespace: "OutOfMemoryErrors"
          MetricName: !Sub "${ProjectName}-ECSOutOfMemory"

  CloudWatchAlarmOOM:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-ECSOutOfMemory-Alarm"
      AlarmDescription: "CloudWatch alarm for when ECS task stop with OOM errors."
      TreatMissingData: notBreaching        
      AlarmActions:
        - !Ref AlarmSNSTopicArn
      DatapointsToAlarm: 1            
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 60
      Period: 60
      Namespace: OutOfMemoryErrors   
      MetricName: !Sub "${ProjectName}-ECSOutOfMemory"
      Statistic: Sum
      Threshold: 1
 
  SubscriptionFilterServiceRole:
    Condition: SendLogToKinesis
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: logs.amazonaws.com
        Version: "2012-10-17"
      Path: /
      Policies:
        -
          PolicyName: !Sub '${ProjectName}-monitoring-subscription-role'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - kinesis:PutRecord
                Effect: Allow
                Resource: "*"
              - Action:
                - "kms:Encrypt"
                - "kms:GenerateDataKey"
                - "kms:Decrypt"
                Effect: Allow
                Resource: "*"

  OomSubscriptionFilter:
    Condition: SendLogToKinesis
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      RoleArn:
        Fn::GetAtt:
          - "SubscriptionFilterServiceRole"
          - "Arn"
      LogGroupName: !Ref LogGroupOOMEvents
      FilterPattern: ' '
      DestinationArn: !Ref LogsKinesisSourceStreamArn

  ###                           Alarm State ChangeRule                    ###
  ###########################################################################
  # EVENT BRIDGE RULE: invoke lambda on alarm state change

  DefaultEventBusMonitoringLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CompositeMetricGenerator.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SendAlarmChangeEventsToLambda.Arn

  DefaultEventBusScheduleMonitoringLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CompositeMetricGenerator.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CompositeMetricGeneratorScheduleRule.Arn

  SendAlarmChangeEventsToLambda:
    Type: AWS::Events::Rule
    Properties: 
      Description: Save build events
      RoleArn: !GetAtt "MonitoringBusExecuteLambdaRole.Arn"
      EventPattern: 
        source: [ "aws.cloudwatch" ]
        detail-type: ["CloudWatch Alarm State Change"]
      Targets: 
        - Arn: !GetAtt CompositeMetricGenerator.Arn
          Id: !Sub ${ProjectName}-AlarmStateChangeTarget
        - Arn: !Ref AlarmSNSTopicArn
          InputPath: $.detail
          Id: !Sub ${ProjectName}-AlarmSnsTopic

  # - Role and policy used to execute lambda from EventBridge rule
  MonitoringBusExecuteLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyName: !Sub ${ProjectName}-monitoring-bus-policy
          PolicyDocument:
            Statement:
              - Sid: executeLambda
                Action:
                  - lambda:InvokeFunction
                  - lambda:InvokeAsync
                Effect: Allow
                Resource: 
                  - !GetAtt CompositeMetricGenerator.Arn

  CompositeMetricGeneratorScheduleRule:
    Type: AWS::Events::Rule
    Properties: 
      Name: !Sub "${ProjectName}-CompositeMetricGeneratorScheduleRule"
      ScheduleExpression: !Ref CompositeMetricGeneratorScheduleExpression
      State: ENABLED
      Targets: 
        - Arn: !GetAtt CompositeMetricGenerator.Arn
          Id: !Ref CompositeMetricGenerator
          
  ### Alarm state change lambda               ####
  ################################################
  # Lambda function
  CompositeMetricGenerator:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-compositeMetricGenerator"
      Runtime: nodejs22.x
      Handler: "index.handler"
      Code:
        S3Bucket: !Ref LambdasBucketName
        S3Key: !Sub "${LambdasBasePath}/composite-metric-generator.zip"
      Role: !GetAtt CompositeMetricGeneratorRole.Arn
      TracingConfig:
        Mode: Active
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"
      Environment:
        Variables:
          REGION: !Sub ${AWS::Region}
          ENVIRONMENT_TYPE: !Ref EnvironmentType
          ACCOUNT_ID: !Sub ${AWS::AccountId}
          HELPDESK_ACCOUNT_ID: !Ref HelpdeskAccountId
          CONFIDENTIAL_INFO_ACCOUNT_ID: !Ref ConfidentialInfoAccountId
      Timeout : 180

  # Lambda function role
  CompositeMetricGeneratorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-compositeMetricGeneratorRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        # - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
        # - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Path: /

  # Lambda function IAM policy
  CompositeMetricGeneratorRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${ProjectName}-compositeMetricGeneratorRolePolicy
      Roles:
        - !Ref CompositeMetricGeneratorRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "cloudwatch:*"
            Resource: '*' # cannot restrict because it needs to read metrics and alarms of multiple AWS accounts and regions
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Resource: 
              - !Sub "arn:aws:iam::${HelpdeskAccountId}:role/CloudWatch-CrossAccountSharingRole"
              - !Sub "arn:aws:iam::${ConfidentialInfoAccountId}:role/CloudWatch-CrossAccountSharingRole"

  # lambda function Log Group
  CompositeMetricGeneratorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${CompositeMetricGenerator}"
      RetentionInDays: 14

  CompositeMetricGeneratorAlarm:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - CompositeMetricGeneratorLogGroup
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/lambda-alarms.yaml"
      Parameters:
        FunctionName: !Ref CompositeMetricGenerator
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn

  # Logs Kinesis GetRecords.IteratorAgeMilliseconds alarm
  LogsKinesisGetRecordsIteratorAgeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-LogsKinesis-IteratorAge-Alarm"
      AlarmDescription: "CloudWatch alarm for when Kinesis Logs GetRecords.IteratorAgeMilliseconds is too high."
      TreatMissingData: notBreaching        
      AlarmActions:
        - !Ref AlarmSNSTopicArn
      Dimensions:
        - Value: !Ref LogsKinesisSourceStreamName
          Name: StreamName        
      DatapointsToAlarm: 10            
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 60
      Period: 60
      Namespace: AWS/Kinesis   
      MetricName: GetRecords.IteratorAgeMilliseconds
      Statistic: Maximum
      Threshold: !Ref LogsKinesisMaxAgeInMilliseconds

  OncallLogsKinesisGetRecordsIteratorAgeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "oncall-${ProjectName}-LogsKinesis-IteratorAge-Alarm"
      AlarmDescription: "CloudWatch alarm for when Kinesis Logs GetRecords.IteratorAgeMilliseconds is too high."
      TreatMissingData: notBreaching        
      AlarmActions:
        - !Ref AlarmSNSTopicArn
      Dimensions:
        - Value: !Ref LogsKinesisSourceStreamName
          Name: StreamName        
      DatapointsToAlarm: 10            
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 60
      Period: 60
      Namespace: AWS/Kinesis   
      MetricName: GetRecords.IteratorAgeMilliseconds
      Statistic: Maximum
      Threshold: !Ref LogsKinesisMaxAgeInMillisecondsOncall

  # Cdc Kinesis GetRecords.IteratorAgeMilliseconds alarm
  CdcKinesisGetRecordsIteratorAgeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-CdcKinesis-IteratorAge-Alarm"
      AlarmDescription: "CloudWatch alarm for when Kinesis Cdc GetRecords.IteratorAgeMilliseconds is too high."
      TreatMissingData: notBreaching        
      AlarmActions:
        - !Ref AlarmSNSTopicArn
      Dimensions:
        - Value: !Ref CdcKinesisSourceStreamName
          Name: StreamName
      DatapointsToAlarm: 10           
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 60
      Period: 60
      Namespace: AWS/Kinesis   
      MetricName: GetRecords.IteratorAgeMilliseconds
      Statistic: Maximum
      Threshold: !Ref CdcKinesisMaxAgeInMilliseconds

  OncallCdcKinesisGetRecordsIteratorAgeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "oncall-${ProjectName}-CdcKinesis-IteratorAge-Alarm"
      AlarmDescription: "CloudWatch alarm for when Kinesis Cdc GetRecords.IteratorAgeMilliseconds is too high."
      TreatMissingData: notBreaching        
      AlarmActions:
        - !Ref AlarmSNSTopicArn
      Dimensions:
        - Value: !Ref CdcKinesisSourceStreamName
          Name: StreamName
      DatapointsToAlarm: 10           
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 60
      Period: 60
      Namespace: AWS/Kinesis   
      MetricName: GetRecords.IteratorAgeMilliseconds
      Statistic: Maximum
      Threshold: !Ref CdcKinesisMaxAgeInMillisecondsOncall

  ClockErrorBoundAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "pn-Clock-Error-Bound-Alarm"
      AlarmDescription: "CloudWatch Alarm for Clock Error Bound limit over threshold"
      TreatMissingData: notBreaching      
      AlarmActions:
        - !Ref AlarmSNSTopicArn 
      Metrics:
        - Id: q1
          Expression: "SELECT MAX(ClockErrorBound) FROM SCHEMA(\"ECS/ContainerInsights\", ClusterName,Family,TaskID) GROUP BY ClusterName"
          Period: 600
          ReturnData: False
        - Id: e2
          Expression: "IF(MAX(q1) < 100, 0, 1)"
          Period: 600
      DatapointsToAlarm: 2           
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 2
      Threshold: 1
  
  SynchronizationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "pn-Synchronization-Alarm"
      AlarmDescription: "CloudWatch Alarm for Synchronization value different by Synchronized"
      TreatMissingData: notBreaching   
      AlarmActions:
        - !Ref AlarmSNSTopicArn    
      Metrics:
        - Id: q1
          Expression: "SELECT MAX(Synchronization) FROM SCHEMA(\"ECS/ContainerInsights\", ClusterName,Family,TaskID) GROUP BY ClusterName"
          Period: 600
          ReturnData: False
        - Id: e2
          Expression: "IF(MAX(q1) < 1, 0, 1)"
          Period: 600
      DatapointsToAlarm: 2           
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 2
      Threshold: 1

  # Trail for diagnostic lambda functions
  DiagnosticLambdaCloudTrail:
    Type: AWS::CloudTrail::Trail
    Properties:
      TrailName: pn-DiagnosticLambdaCloudTrail
      IsMultiRegionTrail: false
      IsOrganizationTrail: false
      EnableLogFileValidation: false
      AdvancedEventSelectors:
        - Name: diagnostic-lambda-selector
          FieldSelectors:
            - Field: "eventCategory"
              Equals: 
                - "Data"
            - Field: "resources.type"
              Equals: 
                - "AWS::Lambda::Function"                
            - Field: "resources.ARN"
              StartsWith: 
                - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:diagnostic"
      S3BucketName: !Ref LogsBucketName
      S3KeyPrefix: "diagnosticTrail"
      IsLogging: true

  DiagnosticLoggerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${DiagnosticLambdaLoggerName}-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
      Policies:
        - PolicyName: !Sub '${DiagnosticLambdaLoggerName}-role-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: allS3
                Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:ListObjects'
                Resource: 
                  - !Sub "arn:${AWS::Partition}:s3:::${LogsBucketName}/diagnosticTrail/*"
              - Sid: kmsDecrypt
                Effect: Allow
                Action:
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                  - kms:DescribeKey
                Resource: !Ref LogsBucketKmsKeyArn
              - Sid: receiveSqs
                Effect: Allow
                Action:
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                  - "sqs:ChangeMessageVisibility"
                  - "sqs:GetQueueUrl"
                Resource: 
                  - !Sub 'arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${ProjectName}-diagnostic-cloudtrail-file'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        # - 'arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy'

  DiagnosticLoggerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref DiagnosticLambdaLoggerName
      Runtime: nodejs22.x
      Role: !GetAtt DiagnosticLoggerLambdaRole.Arn
      Handler: index.handler
      MemorySize: !Ref DiagnosticLoggerMemory
      Timeout: 30
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"      
      Code:
        S3Bucket: !Ref LambdasBucketName
        S3Key: !Sub ${LambdasBasePath}/diagnostic-logger.zip

  DiagnosticLoggerLambdaQueuePermission:
   Type: AWS::Lambda::Permission
   Properties:
     Action: 'lambda:InvokeFunction'
     FunctionName: !GetAtt DiagnosticLoggerLambda.Arn
     Principal: 'sqs.amazonaws.com'
     SourceAccount: !Ref AWS::AccountId
     SourceArn: !Sub 'arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${ProjectName}-diagnostic-cloudtrail-file'

  DiagnosticLoggerLambdaQueueSourceMapping:
    DependsOn:
      - DiagnosticLoggerLambdaQueuePermission
    Type: AWS::Lambda::EventSourceMapping
    Properties: 
      BatchSize: !Ref DiagnosticBatchSize
      Enabled: True
      EventSourceArn: !Sub 'arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${ProjectName}-diagnostic-cloudtrail-file'
      FunctionName: !Ref DiagnosticLoggerLambda
      MaximumBatchingWindowInSeconds: 0 #default value

  DiagnosticLoggerLambdaAlarms:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/lambda-alarms.yaml"
      Parameters:
        FunctionName: !Ref DiagnosticLoggerLambda
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn

  SSLCertCheckExpirationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref SSLCertExpirationCheckLambdaName
      Runtime: nodejs22.x
      Handler: index.handler
      Role: !GetAtt SSLCertExpirationCheckRole.Arn
      Timeout: 300
      Environment:
        Variables:  
          DomainParameterName: !Ref SSLCertificateParameterStoreName
      Code:
        ZipFile: |
          const { SSMClient, GetParameterCommand } = require("@aws-sdk/client-ssm");
          const tls = require('tls');
          const ssm = new SSMClient({});
          const PARAM_NAME = process.env.DomainParameterName;
          
          const getSSMParam = async () => {
            const cmd = new GetParameterCommand({ Name: PARAM_NAME });
            const res = await ssm.send(cmd);
            return JSON.parse(res.Parameter.Value);
          };
          
          const checkCert = (domain) => {
            return new Promise((resolve, reject) => {
              const socket = tls.connect({ host: domain, port: 443, servername: domain }, () => {
                const cert = socket.getPeerCertificate();
                socket.end();
                if (!cert || !cert.valid_to) {
                    return reject(new Error("Invalid certificate for " + domain));
                }
                resolve(new Date(cert.valid_to));
              });
              socket.setTimeout(10000);
              socket.on('timeout', () => {
                  socket.destroy();
                  reject(new Error("Timeout for " + domain));
              });
              socket.on('error', (err) => {
                  reject(new Error("TLS error for " + domain + ": " + err.message));
              });
            });
          };
          
          const logEMFMetric = (iss, days) => {
            const metric = {
              _aws: {
                Timestamp: Date.now(),
                CloudWatchMetrics: [
                  {
                    Namespace: "RADD",
                    Dimensions: [["Iss"]],
                    Metrics: [{ Name: "SSLExpiration", Unit: "None" }]
                  }
                ]
              },
              Iss: iss,
              SSLExpiration: days
            };
            console.log(JSON.stringify(metric));
          };
          
          exports.handler = async () => {
            const now = new Date();
            const domains = await getSSMParam();
            let errorFlag = false;
            for (const e of domains) {
              try {
                const domain = e.domain
                const iss = e.iss
                const expiryDate = await checkCert(domain);
                const daysLeft = Math.ceil((expiryDate - now) / (1000 * 60 * 60 * 24));
                logEMFMetric(iss, daysLeft);
                console.log(`Certificate for iss ${iss} expires in ${daysLeft} days`);
              } catch (err) {
                console.error(`Error with issuer "${iss}" : ${err.message}`);
              }
            }
          };
    DependsOn:
      - RaddSSLCertCheckExpirationLogGroup

  SSLCertExpirationCheckRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-SSLCertCheckExpirationRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: !Sub ${ProjectName}-PnSSLCertCheckExpirationRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${SSLCertificateParameterStoreName}"

  SSLCertExpirationCheckLambdaSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub ${SSLCertExpirationCheckLambdaName}-schedule
      ScheduleExpression: cron(0 12 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt SSLCertCheckExpirationLambda.Arn
          Id: "SSLCertCheckTarget"

  SSLCertExpirationCheckLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SSLCertExpirationCheckLambdaName
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SSLCertExpirationCheckLambdaSchedule.Arn

  SSLCertificateExpirationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-radd-SSL-Certificate-Expiration-Alarm"
      AlarmDescription: "CloudWatch alarm for SSL Expiration."
      TreatMissingData: notBreaching        
      AlarmActions:
        - !Ref AlarmSNSTopicArn
      Metrics:
        - Id: q1
          Expression: "SELECT MIN(SSLExpiration) FROM SCHEMA(\"RADD\", \"Iss\")"
          Period: 10800
          ReturnData: False
        - Id: e2
          Expression: !Sub "IF(q1 > ${SSLCertificateExpirationAlarmThresholdDays}, 0, 1)"
          Period: 10800
      DatapointsToAlarm: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Threshold: 1

  RaddSSLCertCheckExpirationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${SSLCertExpirationCheckLambdaName}"
      RetentionInDays: 14

  SSLCertCheckExpirationLambdaAlarm:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - RaddSSLCertCheckExpirationLogGroup
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/lambda-alarms.yaml"
      Parameters:
        FunctionName: !Ref SSLCertCheckExpirationLambda
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn

  ## SYNTHETIC MONITORING
  SyntheticsMonitorBucket:
    Condition: IsCoreAccount
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub syntheticsmonitor-results-${AWS::Region}-${AWS::AccountId}
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldArtifacts
            Status: Enabled
            ExpirationInDays: 30
            Prefix: ''
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  SyntheticsMonitorRole:
    Condition: IsCoreAccount
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - synthetics.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SyntheticsMonitorExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetBucketLocation
                  - s3:ListAllMyBuckets
                  - cloudwatch:PutMetricData
                Resource: "*"

  SyntheticsMonitorCanaryPortals:
    Condition: IsCoreAccount
    Type: AWS::Synthetics::Canary
    Properties:
      Name: !Sub syntheticsmonitor-portals-${AWS::AccountId}
      Code:
        Handler: index.handler
        Script: |
          const { URL } = require('url');
          const synthetics = require('Synthetics');
          const log = require('SyntheticsLogger');
          const syntheticsConfiguration = synthetics.getConfiguration();
          const syntheticsLogHelper = require('SyntheticsLogHelper');

          const loadBlueprint = async function () {
              const endpoints = process.env.ENDPOINTS;
              if (!endpoints) {
                  throw new Error("ENDPOINTS environment variable is not defined.");
              }

              const urls = endpoints.split(',');
              const takeScreenshot = true;

              syntheticsConfiguration.disableStepScreenshots();
              syntheticsConfiguration.setConfig({
                  continueOnStepFailure: true,
                  includeRequestHeaders: true,
                  includeResponseHeaders: true,
                  restrictedHeaders: [],
                  restrictedUrlParameters: []
              });

              const page = await synthetics.getPage();

              for (const url of urls) {
                  await loadUrl(page, url.trim(), takeScreenshot);
              }
          };

          const resetPage = async function(page) {
              try {
                  await page.goto('about:blank', { waitUntil: ['load', 'networkidle0'], timeout: 30000 });
              } catch (e) {
                  synthetics.addExecutionError('Unable to open a blank page. ' + e.message, e);
              }
          };

          const loadUrl = async function (page, url, takeScreenshot) {
              let stepName = null;
              let domcontentloaded = false;

              try {
                  stepName = new URL(url).hostname;
              } catch (e) {
                  const errorString = "Error parsing url: " + url + ". " + e.message;
                  log.error(errorString);
                  throw e;
              }

              await synthetics.executeStep(stepName, async function () {
                  const sanitizedUrl = syntheticsLogHelper.getSanitizedUrl(url);
                  const response = await page.goto(url, { waitUntil: ['domcontentloaded'], timeout: 30000 });
                  if (response) {
                      domcontentloaded = true;
                      const status = response.status();
                      const statusText = response.statusText();
                      log.info("Response from url: " + sanitizedUrl + "  Status: " + status + "  Status Text: " + statusText);
                      if (status < 200 || status > 299) {
                          throw new Error("Failed to load url: " + sanitizedUrl + " " + status + " " + statusText);
                      }
                  } else {
                      const logNoResponseString = "No response returned for url: " + sanitizedUrl;
                      log.error(logNoResponseString);
                      throw new Error(logNoResponseString);
                  }
              });

              if (domcontentloaded && takeScreenshot) {
                  await new Promise(r => setTimeout(r, 15000));
                  await synthetics.takeScreenshot(stepName, 'loaded');
              }

              await resetPage(page);
          };

          exports.handler = async () => {
              return await loadBlueprint();
          };
      ExecutionRoleArn: !GetAtt SyntheticsMonitorRole.Arn
      RuntimeVersion: syn-nodejs-puppeteer-10.0
      Schedule:
        Expression: rate(5 minutes)
        DurationInSeconds: 0
      RunConfig:
        EnvironmentVariables:
          ENDPOINTS: !Ref SyntheticsMonitorEndpoints
        TimeoutInSeconds: !Ref SyntheticsMonitorTimeout
        MemoryInMB: 960
      ArtifactS3Location: !Sub "s3://syntheticsmonitor-results-${AWS::Region}-${AWS::AccountId}/SyntheticsMonitorCanaryPortalsResult/"
      StartCanaryAfterCreation: true

  SyntheticsMonitorCanaryApi:
    Condition: IsCoreAccount
    Type: AWS::Synthetics::Canary
    Properties:
      Name: !Sub syntheticsmonitor-api-${AWS::AccountId}
      Code:
        Handler: index.handler
        Script: |
          const synthetics = require('Synthetics');
          const log = require('SyntheticsLogger');
          const https = require('https');
          const syntheticsConfiguration = synthetics.getConfiguration();

          syntheticsConfiguration.setConfig({
              continueOnStepFailure: false,
              includeRequestHeaders: true,
              includeResponseHeaders: true,
              restrictedHeaders: [],
              restrictedUrlParameters: []
          });

          const endpoints = process.env.ENDPOINTSAPI;
          if (!endpoints) {
              throw new Error("Missing ENDPOINTSAPI environment variable");
          }

          const urls = endpoints.split(',');

          const apiCheck = async function () {
              for (const rawUrl of urls) {
                  const url = rawUrl.trim();
                  const parsedUrl = new URL(url);
                  const stepName = parsedUrl.hostname;

                  await synthetics.executeStep(stepName, async function () {
                      const requestOptions = {
                          hostname: parsedUrl.hostname,
                          method: 'GET',
                          path: parsedUrl.pathname || '/',
                          port: 443,
                          headers: {
                              'User-Agent': 'CloudWatchSyntheticsCanary'
                          }
                      };

                      await new Promise((resolve, reject) => {
                          const req = https.request(requestOptions, (res) => {
                              const statusCode = res.statusCode;
                              log.info(`URL: ${url} - Status code: ${statusCode}`);

                              if ((statusCode >= 200 && statusCode < 300) || statusCode === 403) {
                                  log.info(`Accepted status: ${statusCode} from ${url}`);
                                  resolve();
                              } else {
                                  reject(new Error(`Unexpected status: ${statusCode} from ${url}`));
                              }
                          });

                          req.on('error', (err) => {
                              reject(new Error(`Request failed for ${url}: ${err.message}`));
                          });

                          req.end();
                      });
                  });
              }
          };

          exports.handler = async () => {
              return await apiCheck();
          };
      ExecutionRoleArn: !GetAtt SyntheticsMonitorRole.Arn
      RuntimeVersion: syn-nodejs-puppeteer-10.0
      Schedule:
        Expression: rate(5 minutes)
        DurationInSeconds: 0
      RunConfig:
        EnvironmentVariables:
          ENDPOINTSAPI: !Ref SyntheticsMonitorEndpointsApi
        TimeoutInSeconds: !Ref SyntheticsMonitorTimeout
        MemoryInMB: 960
      ArtifactS3Location: !Sub "s3://syntheticsmonitor-results-${AWS::Region}-${AWS::AccountId}/SyntheticsMonitorCanaryApiResult/"
      StartCanaryAfterCreation: true

Outputs:
  OOMAlarmArn:
    Value: !GetAtt CloudWatchAlarmOOM.Arn
    Description: 'ARN of cloudwatch out of memory alarm'

  LogsKinesisGetRecordsIteratorAgeAlarmArn:
    Value: !GetAtt LogsKinesisGetRecordsIteratorAgeAlarm.Arn

  CdcKinesisGetRecordsIteratorAgeAlarmArn:
    Value: !GetAtt CdcKinesisGetRecordsIteratorAgeAlarm.Arn

  CompositeMetricGeneratorAlarmArn: 
    Value: !GetAtt CompositeMetricGeneratorAlarm.Outputs.LambdaInvocationErrorLogsMetricAlarm
    Description: 'ARN of composite metric generator alarm'

  
  DiagnosticTrailArn:
    Value: !GetAtt DiagnosticLambdaCloudTrail.Arn
    Description: 'ARN of diagnostic lambda cloudtrail'