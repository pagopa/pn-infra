AWSTemplateFormatVersion: 2010-09-09
Description: This templates enriches messages received from CloudWatch, CodePipeline and CodeBuild

Parameters:
  AlarmSNSTopicName:
    Description: The name of the existing Alarm SNS Topic for notifications.
    Type: String
  
  SlackInfo:
    Type: String
    Description: <slack workspace id>:<slack channel id>. 
  
  TemplateBucketBaseUrl:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'

  QueueName:
    Type: String
    Description:  Queue Name
    Default: 'Message-Enrichment'

  DelaySeconds:
    Description: 'The time in seconds that the delivery of all messages in the queue
      is delayed. You can specify an integer value of 0 to 900 (15 minutes).'
    Type: Number
    Default: '0'

  SNSNotificationToSlackName:
    Description: Name for SNS Topic to send enriched messages to slack.
    Type: String
    Default: 'pn-bot-sns'
  
  MessageRetentionPeriod:
    Description: 'The number of seconds that Amazon SQS retains a message. You can
      specify an integer value from 60 seconds (1 minute) to 1209600 seconds (14 days). '
    Type: Number
    Default: '600'

  MaxReceiveCount:
    Description: 'The number of times a message is delivered to the source queue before
      being moved to the dead-letter queue'
    Type: Number
    Default: '5'

  DeadLetterMessageRetentionPeriod:
    Description: 'The number of seconds that the DLQ retains a message. You can
      specify an integer value from 60 seconds (1 minute) to 1209600 seconds (14 days). '
    Type: Number
    Default: '1209600'
  
  VisibilityTimeout: 
    Description: The length of time during which a message will be unavailable after a message is delivered from the queue.
    Type: Number
    Default: '15'
  
Resources:
  MessageEnrichmentQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref QueueName
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: !Ref MaxReceiveCount
      DelaySeconds: !Ref DelaySeconds
      MessageRetentionPeriod: !Ref MessageRetentionPeriod
      ReceiveMessageWaitTimeSeconds: 15
      VisibilityTimeout: !Ref VisibilityTimeout

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${QueueName}-DLQ"
      MessageRetentionPeriod: !Ref DeadLetterMessageRetentionPeriod

  MyQueueEventBridgePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref MessageEnrichmentQueue
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowMessages
            Effect: Allow
            Principal: 
              Service: 
              - sns.amazonaws.com 
            Action: SQS:SendMessage
            Resource: !GetAtt MessageEnrichmentQueue.Arn
          - Sid: AllowLambdaaccess
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - SQS:SendMessage
              - SQS:ReceiveMessage
              - SQS:DeleteMessage
              - SQS:GetQueueAttributes
            Resource: !GetAtt MessageEnrichmentQueue.Arn

  EventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: true
      BatchSize: 10
      EventSourceArn: !GetAtt MessageEnrichmentQueue.Arn
      FunctionName: !GetAtt MessageCustomizationLambda.Arn

  SNSTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties: 
      Endpoint: !GetAtt MessageEnrichmentQueue.Arn
      Protocol: sqs
      TopicArn: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}'

  SNSTopicToSlack:
    Type: AWS::SNS::Topic
    Properties: 
      Subscription: 
        - Endpoint: 'https://global.sns-api.chatbot.amazonaws.com'
          Protocol: https
      TopicName: !Ref SNSNotificationToSlackName
  

  # - Connect enriched message SNS slack
  AlarmSNSTopicSlackConnection:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/sns-topic-to-slack-channel.yaml"
      Parameters:
        SNSTopicArn: !Ref SNSTopicToSlack
        SlackInfo: !Ref SlackInfo
        TopicName: 'enriched-dev-alarms'

  SNSTopicToSlackPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties: 
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Sid: AllowServices
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sns:Publish
          Resource: !Ref SNSTopicToSlack
      Topics: 
        - !Ref SNSTopicToSlack
        
  MessageCustomizationLambda:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: |
          import json
          import boto3
          import os
          import traceback

          def lambda_handler(event, context):
              success = {}

              if(event is not None):
                  try:
                      print(event)
                      success = publish_message(event)
                      
                  except Exception as e:
                      print(e)
                      success = {
                          'statusCode': 400,
                          'body': json.dumps("Check error logs.")
                      }
              else:
                  success = {
                      'statusCode': 500,
                      'body': json.dumps('Message event is empty.')
                  }
                  
              return success
              
          def publish_message(event):
            data = {}
            statusCode = 0  
            body = ''
            
            if event is not None:
                try:
                    body = json.loads(event['Records'][0]['body'])
                    region = event['Records'][0]['awsRegion']
                    sqs_message = json.loads(body['Message'])
                    SlackSNSTopic = os.environ['SlackSNSTopic']
                    sns = boto3.client('sns')
                    print('########### INPUT MESSAGE #############')
                    print(sqs_message)
                                                  
                    if 'AlarmName' in sqs_message:
                        #Message type is an Alarm message
                        _message=sqs_message
                    elif 'alarmName' in sqs_message:
                        # Message type is an Alarm State Change
                        if sqs_message['alarmName']=='pn-LambdaAllAlarmSnsPublisher-Alarm':
                          _message=sqs_message
                    else:
                        #Message not Alarm type - Handle CodeBuild/CodePipeline
                        resource_source = sqs_message['source']
                        account_id = sqs_message['account']
                        time = sqs_message['time']
                        region = sqs_message['region']
                        caller_id = sqs_message['id']
                        caller_version = sqs_message['version']
                
                        if resource_source == "aws.codebuild":
                            project_name = sqs_message['detail']['project-name']
                            if project_name == "pn-RunE2eTestsCodeBuildProject":
                                cloudwatch_logs = sqs_message['detail']['additional-information']['logs']['deep-link']
                                resource_message = "TEST E2E FALLITI" 
                                resource_data = [
                                        "arn:" + cloudwatch_logs
                                    ]
                            else:
                                resource_data = []
                            
                        elif resource_source == "aws.codepipeline":
                            pipeline = sqs_message['detail']['pipeline']
                            resource_message = "PIPELINE " + pipeline + " FALLITA" 
                            resource_data = []
                        else:
                            resource_message = json.dumps( sqs_message )
                            resource_data = []
                            
                        
                        _message = {
                            "version":caller_version,
                            "id":caller_id,
                            "detail-type":resource_message,
                            "source":"aws.ecr",
                            "account":account_id,
                            "time":time,
                            "region": region,
                            "resources": resource_data,
                            "detail":{
                                "result":"SUCCESS",
                                "image-digest":"sha256:7f5b2640fe6fb4f46592dfd3410c4a79dac4f89e4782432e0378abcd1234",
                                "action-type":"PUSH",
                                "image-tag":"latest"
                            }
                        }
                    
                    print('########### OUTPUT MESSAGE #############')
                    print(_message)
                    if _message is not None:
                        response = sns.publish(
                            TopicArn=SlackSNSTopic,
                            Message=json.dumps(_message),
                            MessageStructure='string',
                        )
                    
                    statusCode = 200
                    body = "Success"

                except Exception as e:
                    traceback.print_exc()
                    print("Exception in publishing message: ", e)
                    statusCode = 400
                    body = "Client_Error"
            else:
                print("Event is empty")
                statusCode = 500
                body = "Server_Error"
                
            data = {
                'statusCode': statusCode,
                'body': json.dumps(body)
            }
            
            return data

      Description: AWS Lambda function to customize CloudWatch Alarm notification
      Environment: 
        Variables:  
          SlackSNSTopic: !Ref SNSTopicToSlack
      FunctionName: !Sub ${QueueName}-message-enrich-lambda
      Handler: index.lambda_handler
      Role: !GetAtt MessageCustomizationLambdaRole.Arn
      Runtime: python3.9
      Timeout: 15 #Queue wait time should be equal or greater then timeout

  # Lambda Execution role 
  MessageCustomizationLambdaRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
      Description: AWS IAM Role for Lambda execution role
      Path: /
      RoleName: !Sub ${QueueName}-Role

  # Lambda Policy  
  MessageCustomizationLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyDocument:
        Version: 2012-10-17
        Statement: 
          - Sid: InvokeLambda
            Effect: Allow
            Action: lambda:InvokeFunction
            Resource: !GetAtt MessageCustomizationLambda.Arn
          - Sid: PublishToSNS
            Effect: Allow
            Action: sns:Publish
            Resource: 
              - !Ref SNSTopicToSlack
          - Sid: AllowSQSAccess
            Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:ChangeMessageVisibility
            Resource: !GetAtt MessageEnrichmentQueue.Arn
          - Sid: AllowAccessToLogs
            Effect: Allow
            Action: 
              - logs:DescribeLogStreams
              - logs:DescribeMetricFilters
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
      PolicyName: !Sub ${QueueName}-Policy
      Roles: 
        - !Ref MessageCustomizationLambdaRole
