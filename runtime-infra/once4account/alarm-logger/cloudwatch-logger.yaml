AWSTemplateFormatVersion: 2010-09-09
Description: This templates enriches messages received from CloudWatch, CodePipeline and CodeBuild

Parameters:
  AlarmSNSTopicName:
    Description: The name of the existing Alarm SNS Topic for notifications.
    Type: String
  
  TemplateBucketBaseUrl:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'

  QueueName:
    Type: String
    Description:  Queue Name
    Default: 'Alarms-Logger'

  DelaySeconds:
    Description: 'The time in seconds that the delivery of all messages in the queue
      is delayed. You can specify an integer value of 0 to 900 (15 minutes).'
    Type: Number
    Default: '0'

  MessageRetentionPeriod:
    Description: 'The number of seconds that Amazon SQS retains a message. You can
      specify an integer value from 60 seconds (1 minute) to 1209600 seconds (14 days). '
    Type: Number
    Default: '600'

  MaxReceiveCount:
    Description: 'The number of times a message is delivered to the source queue before
      being moved to the dead-letter queue'
    Type: Number
    Default: '5'

  DeadLetterMessageRetentionPeriod:
    Description: 'The number of seconds that the DLQ retains a message. You can
      specify an integer value from 60 seconds (1 minute) to 1209600 seconds (14 days). '
    Type: Number
    Default: '1209600'
  
  VisibilityTimeout: 
    Description: The length of time during which a message will be unavailable after a message is delivered from the queue.
    Type: Number
    Default: '15'
  
  RetentionInDays:
    Type: Number
    Default: '14'

Resources:

  LoggerNotificationQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref QueueName
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: !Ref MaxReceiveCount
      DelaySeconds: !Ref DelaySeconds
      MessageRetentionPeriod: !Ref MessageRetentionPeriod
      ReceiveMessageWaitTimeSeconds: 15
      VisibilityTimeout: !Ref VisibilityTimeout

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${QueueName}-DLQ"
      MessageRetentionPeriod: !Ref DeadLetterMessageRetentionPeriod

  MyQueueEventBridgePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref LoggerNotificationQueue
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowMessages
            Effect: Allow
            Principal: 
              Service: 
              - sns.amazonaws.com 
            Action: SQS:SendMessage
            Resource: !GetAtt LoggerNotificationQueue.Arn
          - Sid: AllowLambdaaccess
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - SQS:SendMessage
              - SQS:ReceiveMessage
              - SQS:DeleteMessage
              - SQS:GetQueueAttributes
            Resource: !GetAtt LoggerNotificationQueue.Arn

  EventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: true
      BatchSize: 1
      EventSourceArn: !GetAtt LoggerNotificationQueue.Arn
      FunctionName: !GetAtt LoggerNotificationLambda.Arn

  SNSTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties: 
      Endpoint: !GetAtt LoggerNotificationQueue.Arn
      Protocol: sqs
      TopicArn: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}'

  LoggerNotificationLambda:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: |
          exports.handler = (event, context) => {
            if(event.Records && event.Records.length>0){
              console.log(event.Records[0].body)
            }

            return {
              status: 200,
              message: 'Logged'
            }
          }
      Description: AWS Lambda function to customize CloudWatch Alarm notification
      FunctionName: pn-all-alarms-log
      Handler: index.handler
      Role: !GetAtt LoggerNotificationLambdaRole.Arn
      Runtime: nodejs18.x
      Timeout: 15 #Queue wait time should be equal or greater then timeout

  CoreEventBusMatchedEventsLoggerFnLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/pn-all-alarms-log
      RetentionInDays: !Ref RetentionInDays

  # Lambda Execution role 
  LoggerNotificationLambdaRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
      Description: AWS IAM Role for Lambda execution role
      Path: /
      RoleName: !Sub ${QueueName}-Role

  # Lambda Policy  
  LoggerNotificationLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyDocument:
        Version: 2012-10-17
        Statement: 
          - Sid: InvokeLambda
            Effect: Allow
            Action: lambda:InvokeFunction
            Resource: !GetAtt LoggerNotificationLambda.Arn
          - Sid: AllowSQSAccess
            Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:ChangeMessageVisibility
            Resource: !GetAtt LoggerNotificationQueue.Arn
          - Sid: AllowAccessToLogs
            Effect: Allow
            Action: 
              - logs:DescribeLogStreams
              - logs:DescribeMetricFilters
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
      PolicyName: !Sub ${QueueName}-Policy
      Roles: 
        - !Ref LoggerNotificationLambdaRole
