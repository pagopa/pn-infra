AWSTemplateFormatVersion: "2010-09-09"
Description: "API Gateway used by CN"

Transform:
  - UpdateDeploymentTransform

Parameters:
  ProjectName:
    Type: String

  CNApiDnsName:
    Type: String
    Description: 'DNS custom domain for CN API'

  ConfidentialInfoAccountId:
    Type: String

  #SNS Topic Alarm Arn and Name
  AlarmSNSTopicArn:
    Type: String
    Description: "An ARN of an SNS topic where to send alarm when log line includes ERROR or FATAL" 

  CNLatencyLimit:
    Type: Number
    Default: '2000'

  EnvironmentType:
    Type: String

Conditions:
  IsNotProd: !Not [ !Equals [ !Ref EnvironmentType, 'prod' ]]
  IsNotUat: !Not [ !Equals [ !Ref EnvironmentType, 'uat' ]]
  IsCNEnabled: !Or [ !Condition IsNotProd, !Condition IsNotUat ]

Resources:

###               TOKEN EXCHANGE SERVICE                ###
  ###########################################################
  
  # API definition
  CNRestApi:
    Condition: IsCNEnabled
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-cn-api'
      FailOnWarnings: true
      DisableExecuteApiEndpoint: true
      EndpointConfiguration:
        Types:
          - REGIONAL

  # Deployment
  CNRestApiDeployment:
    Condition: IsCNEnabled
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - CNRequestUrlMethod
      - CNEventUpdateMethod
    Properties:
      RestApiId: !Ref CNRestApi

  # Stage
  CNRestApiStage:
    Condition: IsCNEnabled
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref CNRestApi
      StageName: unique
      TracingEnabled: true
      DeploymentId: !Ref CNRestApiDeployment
      AccessLogSetting:
        DestinationArn: !GetAtt "CNApiLogGroup.Arn"
        Format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","resourcePath":"$context.resourcePath","status":$context.status,"responseLatency":$context.responseLatency,"xrayTraceId":"$context.xrayTraceId","errorMessage":"$context.error.message","validationError":"$context.error.validationErrorString","integrationRequestId":"$context.integration.requestId","functionResponseStatus":"$context.integration.status","integrationLatency":"$context.integration.latency","integrationServiceStatus":"$context.integration.integrationStatus","ip":"$context.identity.sourceIp","userAgent":"$context.identity.userAgent"}'
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          MetricsEnabled: 'true'
          DataTraceEnabled: 'false'
          LoggingLevel: 'INFO'

  # Log Group
  CNApiLogGroup:
    Condition: IsCNEnabled
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14

  # Expose API to custom domain
  APIMapping:
    Condition: IsCNEnabled
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: 'cn'
      DomainName: !Ref CNApiDnsName
      RestApiId: !Ref CNRestApi
      Stage: !Ref CNRestApiStage

  # /{proxy+} resource
  PublicApiProxyResource:
    Condition: IsCNEnabled
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref CNRestApi
      ParentId: !GetAtt CNRestApi.RootResourceId
      PathPart: '{proxy+}'

  # GET method
  CNRequestUrlMethod:
    Condition: IsCNEnabled
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: 'Proxy to Pre Signed Url Generator Lambda'
      RestApiId: !Ref CNRestApi
      ResourceId: !Ref PublicApiProxyResource
      HttpMethod: GET
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${ConfidentialInfoAccountId}:function:${ProjectName}-preSignedUrlGenerator/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        ContentHandling: CONVERT_TO_TEXT
        TimeoutInMillis: 29000

  # POST method
  CNEventUpdateMethod:
    Condition: IsCNEnabled
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: 'Pre signed url'
      RestApiId: !Ref CNRestApi
      ResourceId: !Ref PublicApiProxyResource
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${ConfidentialInfoAccountId}:function:${ProjectName}-eventUpdateRecevier/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        ContentHandling: CONVERT_TO_TEXT
        TimeoutInMillis: 29000


  CNAPIGatewayApiLatencyAlarm:
    Condition: IsCNEnabled
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "oncall-${ProjectName}-cn-api-LatencyAlarm"
      AlarmDescription: "CloudWatch alarm for when API Gateway latency exceeds the limit."
      AlarmActions: 
        - !Ref AlarmSNSTopicArn
      InsufficientDataActions:
        - !Ref AlarmSNSTopicArn
      OKActions:
        - !Ref AlarmSNSTopicArn
      DatapointsToAlarm: 15
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 20
      Period: 60
      Threshold: !Ref CNLatencyLimit
      TreatMissingData: notBreaching
      Namespace: "AWS/ApiGateway"
      MetricName: "Latency"
      Dimensions:
        - Name: ApiName
          Value: !Sub '${ProjectName}-cn-api'
      ExtendedStatistic: "p90"

  CNAPIGatewayApiErrorAlarm:
    Condition: IsCNEnabled
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-cn-api-ErrorAlarm"
      AlarmDescription: "CloudWatch alarm for when API Gateway has 4xx or 5xx error."
      AlarmActions: 
        - !Ref AlarmSNSTopicArn
      InsufficientDataActions:
        - !Ref AlarmSNSTopicArn
      OKActions:
        - !Ref AlarmSNSTopicArn
      DatapointsToAlarm: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 5
      Threshold: 1
      TreatMissingData: notBreaching
      Metrics:
        - Id: m1
          MetricStat:
            Metric:
              Dimensions:
                - Name: ApiName
                  Value: !Sub ${ProjectName}-cn-api
              MetricName: 4XXError
              Namespace: AWS/ApiGateway
            Period: 60
            Stat: Sum
          ReturnData: False
        - Id: m2
          MetricStat:
            Metric:
              Dimensions:
                - Name: ApiName
                  Value: !Sub ${ProjectName}-cn-api
              MetricName: 5XXError
              Namespace: AWS/ApiGateway
            Period: 60
            Stat: Sum
          ReturnData: False
        - Id: e2
          Expression: "m1*(0.1)"
          Label: "4XXError-weight-adjust"
          ReturnData: False
        - Id: e1
          Expression: SUM([e2,m2])
          Label: !Sub "${ProjectName}-cn-api-ErrorMetric"

  CNAPIGatewayApiErrorAlarmWakeup:
    Condition: IsCNEnabled
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "oncall-${ProjectName}-cn-api-ErrorAlarm"
      AlarmDescription: "CloudWatch alarm for when API Gateway has 4xx or 5xx error."
      AlarmActions: 
        - !Ref AlarmSNSTopicArn
      InsufficientDataActions:
        - !Ref AlarmSNSTopicArn
      OKActions:
        - !Ref AlarmSNSTopicArn
      DatapointsToAlarm: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 5
      Threshold: 1
      TreatMissingData: notBreaching
      Metrics:
        - Id: m1
          MetricStat:
            Metric:
              Dimensions:
                - Name: ApiName
                  Value: !Sub ${ProjectName}-cn-api
              MetricName: 4XXError
              Namespace: AWS/ApiGateway
            Period: 60
            Stat: Sum
          ReturnData: False
        - Id: m2
          MetricStat:
            Metric:
              Dimensions:
                - Name: ApiName
                  Value: !Sub ${ProjectName}-cn-api
              MetricName: 5XXError
              Namespace: AWS/ApiGateway
            Period: 60
            Stat: Sum
          ReturnData: False
        - Id: m3
          MetricStat:
            Metric:
              Dimensions:
                - Name: ApiName
                  Value: !Sub '${ProjectName}-cn-api'
              MetricName: Count
              Namespace: AWS/ApiGateway
            Period: 60
            Stat: Sum
          ReturnData: False          
        - Id: e1
          Expression: IF(m3>=10 AND (m1/m3>=0.9 OR m2/m3>=0.1), 1, 0)
          Label: !Sub "${ProjectName}-cn-api-ErrorMetric-OnCall"   

  CNUsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    Condition: IsCNEnabled
    Properties:
      UsagePlanName: CN_BE
      ApiStages:
        - ApiId: !Ref CNRestApi
          Stage: !Ref CNRestApiStage 
      Description: Usage Plan for CN
      Quota:
        Limit: 1000000
        Period: DAY
      Throttle:
        BurstLimit: 200
        RateLimit: 100