AWSTemplateFormatVersion: "2010-09-09"

Description: |
  CloudFormation definition of elasticache cluster

Parameters:
  ProjectName:
    Type: String
    Description: Name of the project

  NodeType:
    Type: String
    Description: Cache node type (i.e. cache.t2.micro)

  Replicas:
    Type: Number
    Description: Number of nodes

  VpcSubnets:
    Type: "List<AWS::EC2::Subnet::Id>"
    Description: Private subnets to deploy resources into

  VpcId:
    Type: "AWS::EC2::VPC::Id"
    Description: VPC id for the cluster

Resources:

  RedisServerless:
    Type: AWS::ElastiCache::ServerlessCache
    Properties:
      ServerlessCacheName: !Sub ${ProjectName}-redis-serverless
      Engine: redis
      Description: Redis Serverless Cache for Logextractor
      MajorEngineVersion: 7
      SecurityGroupIds:
        - !GetAtt SecurityGroup.GroupId
      SubnetIds: !Ref VpcSubnets
      KmsKeyId: !Ref RedisServerlessEncryptionKey

  RedisServerlessEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Redis Serverless Cache Encryption Key
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              Service: elasticache.amazonaws.com
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'

  SubnetGroup:
    Type: "AWS::ElastiCache::SubnetGroup"
    Properties:
      Description: Cache Subnet Group
      SubnetIds: !Ref VpcSubnets

  AllowedSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Earn permissions to access cache
      GroupName: !Sub ${ProjectName}-cache
      VpcId: !Ref VpcId

  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Open Redis port
      GroupName: !Sub ${ProjectName}-redis
      SecurityGroupIngress:
        - FromPort: 6379
          IpProtocol: tcp
          SourceSecurityGroupId: !GetAtt AllowedSecurityGroup.GroupId
          ToPort: 6380
      VpcId: !Ref VpcId

  RedisReplicationGroup:
    Type: "AWS::ElastiCache::ReplicationGroup"
    Properties:
      AtRestEncryptionEnabled: true
      TransitEncryptionEnabled: false
      CacheNodeType: !Ref NodeType
      AutoMinorVersionUpgrade: true
      AutomaticFailoverEnabled: false
      CacheSubnetGroupName: !Ref SubnetGroup
      Engine: redis
      ReplicationGroupDescription:
        Fn::Sub: ${ProjectName}-redis-replication-group
      ReplicasPerNodeGroup: !Ref Replicas
      SecurityGroupIds:
         - "Fn::GetAtt":
            - SecurityGroup
            - GroupId

Outputs:
  AllowedSecurityGroupId:
    Description: The id of the security group that can access the cache cluster
    Value: !GetAtt AllowedSecurityGroup.GroupId

  RedisEndpoint:
    Description: The endpoint Address for Redis serverless
    Value:
      Fn::GetAtt:
        - RedisServerless
        - Endpoint.Address

  RedisCurrentConnectionsAlarmArn:
    Value: ""

  RedisMemoryUtilizationAlarm:
    Value: ""

  RedisCPUUtilizationAlarm:
    Value: ""

  RedisEngineCPUAlarm:
    Value: ""