AWSTemplateFormatVersion: "2010-09-09"
Description: "API Gateway used by CN"

Transform:
  - UpdateDeploymentTransform

Parameters:

  ProjectName:
    Type: String

  EnvironmentType:
    Type: String

  VpcId:
    Type: AWS::EC2::VPC::Id

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>

  SafeStorageBaseUrl:
    Type: String

  ApplicationLoadBalancerDomain:
    Type: String
  
Conditions:
  IsDev: !Equals [ !Ref EnvironmentType, 'dev' ]

Resources:

###               TOKEN EXCHANGE SERVICE                ###
  ###########################################################
  
  # API definition
  RestApi:
    Condition: IsDev
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-credentials-generator-api'
      FailOnWarnings: true
      EndpointConfiguration:
        Types:
          - REGIONAL

  # Deployment
  RestApiDeployment:
    Condition: IsDev
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - CredentialGeneratorMethod
    Properties:
      RestApiId: !Ref RestApi

  # Stage
  RestApiStage:
    Condition: IsDev
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref RestApi
      StageName: unique
      TracingEnabled: true
      DeploymentId: !Ref RestApiDeployment
      AccessLogSetting:
        DestinationArn: !GetAtt "ApiLogGroup.Arn"
        Format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","resourcePath":"$context.resourcePath","status":$context.status,"responseLatency":$context.responseLatency,"xrayTraceId":"$context.xrayTraceId","errorMessage":"$context.error.message","validationError":"$context.error.validationErrorString","integrationRequestId":"$context.integration.requestId","functionResponseStatus":"$context.integration.status","integrationLatency":"$context.integration.latency","integrationServiceStatus":"$context.integration.integrationStatus","ip":"$context.identity.sourceIp","userAgent":"$context.identity.userAgent"}'
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          MetricsEnabled: 'true'
          DataTraceEnabled: 'false'
          LoggingLevel: 'INFO'

  # Log Group
  ApiLogGroup:
    Condition: IsDev
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14

  # /generate resource
  PublicApiProxyResource:
    Condition: IsDev
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: 'generate'

  # POST method
  CredentialGeneratorMethod:
    Condition: IsDev
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: 'Credentials generator'
      RestApiId: !Ref RestApi
      ResourceId: !Ref PublicApiProxyResource
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ProjectName}-credentials-generator/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        ContentHandling: CONVERT_TO_TEXT
        TimeoutInMillis: 29000


  UsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    Condition: IsDev
    Properties:
      UsagePlanName: DEV_GENERATOR
      ApiStages:
        - ApiId: !Ref RestApi
          Stage: !Ref RestApiStage 
      Description: Usage Plan for credentials generator api
      Quota:
        Limit: 1000000
        Period: DAY
      Throttle:
        BurstLimit: 200
        RateLimit: 100


  # #########################################################
  # ###        Credentials Generator Lambda               ###
  # #########################################################

  # Application security groups
  LambdaProxySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectName}-credentials-generator-security-group
      GroupDescription: "Lambda Credentials Generator ecurity group"
      VpcId: !Ref VpcId

  # # Lambda function
  CredentialsGeneratorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-credentials-generator
      Runtime: nodejs18.x
      Handler: "index.handler"
      Code: 
        ZipFile: |
          exports.handler = async(event) => {
            console.log(JSON.stringify(event))

            const response = {
              statusCode: 200,
              body: JSON.stringify({ message: 'OK' })
            }

            return response;              
          };
      Role: !GetAtt CredentialsGeneratorLambdaRole.Arn
      Environment:
        Variables:
          REGION: !Sub ${AWS::Region}
          ENV_TYPE: !Ref EnvironmentType
          EXTERNAL_REG_BASE_PATH: !Ref ApplicationLoadBalancerDomain
          DATA_VAULT_BASE_PATH: !Ref SafeStorageBaseUrl
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt LambdaProxySecurityGroup.GroupId
        SubnetIds: !Ref Subnets
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"
      Timeout: 10

  # # Lambda function role
  CredentialsGeneratorLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-credentials-generator-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  CredentialsGeneratorLambdaRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${ProjectName}-credentials-generator-role-policy
      Roles:
        - !Ref CredentialsGeneratorLambdaRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowLambdaToCreateLogs
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: "*"   
          - Sid: Encrypt
            Action:
              - kms:DescribeKey
              - kms:Sign
            Effect: Allow
            Resource: "*"               

  # # Lambda access right
  EventUpdateReceiverLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: IsDev
    Properties:
      FunctionName: !Ref CredentialsGeneratorLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:*/*'