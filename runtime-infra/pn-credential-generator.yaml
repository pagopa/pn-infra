AWSTemplateFormatVersion: "2010-09-09"
Description: "API Gateway used by CN"

Transform:
  - UpdateDeploymentTransform

Parameters:

  ProjectName:
    Type: String

  EnvironmentType:
    Type: String

  VpcId:
    Type: AWS::EC2::VPC::Id

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>

  SafeStorageBaseUrl:
    Type: String

  ApplicationLoadBalancerDomain:
    Type: String
  
Conditions:
  IsDev: !Equals [ !Ref EnvironmentType, 'dev' ]

Resources:

###               TOKEN EXCHANGE SERVICE                ###
  ###########################################################
  
  # API definition
  RestApi:
    Condition: IsDev
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-credentials-generator-api'
      FailOnWarnings: true
      EndpointConfiguration:
        Types:
          - REGIONAL

  # Deployment
  RestApiDeployment:
    Condition: IsDev
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - CredentialGeneratorMethod
    Properties:
      RestApiId: !Ref RestApi

  # Stage
  RestApiStage:
    Condition: IsDev
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref RestApi
      StageName: unique
      TracingEnabled: true
      DeploymentId: !Ref RestApiDeployment
      AccessLogSetting:
        DestinationArn: !GetAtt "ApiLogGroup.Arn"
        Format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","resourcePath":"$context.resourcePath","status":$context.status,"responseLatency":$context.responseLatency,"xrayTraceId":"$context.xrayTraceId","errorMessage":"$context.error.message","validationError":"$context.error.validationErrorString","integrationRequestId":"$context.integration.requestId","functionResponseStatus":"$context.integration.status","integrationLatency":"$context.integration.latency","integrationServiceStatus":"$context.integration.integrationStatus","ip":"$context.identity.sourceIp","userAgent":"$context.identity.userAgent"}'
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          MetricsEnabled: 'true'
          DataTraceEnabled: 'false'
          LoggingLevel: 'INFO'

  # Log Group
  ApiLogGroup:
    Condition: IsDev
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14

  # /generate resource
  PublicApiProxyResource:
    Condition: IsDev
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: 'generate'

  # POST method
  CredentialGeneratorMethod:
    Condition: IsDev
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: 'Credentials generator'
      RestApiId: !Ref RestApi
      ResourceId: !Ref PublicApiProxyResource
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ProjectName}-credentials-generator/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        ContentHandling: CONVERT_TO_TEXT
        TimeoutInMillis: 29000


  UsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    Condition: IsDev
    Properties:
      UsagePlanName: DEV_GENERATOR
      ApiStages:
        - ApiId: !Ref RestApi
          Stage: !Ref RestApiStage 
      Description: Usage Plan for credentials generator api
      Quota:
        Limit: 1000000
        Period: DAY
      Throttle:
        BurstLimit: 200
        RateLimit: 100


  # #########################################################
  # ###        Credentials Generator Lambda               ###
  # #########################################################

  # Application security groups
  LambdaProxySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectName}-credentials-generator-security-group
      GroupDescription: "Lambda Credentials Generator ecurity group"
      VpcId: !Ref VpcId

  # # Lambda function
  CredentialsGeneratorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-credentials-generator
      Runtime: nodejs18.x
      Handler: "index.handler"
      Code: 
        ZipFile: |
          exports.handler = async (event, context) => {
              try {
              const results = [];
              console.log('EVENT: ',event);
              const { entries } = event.body? JSON.parse(event.body): event;
          
              let env_type = process.env.ENV_TYPE;
          
              for (const entry of entries) {
                const { taxId, tokenType, paName } = entry;
                if ((!taxId || !tokenType) ||
                  (tokenType !== 'PA' && tokenType !== 'PF' && tokenType !== 'PG') || 
                  (tokenType === 'PA' && !paName)) {
                  return 'ERORR required parameters'
                }
          
                const token = await generateTokenFunction(env_type, taxId, tokenType, paName );
                results.push({ "taxiId": taxId,  "token": token });
              }
          
              console.log('COMPLETE');
          
              return {
                statusCode: 200,
                body: JSON.stringify(results),
              };
            } catch (error) {
              console.log('EVENT: ',event);
              return {
                statusCode: 500,
                body: JSON.stringify({ problem: error }),
              };
            }
          };
          
          
          async function generateTokenFunction(env_type, taxId, tokenType, paName) {
          
          
           const { DynamoDBClient, ScanCommand } = require('@aws-sdk/client-dynamodb');
           const { KMSClient, DescribeKeyCommand, SignCommand } = require('@aws-sdk/client-kms');
          
            let externalReg = `http://${process.env.EXTERNAL_REG_BASE_PATH}:8080/ext-registry/pa/v1/activated-on-pn`;
            let dataVaultBasePath = `${process.env.DATA_VAULT_BASE_PATH}datavault-private/v1/recipients/external/${tokenType}`;
          
            console.log('externalReg ',externalReg);
            console.log('dataVaultBasePath ',dataVaultBasePath)
          
            let uid;
            if (tokenType === 'PF' || tokenType === 'PG') {
              console.log(dataVaultBasePath);
              try {
                const response = await fetch(dataVaultBasePath, {
                  method: 'POST',
                  body: taxId,
                  headers: {
                    'Content-Type': 'text/plain',
                  },
                });
                const responseData = await response.text();
                uid = responseData.substring(3);
                console.log("RESPONSE DATA-VAULT: " + uid);
              } catch (error) {
                console.log(error);
              }
            }
          
            if (tokenType === 'PA') {
              console.log(externalReg + `?paNameFilter=${paName}`);
              try {
                const response = await fetch(externalReg + `?paNameFilter=${paName}`);
                const responseData = await response.json();
                console.log("RESPONSE EXTERNAL-REGISTRIES : " + responseData[0].id);
              } catch (err) {
                console.log(err);
              }
            }
          
            const awsRegion = process.env.REGION;
          
            let organization_id;
          
            console.log("INIT DYNAMO SCAN");
          
            if (tokenType === 'PA' || tokenType === 'PG') {
              const dynamodb = new DynamoDBClient({ region: awsRegion });
              try {
                const dynamoParam = {
                  FilterExpression: "taxCode = :value",
                  ExpressionAttributeValues: {
                    ":value": {
                      "S": taxId
                    }
                  },
                  TableName: "pn-OnboardInstitutions",
                };
          
                let data;
                do{
                  const command = new ScanCommand(dynamoParam);
                  data = await dynamodb.send(command);
                  dynamoParam.ExclusiveStartKey = data.LastEvaluatedKey;
                }while(data.Count !== 1 && (!data.LastEvaluatedKey || data.LastEvaluatedKey !== "undefined"))
          
                organization_id = data.Items[0].externalId.S;
                console.log('Elemento letto dalla tabella:', organization_id);
              } catch (err) {
                console.log('Errore durante la lettura dell\'elemento:', err);
              }
            }
          
            console.log("END DYNAMO SCAN");
          
          
            const keyIdAlias = 'alias/pn-jwt-sign-key';
            const iss = `https://webapi.${env_type}.notifichedigitali.it`;
            const aud = `webapi.${env_type}.notifichedigitali.it`;
          
            const kms = new KMSClient({ region: awsRegion });
            const header = { alg: 'RS256', typ: 'JWT', kid: '' };
          
            const dateNow = Math.floor(Date.now() / 1000);
            const nextYearDate = Math.floor((Date.now() + 31536000000) / 1000);
            let payload;
          
            let rolePg = "pg-admin";
            let rolePa = "admin";
            let aud_pa = `imprese.${env_type}.notifichedigitali.it`;
            let iss_pa = "https://uat.selfcare.pagopa.it";
          
            if (tokenType === 'PF') {
              payload = { iat: dateNow, exp: nextYearDate, uid: uid, iss: iss, aud: aud };
            } else if (tokenType === 'PG') {
              payload = { iat: dateNow, exp: nextYearDate, uid: uid, iss: iss, aud: aud, organization: { id: organization_id, role: rolePg, fiscal_code: taxId } };
            } else if (tokenType === 'PA') {
              payload = { iat: dateNow, exp: nextYearDate, uid: uid, iss: iss_pa, aud: aud_pa, organization: { id: organization_id, role: rolePa, fiscal_code: taxId } };
            }
          
            console.log(JSON.stringify(payload));
          
          
            console.log("INIT KMS DescribeKeyCommand");
          
            const keyIdCommand = new DescribeKeyCommand({ KeyId: keyIdAlias });
            const keyIdResponse = await kms.send(keyIdCommand);
          
            const keyId = keyIdResponse.KeyMetadata.KeyId;
            console.log('KeyId: ',keyId);
          
            header.kid = keyId;
          
            const headerBase64 = Buffer.from(JSON.stringify(header)).toString('base64').replace(/[+/]/g, (char) => (char === '+' ? '-' : '_')).replace(/=+$/, '');
            const payloadBase64 = Buffer.from(JSON.stringify(payload)).toString('base64').replace(/[+/]/g, (char) => (char === '+' ? '-' : '_')).replace(/=+$/, '');
          
            const messageToSign = `${headerBase64}.${payloadBase64}`;
          
          
            console.log("INIT KMS SignCommand");
          
            let token;
            try{
              const input = {
                KeyId: keyId,
                Message: Buffer.from(messageToSign),
                MessageType: 'RAW',
                SigningAlgorithm: 'RSASSA_PKCS1_V1_5_SHA_256',
              };
              const signCommand = new SignCommand(input);
              const signResponse =  await kms.send(signCommand);
          
              console.log(Buffer.from(signResponse.Signature).toString('base64'));
              const signature = Buffer.from(signResponse.Signature).toString('base64').replace(/[+/]/g, (char) => (char === '+' ? '-' : '_')).replace(/=+$/, '');
          
              token =  `${messageToSign}.${signature}`;
            }catch(error){
             console.log('ERROR: ',error)
            }
          
            return token;
          
          };
      Role: !GetAtt CredentialsGeneratorLambdaRole.Arn
      Environment:
        Variables:
          REGION: !Sub ${AWS::Region}
          ENV_TYPE: !Ref EnvironmentType
          EXTERNAL_REG_BASE_PATH: !Ref ApplicationLoadBalancerDomain
          DATA_VAULT_BASE_PATH: !Ref SafeStorageBaseUrl
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt LambdaProxySecurityGroup.GroupId
        SubnetIds: !Ref Subnets
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"
      Timeout: 70

  # # Lambda function role
  CredentialsGeneratorLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-credentials-generator-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess

  CredentialsGeneratorLambdaRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${ProjectName}-credentials-generator-role-policy
      Roles:
        - !Ref CredentialsGeneratorLambdaRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowLambdaToCreateLogs
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: "*"   
          - Sid: Encrypt
            Action:
              - kms:DescribeKey
              - kms:Sign
            Effect: Allow
            Resource: "*"               

  # # Lambda access right
  EventUpdateReceiverLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: IsDev
    Properties:
      FunctionName: !Ref CredentialsGeneratorLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:*/*'