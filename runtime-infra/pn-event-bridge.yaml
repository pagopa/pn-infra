AWSTemplateFormatVersion: 2010-09-09
Description: 'This template deploys the queues needed for comuication between microservices and 
              API gateway custom domains'

Parameters:
  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'

  SafeStorageAccountId:
    Description: "SafeStorage AWS Account id. Useful to grant rights to send feedback to EventBus"
    Default: "-"
    Type: String
  
  DeliveryPushExtChUser:
    Description: "external channel user dedicated to pn-delivery-push"
    Type: String

  PaperChannelExtChUser:
    Description: "external channel user dedicated to pn-paper-channel"
    Type: String

  UserAttributesExtChUser:
    Description: "SafeStorage AWS Account id. Useful to grant rights to send feedback to EventBus"
    Type: String

  ServiceDeskPaperChannelUser:
    Description: "PaperChannel user dedicatet to ServiceDesk"
    Type: String

  EventBusDeadLetterQueueMaximumRetentionPeriod:
    Type: Number
    Description: "The number of seconds that Amazon SQS retains a message. You can specify an integer 
      value from 60 seconds (1 minute) to 1,209,600 seconds (14 days)."

  Version:
    Type: String
    Description: 'keep track of used projects commitIds'

  NationalRegistriesPipeWindowSize:
    Type: Number
    Default: 30
    Description: window size of national registries pipe (sqs to sqs)
  
  NationalRegistriesPipeBatchSize:
    Type: Number
    Default: 2
    Description: events batch size of national registries pipe (sqs to sqs)

  LogRetention:
    Type: Number
    Default: 14

  ReservedConcurrentLambdaExecution:
    Type: Number
    Default: 10

  # pass-though parameters
  AlarmSNSTopicArn:
    Type: String
  AlarmSNSTopicName:
    Type: String
  LogsBucketName:
    Type: String
#  LogsBucketKmsKeyArn:
#    Type: String
  ConfidentialInfoAccountId:
    Default: ''
    Type: String
  HelpdeskAccountId:
    Default: ''
    Type: String
  CdcKinesisSourceStreamName:
    Type: String
  CdcKinesisSourceStreamArn:
    Type: String
  CdcKinesisSourceStreamKeyArn:
    Type: String
  LogsKinesisSourceStreamName:
    Type: String
  LogsKinesisSourceStreamArn:
    Type: String
  LogsKinesisSourceStreamKeyArn:
    Type: String


  # SafeStorage to DeliveryPush
  SafeStorageToDeliveryPushQueueARN:
    Type: String

  SafeStorageToDeliveryPushQueueURL:
    Type: String

  # SafeStorage to Radd
  SafeStorageToRaddQueueARN:
    Type: String

  SafeStorageToRaddQueueURL:
    Type: String

  # SafeStorage to Radd Alt
  SafeStorageToRaddAltQueueARN:
    Type: String

  SafeStorageToRaddAltQueueURL:
    Type: String

  # SafeStorage to ServiceDesk
  SafeStorageToServiceDeskQueueARN:
    Type: String

  SafeStorageToServiceDeskQueueURL:
    Type: String

  # External channels outputs
  ExternalChannelsOutputsQueueARN:
    Type: String
    Description: pn-external-channels output queue ARN

  ExternalChannelsOutputsQueueURL:
    Type: String

  # External channels to user attribute outputs
  ExternalChannels2UserAttributesQueueARN:
    Type: String
    Description: pn-external-channels output to user-attributes queue ARN

  ExternalChannels2UserAttributesQueueURL:
    Type: String

  # External channels to pn-paper-channel
  ExternalChannels2PaperChannelQueueARN:
    Type: String
    Description: pn-external-channels output to pn-paper-channel queue ARN

  ExternalChannels2PaperChannelQueueURL:
    Type: String

  # Gateway service of NationalRegistry events
  NationalRegistryGatewayOutputsQueueARN:
    Type: String
    Description: Events from the gateway service of NationalRegistry queue ARN

  # pn-national-registries TO pn-delivery-push events
  NationalRegistries2DeliveryPushQueueARN:
    Type: String
    Description: Events from pn-national-registries TO pn-delivery-push queue ARN
  
  NationalRegistries2DeliveryPushQueueURL:
    Type: String

  # pn-national-registries TO pn-paper-channel events
  NationalRegistries2PaperChannelQueueARN:
    Type: String
    Description: Events from pn-national-registries TO pn-paper-channel queue ARN

  NationalRegistries2PaperChannelQueueURL:
    Type: String

  # pn-national-registries TO Self Care PG events
  NationalRegistries2SelcPGQueueARN:
    Type: String
    Description: Events from pn-national-registries TO Self Care PG queue ARN

  NationalRegistries2SelcPGQueueURL:
    Type: String

  DowntimeLogsSafeStorageEventsQueueARN:
    Type: String

  DowntimeLogsSafeStorageEventsQueueURL:
    Type: String

  # AddressManager to DeliveryPush
  AddressManagerToDeliveryPushQueueARN:
    Type: String

  AddressManagerToDeliveryPushQueueURL:
    Type: String

  # less than PnAddressManagerNormalizerBatchRequestDelay pn-address-manager
  SQSMaxDelay:
    Type: Number
    Default: 138
    Description: rate limiter integer for delay sqs message

  AcmAlarmsQueueARN:
    Type: String
    Description: ACM alarms queue ARN

  AcmAlarmsQueueAlarmARN:
    Type: String
    Description: ACM DLQ alarm ARN

  # PaperChannel to ServiceDesk
  PaperChannelToServiceDeskQueueARN:
    Type: String

  PaperChannelToServiceDeskQueueURL:
    Type: String

  # F24 to PaperChannel
  F24ToPaperChannelQueueURL:
    Type: String

  F24ToPaperChannelQueueARN:
    Type: String

  # F24 to DeliveryPush
  F24ToDeliveryPushQueueURL:
    Type: String

  F24ToDeliveryPushQueueARN:
    Type: String

  # SafeStorage to F24
  SafeStorageToF24QueueURL:
    Type: String

  SafeStorageToF24QueueARN:
    Type: String

  # F24 client Ids
  F24DeliveryPushUser:
    Type: String

  F24PaperChannelUser:
    Type: String
    
  OncallDlqRatio:
    Type: Number
    Default: 0.1
    Description: Wakeup alarm ratio between messages written to DLQ and messages read from queue

Conditions:
  HasStorageStorageAccountId: !Not [ !Equals [ !Ref SafeStorageAccountId, '-' ]]
  HasConfidentialInfoAccountId: !Not [ !Equals [ !Ref ConfidentialInfoAccountId, '' ]]

Resources:

  ###                          PN-CORE EVENT BUS                          ###
  ###########################################################################
  # Receive events from SafeStorage and CarrierPigeon (AKA ExternalChannel) 
  # and redirect to the right SQS queue
  PnCoreEventBus:
    Type: AWS::Events::EventBus
    Properties: 
      Name: !Sub '${ProjectName}-CoreEventBus'
  
  # Allow access from partner system
  PnCoreEventBusSafeStoreAccessPolicy: 
    Type: AWS::Events::EventBusPolicy
    Condition: HasStorageStorageAccountId
    Properties: 
      EventBusName: !Ref PnCoreEventBus
      StatementId: "AllowEventPutBySafeStorage"
      Statement: 
        Effect: "Allow"
        Principal: 
            AWS: !Sub "arn:aws:iam::${SafeStorageAccountId}:root"
        Action: "events:PutEvents"
        Resource: !GetAtt "PnCoreEventBus.Arn"

  # Allow access from confinfo
  PnCoreEventBusConfidentialInfoAccessPolicy: 
    Type: AWS::Events::EventBusPolicy
    Condition: HasConfidentialInfoAccountId
    Properties: 
      EventBusName: !Ref PnCoreEventBus
      StatementId: "AllowEventPutByConfidentialInfo"
      Statement: 
        Effect: "Allow"
        Principal: 
            AWS: !Sub "arn:aws:iam::${ConfidentialInfoAccountId}:root"
        Action: "events:PutEvents"
        Resource: !GetAtt "PnCoreEventBus.Arn"

  # Allow event bus rules to write to queues
  EventBusEnqueueRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyName: putEventIntoQueues
          PolicyDocument:
            Statement:
              - Sid: putEvents
                Action:
                  - sqs:ChangeMessageVisibility
                  - sqs:ChangeMessageVisibilityBatch
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                  - sqs:SendMessage
                  - sqs:SendMessageBatch
                Effect: Allow
                Resource: 
                  - !Ref ExternalChannelsOutputsQueueARN
                  - !Ref ExternalChannels2UserAttributesQueueARN
                  - !Ref SafeStorageToDeliveryPushQueueARN
                  - !Ref SafeStorageToRaddQueueARN
                  - !Ref SafeStorageToRaddAltQueueARN
                  - !Ref SafeStorageToServiceDeskQueueARN
                  - !Ref "DowntimeLogsSafeStorageEventsQueueARN"
                  - !Ref "NationalRegistries2DeliveryPushQueueARN"
                  - !Ref "NationalRegistries2PaperChannelQueueARN"
                  - !Ref "NationalRegistries2SelcPGQueueARN"
                  - !Ref "AddressManagerToDeliveryPushQueueARN"
                  - !Ref "AcmAlarmsQueueARN"
                  - !Ref "PaperChannelToServiceDeskQueueARN"
                  - !Ref "SafeStorageToF24QueueARN"
                  - !Ref "F24ToPaperChannelQueueARN"
                  - !Ref "F24ToDeliveryPushQueueARN"
  
  # Resource based policy to allow EventBridge to publish to CloudWatch Logs
  LogGroupCoreEventBusPolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: !Sub "${ProjectName}-CoreEventBusToCWLogsPolicy"
      PolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "CoreEventBustoCWLogsCreateLogStreamPolicy",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "events.amazonaws.com"
                ]
              },
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": [
                "${CoreEventBusEventsLogGroup.Arn}"
              ]
            }
          ]
        }

  EventBusLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyName: logEventToCloudwatch
          PolicyDocument:
            Statement:
              - Sid: AllowEventBusToCreateLogs
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: 
                  - !GetAtt CoreEventBusEventsLogGroup.Arn

  ExternalChannelsOutputsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref "ExternalChannelsOutputsQueueURL"
        - !Ref "ExternalChannels2UserAttributesQueueURL"
        - !Ref "ExternalChannels2PaperChannelQueueURL"
        - !Ref "SafeStorageToDeliveryPushQueueURL"
        - !Ref "SafeStorageToRaddQueueURL"
        - !Ref "SafeStorageToRaddAltQueueURL"
        - !Ref "SafeStorageToServiceDeskQueueURL"
        - !Ref "DowntimeLogsSafeStorageEventsQueueURL"
        - !Ref "NationalRegistries2DeliveryPushQueueURL"
        - !Ref "NationalRegistries2PaperChannelQueueURL"
        - !Ref "NationalRegistries2SelcPGQueueURL"  
        - !Ref "AddressManagerToDeliveryPushQueueURL"  
        - !Ref "PaperChannelToServiceDeskQueueURL"
        - !Ref "F24ToPaperChannelQueueURL"
        - !Ref "F24ToDeliveryPushQueueURL"
        - !Ref "SafeStorageToF24QueueURL"
      PolicyDocument:
        Statement:
          - Sid: "SendEventsToDLQ"
            Effect: "Allow"
            Principal: 
              Service: 
                - "events.amazonaws.com"
            Action: 
              - "SQS:SendMessage"
            Resource:
              - !Ref "ExternalChannelsOutputsQueueARN"
              - !Ref "ExternalChannels2UserAttributesQueueARN"
              - !Ref "ExternalChannels2PaperChannelQueueARN"
              - !Ref "SafeStorageToDeliveryPushQueueARN"
              - !Ref "SafeStorageToRaddQueueARN"
              - !Ref "SafeStorageToRaddAltQueueARN"
              - !Ref "SafeStorageToServiceDeskQueueARN"
              - !Ref "DowntimeLogsSafeStorageEventsQueueARN"
              - !Ref "NationalRegistries2DeliveryPushQueueARN"
              - !Ref "NationalRegistries2PaperChannelQueueARN"
              - !Ref "NationalRegistries2SelcPGQueueARN"        
              - !Ref "AddressManagerToDeliveryPushQueueARN"   
              - !Ref "PaperChannelToServiceDeskQueueARN"
              - !Ref "F24ToPaperChannelQueueARN"
              - !Ref "F24ToDeliveryPushQueueARN"
              - !Ref "SafeStorageToF24QueueARN"

  # Log all events
  CoreEventBusEventsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/events/core-event-bus-input-events
      RetentionInDays: !Ref LogRetention

  CoreEventBusMatchedEventsLoggerFnLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/PnCoreEventBusMatchedEventLogger
      RetentionInDays: !Ref LogRetention

  PnCoreEventBusToLogGroup:
    Type: AWS::Events::Rule
    Properties: 
      Description: Route SafeStorage Events to log group
      RoleArn: !GetAtt "EventBusLogRole.Arn"
      EventBusName: !Ref PnCoreEventBus
      EventPattern:
        source:
          - prefix: ""
      Targets: 
        - Arn: !GetAtt CoreEventBusEventsLogGroup.Arn
          Id: LogTarget

  # Send Address Manager Response to pn-delivery-push
  PnCoreEventBusToAddressManagerToDeliveryPushResponseQueue:
    Type: AWS::Events::Rule
    Properties: 
      Description: Route Address Manager Events to pn-delivery-push
      RoleArn: !GetAtt "EventBusEnqueueRole.Arn"
      EventBusName: !Ref PnCoreEventBus
      EventPattern:
        detail-type: [ "AddressManagerOutcomeEvent" ]
        detail: 
          cxId: [ "pn-delivery-push" ]
      Targets: 
        - Arn: !GetAtt MatchedEventsLoggerFunction.Arn
          Id: !Sub ${ProjectName}-Logger-AddressManager2DeliveryPush
          InputTransformer:
            InputPathsMap:
              "timestamp": "$.time"
            InputTemplate: |
              {
                  "timestamp": <timestamp>,
                  "ruleArn": <aws.events.rule-arn>,
                  "ruleName": <aws.events.rule-name>,
                  "ingestionTime": <aws.events.event.ingestion-time>,
                  "originalEvent": <aws.events.event.json>
              }       
        - Id: !Sub '${ProjectName}-CoreEventBus-AddressManager2DeliveryPush'
          Arn: !GetAtt PNAddressManagerToDeliveryPushLimiterFunction.Arn
          DeadLetterConfig: 
            Arn: !GetAtt EventBusDeadLetterQueue.Arn

  # Send National Registries Response to pn-delivery-push
  PnCoreEventBusToNationalRegistries2DeliveryPushResponseQueue:
    Type: AWS::Events::Rule
    Properties: 
      Description: Route National Registries Events to pn-delivery-push
      RoleArn: !GetAtt "EventBusEnqueueRole.Arn"
      EventBusName: !Ref PnCoreEventBus
      EventPattern:
        detail-type: [ "NationalRegistriesOutcomeEvent" ]
        detail:
          source: [ "pn-delivery-push" ]
      Targets: 
        - Arn: !GetAtt MatchedEventsLoggerFunction.Arn
          Id: !Sub ${ProjectName}-Logger-NationalRegistries2DeliveryPush
          InputTransformer:
            InputPathsMap:
              "timestamp": "$.time"
            InputTemplate: |
              {
                  "timestamp": <timestamp>,
                  "ruleArn": <aws.events.rule-arn>,
                  "ruleName": <aws.events.rule-name>,
                  "ingestionTime": <aws.events.event.ingestion-time>,
                  "originalEvent": <aws.events.event.json>
              }       
        - Id: !Sub '${ProjectName}-CoreEventBus-NationalRegistries2DeliveryPush'
          Arn: !Ref NationalRegistries2DeliveryPushQueueARN
          InputPath: $.detail.body
          DeadLetterConfig: 
            Arn: !GetAtt EventBusDeadLetterQueue.Arn

  # Send National Registries Response to pn-paper-channel
  PnCoreEventBusToNationalRegistries2PaperChannelResponseQueue:
    Type: AWS::Events::Rule
    Properties: 
      Description: Route National Registries Events to pn-paper-channel
      RoleArn: !GetAtt "EventBusEnqueueRole.Arn"
      EventBusName: !Ref PnCoreEventBus
      EventPattern:
        detail-type: [ "NationalRegistriesOutcomeEvent" ]
        detail: 
          source: [ "pn-paper-channel" ]
      Targets: 
        - Arn: !GetAtt MatchedEventsLoggerFunction.Arn
          Id: !Sub ${ProjectName}-Logger-NationalRegistries2PaperChannel
          InputTransformer:
            InputPathsMap:
              "timestamp": "$.time"
            InputTemplate: |
              {
                  "timestamp": <timestamp>,
                  "ruleArn": <aws.events.rule-arn>,
                  "ruleName": <aws.events.rule-name>,
                  "ingestionTime": <aws.events.event.ingestion-time>,
                  "originalEvent": <aws.events.event.json>
              }       
        - Id: !Sub '${ProjectName}-CoreEventBus-NationalRegistries2PaperChannel'
          Arn: !Ref NationalRegistries2PaperChannelQueueARN
          InputPath: $.detail.body
          DeadLetterConfig: 
            Arn: !GetAtt EventBusDeadLetterQueue.Arn

  # Send Safe Storage Response to pn-delivery-push
  PnCoreEventBusToSafeStorageResponseQueue:
    Type: AWS::Events::Rule
    Properties: 
      Description: Route SafeStorage Events to pn-delivery-push
      RoleArn: !GetAtt "EventBusEnqueueRole.Arn"
      EventBusName: !Ref PnCoreEventBus
      EventPattern:
        detail-type: [ "SafeStorageOutcomeEvent" ]
        detail:
          documentType: [ 'PN_AAR', 'PN_NOTIFICATION_ATTACHMENTS', 'PN_LEGAL_FACTS' ]
      Targets: 
        - Arn: !GetAtt MatchedEventsLoggerFunction.Arn
          Id: !Sub ${ProjectName}-Logger-SafeStore2DeliveryPush
          InputTransformer:
            InputPathsMap:
              "timestamp": "$.time"
            InputTemplate: |
              {
                  "timestamp": <timestamp>,
                  "ruleArn": <aws.events.rule-arn>,
                  "ruleName": <aws.events.rule-name>,
                  "ingestionTime": <aws.events.event.ingestion-time>,
                  "originalEvent": <aws.events.event.json>
              }       
        - Id: !Sub '${ProjectName}-CoreEventBus-SafeStore2DeliveryPush'
          Arn: !Ref SafeStorageToDeliveryPushQueueARN
          InputPath: $.detail
          DeadLetterConfig: 
            Arn: !GetAtt EventBusDeadLetterQueue.Arn

  # Send Safe Storage Response to radd
  PnCoreEventBusToRaddSafeStorageResponseQueue:
    Type: AWS::Events::Rule
    Properties: 
      Description: Route SafeStorage Events to pn-radd
      RoleArn: !GetAtt "EventBusEnqueueRole.Arn"
      EventBusName: !Ref PnCoreEventBus
      EventPattern:
        detail-type: [ "SafeStorageOutcomeEvent" ]
        detail:
          documentType: [ 'PN_RADD_FSU_ATTACHMENT' ]
      Targets: 
        - Arn: !GetAtt MatchedEventsLoggerFunction.Arn
          Id: !Sub ${ProjectName}-Logger-SafeStore2Radd
          InputTransformer:
            InputPathsMap:
              "timestamp": "$.time"
            InputTemplate: |
              {
                  "timestamp": <timestamp>,
                  "ruleArn": <aws.events.rule-arn>,
                  "ruleName": <aws.events.rule-name>,
                  "ingestionTime": <aws.events.event.ingestion-time>,
                  "originalEvent": <aws.events.event.json>
              }       
        - Id: !Sub '${ProjectName}-CoreEventBus-SafeStore2Radd'
          Arn: !Ref SafeStorageToRaddQueueARN
          InputPath: $.detail
          DeadLetterConfig: 
            Arn: !GetAtt EventBusDeadLetterQueue.Arn

  # Send Safe Storage Response to radd
  PnCoreEventBusToRaddAltSafeStorageResponseQueue:
    Type: AWS::Events::Rule
    Properties: 
      Description: Route SafeStorage Events to pn-radd-alt
      RoleArn: !GetAtt "EventBusEnqueueRole.Arn"
      EventBusName: !Ref PnCoreEventBus
      EventPattern:
        detail-type: [ "SafeStorageOutcomeEvent" ]
        detail:
          documentType: [ 'PN_RADD_REGISTRY' ]
      Targets: 
        - Arn: !GetAtt MatchedEventsLoggerFunction.Arn
          Id: !Sub ${ProjectName}-Logger-SafeStore2RaddAlt
          InputTransformer:
            InputPathsMap:
              "timestamp": "$.time"
            InputTemplate: |
              {
                  "timestamp": <timestamp>,
                  "ruleArn": <aws.events.rule-arn>,
                  "ruleName": <aws.events.rule-name>,
                  "ingestionTime": <aws.events.event.ingestion-time>,
                  "originalEvent": <aws.events.event.json>
              }       
        - Id: !Sub '${ProjectName}-CoreEventBus-SafeStore2RaddAlt'
          Arn: !Ref SafeStorageToRaddAltQueueARN
          InputPath: $.detail
          DeadLetterConfig: 
            Arn: !GetAtt EventBusDeadLetterQueue.Arn

  # Send Safe Storage Response to servicedesk
  PnCoreEventBusToServiceDeskSafeStorageResponseQueue:
    Type: AWS::Events::Rule
    Properties: 
      Description: Route SafeStorage Events to pn-servicedesk
      RoleArn: !GetAtt "EventBusEnqueueRole.Arn"
      EventBusName: !Ref PnCoreEventBus
      EventPattern:
        detail-type: [ "SafeStorageOutcomeEvent" ]
        detail:
          documentType: [ 'PN_SERVICEDESK_RECORDING' ]
      Targets: 
        - Arn: !GetAtt MatchedEventsLoggerFunction.Arn
          Id: !Sub ${ProjectName}-Logger-SafeStore2ServiceDesk
          InputTransformer:
            InputPathsMap:
              "timestamp": "$.time"
            InputTemplate: |
              {
                  "timestamp": <timestamp>,
                  "ruleArn": <aws.events.rule-arn>,
                  "ruleName": <aws.events.rule-name>,
                  "ingestionTime": <aws.events.event.ingestion-time>,
                  "originalEvent": <aws.events.event.json>
              }       
        - Id: !Sub '${ProjectName}-CoreEventBus-SafeStore2ServiceDesk'
          Arn: !Ref SafeStorageToServiceDeskQueueARN
          InputPath: $.detail
          DeadLetterConfig: 
            Arn: !GetAtt EventBusDeadLetterQueue.Arn

  # Send Safe Storage Response to pn-downtime-logs
  PnCoreEventBusToDowntimeLogsSafeStorageResponseQueue:
    Type: AWS::Events::Rule
    Properties: 
      Description: Route SafeStorage Events to pn-downtime-logs
      RoleArn: !GetAtt "EventBusEnqueueRole.Arn"
      EventBusName: !Ref PnCoreEventBus
      EventPattern:
        detail-type: [ "SafeStorageOutcomeEvent" ]
        detail:
          documentType: [ 'PN_DOWNTIME_LEGAL_FACTS' ]
      Targets: 
        - Arn: !GetAtt MatchedEventsLoggerFunction.Arn
          Id: !Sub ${ProjectName}-Logger-DowntimeLogs2SafeStorage
          InputTransformer:
            InputPathsMap:
              "timestamp": "$.time"
            InputTemplate: |
              {
                  "timestamp": <timestamp>,
                  "ruleArn": <aws.events.rule-arn>,
                  "ruleName": <aws.events.rule-name>,
                  "ingestionTime": <aws.events.event.ingestion-time>,
                  "originalEvent": <aws.events.event.json>
              }       
        - Id: !Sub '${ProjectName}-CoreEventBus-SafeStore2DowntimeLogs'
          Arn: !Ref DowntimeLogsSafeStorageEventsQueueARN
          InputPath: $.detail
          DeadLetterConfig: 
            Arn: !GetAtt EventBusDeadLetterQueue.Arn

  # Send ExternalChannel Response to pn-delivery-push
  PnCoreEventBusToExtChResponseQueue:
    Type: AWS::Events::Rule
    Properties: 
      Description: Route ExternalChannel Events to pn-delivery-push
      RoleArn: !GetAtt "EventBusEnqueueRole.Arn"
      EventBusName: !Ref PnCoreEventBus
      EventPattern:
        detail-type: [ "ExternalChannelOutcomeEvent" ]
        detail:
          clientId: [ !Ref DeliveryPushExtChUser ]
      Targets: 
        - Arn: !GetAtt MatchedEventsLoggerFunction.Arn
          Id: !Sub ${ProjectName}-Logger-ExtChToDeliveryPush
          InputTransformer:
            InputPathsMap:
              "timestamp": "$.time"
            InputTemplate: |
              {
                  "timestamp": <timestamp>,
                  "ruleArn": <aws.events.rule-arn>,
                  "ruleName": <aws.events.rule-name>,
                  "ingestionTime": <aws.events.event.ingestion-time>,
                  "originalEvent": <aws.events.event.json>
              }       
        - Id: !Sub '${ProjectName}-CoreEventBus-ExtCh2DeliveryPush'
          Arn: !Ref ExternalChannelsOutputsQueueARN
          InputPath: $.detail
          DeadLetterConfig: 
            Arn: !GetAtt EventBusDeadLetterQueue.Arn
  
  # Send ExternalChannel Response to pn-delivery-push
  PnCoreEventBusToACMAlarmsQueue:
    Type: AWS::Events::Rule
    Properties: 
      Description: Route ACM expiration events to ACM
      RoleArn: !GetAtt "EventBusEnqueueRole.Arn"
      EventBusName: default
      EventPattern:
        source: [ "aws.acm" ]
        detail-type: [ "ACM Certificate Approaching Expiration" ]
      Targets: 
        - Id: !Sub '${ProjectName}-DefaultEventBus-ACMAlarmsQueue'
          Arn: !Ref AcmAlarmsQueueARN

  # Send ExternalChannel Response to pn-user-attributes
  PnCoreEventBusToUserAttributesQueue:
    Type: AWS::Events::Rule
    Properties: 
      Description: Route ExternalChannel Events to pn-user-attributes
      RoleArn: !GetAtt "EventBusEnqueueRole.Arn"
      EventBusName: !Ref PnCoreEventBus
      EventPattern:
        detail-type: [ "ExternalChannelOutcomeEvent" ]
        detail:
          clientId: [ !Ref UserAttributesExtChUser ]
      Targets: 
        - Arn: !GetAtt MatchedEventsLoggerFunction.Arn
          Id: !Sub ${ProjectName}-Logger-UserAttributes2ExtCh  
          InputTransformer:
            InputPathsMap:
              "timestamp": "$.time"
            InputTemplate: |
              {
                  "timestamp": <timestamp>,
                  "ruleArn": <aws.events.rule-arn>,
                  "ruleName": <aws.events.rule-name>,
                  "ingestionTime": <aws.events.event.ingestion-time>,
                  "originalEvent": <aws.events.event.json>
              }       
        - Id: !Sub '${ProjectName}-CoreEventBus-ExtCh2UserAttributes'
          Arn: !Ref ExternalChannels2UserAttributesQueueARN
          InputPath: $.detail
          DeadLetterConfig: 
            Arn: !GetAtt EventBusDeadLetterQueue.Arn

  # Send ExternalChannel Response to pn-paper-channel
  PnCoreEventBusToPaperChannelQueue:
    Type: AWS::Events::Rule
    Properties: 
      Description: Route ExternalChannel Events to pn-paper-channel
      RoleArn: !GetAtt "EventBusEnqueueRole.Arn"
      EventBusName: !Ref PnCoreEventBus
      EventPattern:
        detail-type: [ "ExternalChannelOutcomeEvent" ]
        detail:
          clientId: [ !Ref PaperChannelExtChUser ]
      Targets: 
        - Arn: !GetAtt MatchedEventsLoggerFunction.Arn
          Id: !Sub ${ProjectName}-Logger-ExtCh2PaperChannel  
          InputTransformer:
            InputPathsMap:
              "timestamp": "$.time"
            InputTemplate: |
              {
                  "timestamp": <timestamp>,
                  "ruleArn": <aws.events.rule-arn>,
                  "ruleName": <aws.events.rule-name>,
                  "ingestionTime": <aws.events.event.ingestion-time>,
                  "originalEvent": <aws.events.event.json>
              }       
        - Id: !Sub '${ProjectName}-CoreEventBus-ExtCh2PaperChannel'
          Arn: !Ref ExternalChannels2PaperChannelQueueARN
          InputPath: $.detail
          DeadLetterConfig: 
            Arn: !GetAtt EventBusDeadLetterQueue.Arn

  # Send PaperChannel Response to servicedesk
  PnCoreEventBusToServiceDeskPaperChannelResponseQueue:
    Type: AWS::Events::Rule
    Properties: 
      Description: Route PaperChannel Events to pn-servicedesk
      RoleArn: !GetAtt "EventBusEnqueueRole.Arn"
      EventBusName: !Ref PnCoreEventBus
      EventPattern:
        detail-type: [ "PaperChannelOutcomeEvent" ]
        detail:
          clientId: [ !Ref ServiceDeskPaperChannelUser ]
      Targets: 
        - Arn: !GetAtt MatchedEventsLoggerFunction.Arn
          Id: !Sub ${ProjectName}-Logger-PaperChannel2ServiceDesk
          InputTransformer:
            InputPathsMap:
              "timestamp": "$.time"
            InputTemplate: |
              {
                  "timestamp": <timestamp>,
                  "ruleArn": <aws.events.rule-arn>,
                  "ruleName": <aws.events.rule-name>,
                  "ingestionTime": <aws.events.event.ingestion-time>,
                  "originalEvent": <aws.events.event.json>
              }       
        - Id: !Sub '${ProjectName}-CoreEventBus-SafeStore2ServiceDesk'
          Arn: !Ref PaperChannelToServiceDeskQueueARN
          InputPath: $.detail
          DeadLetterConfig: 
            Arn: !GetAtt EventBusDeadLetterQueue.Arn

  # Send Safe Storage Response to f24
  PnCoreEventBusToF24SafeStorageResponseQueue:
    Type: AWS::Events::Rule
    Properties: 
      Description: Route SafeStorage Events to pn-f24
      RoleArn: !GetAtt "EventBusEnqueueRole.Arn"
      EventBusName: !Ref PnCoreEventBus
      EventPattern:
        detail-type: [ "SafeStorageOutcomeEvent" ]
        detail:
          documentType: [ 'PN_F24', 'PN_F24_SET' ]
      Targets: 
        - Arn: !GetAtt MatchedEventsLoggerFunction.Arn
          Id: !Sub ${ProjectName}-Logger-SafeStore2F24
          InputTransformer:
            InputPathsMap:
              "timestamp": "$.time"
            InputTemplate: |
              {
                  "timestamp": <timestamp>,
                  "ruleArn": <aws.events.rule-arn>,
                  "ruleName": <aws.events.rule-name>,
                  "ingestionTime": <aws.events.event.ingestion-time>,
                  "originalEvent": <aws.events.event.json>
              }       
        - Id: !Sub '${ProjectName}-CoreEventBus-SafeStore2F24'
          Arn: !Ref SafeStorageToF24QueueARN
          InputPath: $.detail
          DeadLetterConfig: 
            Arn: !GetAtt EventBusDeadLetterQueue.Arn

  # Send f24 to paper channel
  PnCoreEventBusToPaperChannelF24ResponseQueue:
    Type: AWS::Events::Rule
    Properties: 
      Description: Route F24 Events to pn-paper-channel
      RoleArn: !GetAtt "EventBusEnqueueRole.Arn"
      EventBusName: !Ref PnCoreEventBus
      EventPattern:
        detail-type: [ "F24OutcomeEvent" ]
        detail:
          clientId: [ !Ref F24PaperChannelUser ]
      Targets: 
        - Arn: !GetAtt MatchedEventsLoggerFunction.Arn
          Id: !Sub ${ProjectName}-Logger-F24_to_PaperChannel
          InputTransformer:
            InputPathsMap:
              "timestamp": "$.time"
            InputTemplate: |
              {
                  "timestamp": <timestamp>,
                  "ruleArn": <aws.events.rule-arn>,
                  "ruleName": <aws.events.rule-name>,
                  "ingestionTime": <aws.events.event.ingestion-time>,
                  "originalEvent": <aws.events.event.json>
              }       
        - Id: !Sub '${ProjectName}-CoreEventBus-F24ToPaperChannel'
          Arn: !Ref F24ToPaperChannelQueueARN
          InputPath: $.detail
          DeadLetterConfig: 
            Arn: !GetAtt EventBusDeadLetterQueue.Arn

  # Send f24 to delivery push
  PnCoreEventBusToDeliveryPushF24ResponseQueue:
    Type: AWS::Events::Rule
    Properties: 
      Description: Route F24 Events to pn-delivery-push
      RoleArn: !GetAtt "EventBusEnqueueRole.Arn"
      EventBusName: !Ref PnCoreEventBus
      EventPattern:
        detail-type: [ "F24OutcomeEvent" ]
        detail:
          clientId: [ !Ref F24DeliveryPushUser ]
      Targets: 
        - Arn: !GetAtt MatchedEventsLoggerFunction.Arn
          Id: !Sub ${ProjectName}-Logger-F24_to_DeliveryPush
          InputTransformer:
            InputPathsMap:
              "timestamp": "$.time"
            InputTemplate: |
              {
                  "timestamp": <timestamp>,
                  "ruleArn": <aws.events.rule-arn>,
                  "ruleName": <aws.events.rule-name>,
                  "ingestionTime": <aws.events.event.ingestion-time>,
                  "originalEvent": <aws.events.event.json>
              }       
        - Id: !Sub '${ProjectName}-CoreEventBus-F24ToDeliveryPush'
          Arn: !Ref F24ToDeliveryPushQueueARN
          InputPath: $.detail
          DeadLetterConfig: 
            Arn: !GetAtt EventBusDeadLetterQueue.Arn

  MatchedEventLoggerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt MatchedEventsLoggerFunction.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/pn-CoreEventBus/*"

  MatchedEventsLoggerFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: MatchedEventsLoggerPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource:
                  - !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/lambda/PnCoreEventBusMatchedEventLogger'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:*'
  
  MatchedEventsLoggerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: PnCoreEventBusMatchedEventLogger
      Code:
        ZipFile: |
          import json
          def handler(event, context):
            json_data = json.dumps(event)
            print(json_data)
            res = {
                "status": 'success'
            }
            return res


      Handler: index.handler
      Runtime: python3.9
      Role: !GetAtt MatchedEventsLoggerFunctionExecutionRole.Arn
      ReservedConcurrentExecutions : !Ref ReservedConcurrentLambdaExecution

  PNAddressManagerToDeliveryPushLimiterLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PNAddressManagerToDeliveryPushLimiterFunction.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/pn-CoreEventBus/*"

  PNAddressManagerToDeliveryPushLimiterExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: SQSRateLimiterPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: WriteOnQueue
                Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - !Ref AddressManagerToDeliveryPushQueueARN
                  - !GetAtt EventBusDeadLetterQueue.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource:
                  - !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/lambda/*'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:*'

  PNAddressManagerToDeliveryPushLimiterFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: PNAddressManagerToDeliveryPushLimiter
      Environment:
        Variables:
          QUEUE_URL: !Ref AddressManagerToDeliveryPushQueueURL
          SQS_MAX_DELAY: !Ref SQSMaxDelay
      Code:
        ZipFile: |
          const { SQSClient, SendMessageCommand } = require("@aws-sdk/client-sqs");
          const client = new SQSClient({region: process.env.REGION});
          const SQS_MAX_DELAY = parseInt(process.env.SQS_MAX_DELAY);
          
          exports.handler = async function(event) {
            const input = {
              QueueUrl: process.env.QUEUE_URL,
              DelaySeconds: Math.floor(Math.random() * (SQS_MAX_DELAY - 1) + 1),
              MessageBody: JSON.stringify(event.detail.body)
            }
            const command = new SendMessageCommand(input);
            const response = await client.send(command);
            return response;
          };

      Handler: index.handler
      Runtime: nodejs18.x
      Role: !GetAtt PNAddressManagerToDeliveryPushLimiterExecutionRole.Arn
      ReservedConcurrentExecutions : !Ref ReservedConcurrentLambdaExecution
      DeadLetterConfig:
        TargetArn: !GetAtt EventBusDeadLetterQueue.Arn

  # Standard Queue for events Dead Letter Queue
  EventBusDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: !Ref EventBusDeadLetterQueueMaximumRetentionPeriod
      QueueName: !Sub '${ProjectName}-CoreEventBus-DLQ'

  # Dead Letter Queue policy 
  EventBusDeadLetterQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref "EventBusDeadLetterQueue"
      PolicyDocument:
        Statement:
          - Sid: "SendEventsToDLQ"
            Effect: "Allow"
            Principal: 
              Service: 
                - "events.amazonaws.com"
            Action: 
              - "SQS:SendMessage"
            Resource:
              - !GetAtt "EventBusDeadLetterQueue.Arn"
  
  # Alarm for Dead letter queue has messages
  DLQHasMessagesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-CoreEventBus-DLQ-HasMessage'
      AlarmDescription: "CloudWatch alarm for when DLQ has 1 or more messages."
      Namespace: "AWS/SQS"
      MetricName: "ApproximateNumberOfMessagesVisible"
      Dimensions:
        - Name: "QueueName"
          Value: !Sub '${EventBusDeadLetterQueue.QueueName}'
      Statistic: "Sum"
      TreatMissingData: "notBreaching"
      Period: 60
      Threshold: 1
      ComparisonOperator: "GreaterThanOrEqualToThreshold" 
      EvaluationPeriods: 1       
      AlarmActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}'
      InsufficientDataActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}'
      OKActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}'

  OncallDLQHasMessagesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'oncall-${ProjectName}-CoreEventBus-DLQ-HasMessage'
      AlarmDescription: "CloudWatch alarm for when DLQ has 1 or more messages."
      TreatMissingData: "notBreaching"
      Threshold: 5
      ComparisonOperator: "GreaterThanOrEqualToThreshold" 
      EvaluationPeriods: 30      
      Metrics:
        - Id: m1
          MetricStat:
            Metric:
              Dimensions:
                - Name: QueueName
                  Value: !Sub '${EventBusDeadLetterQueue.QueueName}'
              MetricName: NumberOfMessagesReceived
              Namespace: AWS/SQS
            Period: 60
            Stat: Sum
          ReturnData: False
        - Id: m2
          MetricStat:
            Metric:
              Dimensions:
                - Name: EventBusName
                  Value: !Sub '${ProjectName}-CoreEventBus'
              MetricName: MatchedEvents
              Namespace: AWS/Events
            Period: 60
            Stat: Sum
          ReturnData: False
        - Id: e1
          Expression: !Sub IF(m2>0 AND m1/m2>${OncallDlqRatio}, 1, 0)
          Label: !Sub "${ProjectName}-CoreEventBus-HasDLQMessage-OnCall-Metric"        
      AlarmActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}'
      InsufficientDataActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}'
      OKActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AlarmSNSTopicName}'

  ###          Allow  EVENTS FROM CONFIDENTIAL AND HELPDESK         ###
  #####################################################################
  ## Composite alarm event bus and rule
  AllowEventsFromConfidentialPolicy: 
    Type: AWS::Events::EventBusPolicy
    Properties: 
      StatementId: "allowEventsFromDataVault"
      Statement: 
        Effect: "Allow"
        Principal: 
            AWS: !Sub "arn:aws:iam::${ConfidentialInfoAccountId}:root"
        Action: "events:PutEvents"
        Resource: !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/default

  AllowEventsFromHelpdeskPolicy: 
    Type: AWS::Events::EventBusPolicy
    Properties: 
      StatementId: "allowEventsFromHelpdesk"
      Statement: 
        Effect: "Allow"
        Principal: 
            AWS: !Sub "arn:aws:iam::${HelpdeskAccountId}:root"
        Action: "events:PutEvents"
        Resource: !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/default

  ###            National Registries Pipe                                  ###
  ############################################################################

  NationalRegistriesPipeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - pipes.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${ProjectName}--National-registries-source-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:ReceiveMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:GetQueueAttributes'
                Resource: !Ref NationalRegistryGatewayOutputsQueueARN
        - PolicyName: !Sub ${ProjectName}-National-registries-target-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'events:PutEvents'
                Resource: 
                  - !GetAtt PnCoreEventBus.Arn

  NationalRegistriesToEventBridgePipe:
    Type: AWS::Pipes::Pipe
    Properties:
      Name: !Sub ${ProjectName}-National-registries-to-paper-channel-pipe
      Description: 'Pipe from National Registries Queue to Paper Channel queue'
      RoleArn: !GetAtt NationalRegistriesPipeRole.Arn
      Source: !Ref NationalRegistryGatewayOutputsQueueARN
      SourceParameters:
        SqsQueueParameters:
          BatchSize: !Ref NationalRegistriesPipeBatchSize
          MaximumBatchingWindowInSeconds: !Ref NationalRegistriesPipeWindowSize
      Target: !GetAtt PnCoreEventBus.Arn
      TargetParameters:
        EventBridgeEventBusParameters:
          DetailType: "NationalRegistriesOutcomeEvent"
        InputTemplate: |
              {
                "body": <$.body>,
                "source": <$.messageAttributes.clientId.stringValue>
              }

Outputs:

  # Kinesis Source Stream containing the DynamoDB Change Data Capture events
  CdcKinesisSourceStreamName:
    Description: 'Kinesis source CDC stream name'
    Value: !Ref CdcKinesisSourceStreamName
  CdcKinesisSourceStreamArn:
    Description: 'Kinesis source CDC stream ARN'
    Value: !Ref CdcKinesisSourceStreamArn
  CdcKinesisSourceStreamKeyArn:
    Description: 'Kinesis source CDC stream crypto key ARN'
    Value: !Ref CdcKinesisSourceStreamKeyArn

  # Kinesis Source Stream containing the CloudWatch Logs
  LogsKinesisSourceStreamName:
    Description: 'Kinesis source Logs stream name'
    Value: !Ref LogsKinesisSourceStreamName
  LogsKinesisSourceStreamArn:
    Description: 'Kinesis source Logs stream ARN'
    Value: !Ref LogsKinesisSourceStreamArn
  LogsKinesisSourceStreamKeyArn:
    Description: 'Kinesis source Logs stream crypto key ARN'
    Value: !Ref LogsKinesisSourceStreamKeyArn

  AcmAlarmsQueueAlarmARN:
    Value: !Ref AcmAlarmsQueueAlarmARN
    
  # Event Bus Alarm
  EventBusDLQHasMessagesAlarmArn:
    Description: 'Event Bus Core DLQ alarm ARN'
    Value: !GetAtt DLQHasMessagesAlarm.Arn

  # Event Bus Rule Arns
  PnCoreEventBusToSafeStorageResponseQueueArn:
    Description: 'Event bus to safe storage rule ARN'
    Value: !GetAtt PnCoreEventBusToSafeStorageResponseQueue.Arn

  PnCoreEventBusToDowntimeLogsSafeStorageResponseQueueArn:
    Description: 'Event bus to downtime logs rule ARN'
    Value: !GetAtt PnCoreEventBusToDowntimeLogsSafeStorageResponseQueue.Arn

  PnCoreEventBusToExtChResponseQueueArn:
    Description: 'Event bus to external channel rule ARN'
    Value: !GetAtt PnCoreEventBusToExtChResponseQueue.Arn

  PnCoreEventBusToUserAttributesQueueArn:
    Description: 'Event bus to user attributes rule ARN'
    Value: !GetAtt PnCoreEventBusToUserAttributesQueue.Arn

  #
  CoreEventBusEventsLogGroupArn:
    Value: !GetAtt CoreEventBusEventsLogGroup.Arn
    Description: Core event bus matched events log group

  CoreEventBusMatchedEventsLogGroupArn:
    Value: !GetAtt CoreEventBusMatchedEventsLoggerFnLogGroup.Arn
    Description: Core event bus matched events log group

  # pass through parameters
  AlarmSNSTopicArn:
    Value: !Ref AlarmSNSTopicArn
  LogsBucketName:
    Value: !Ref LogsBucketName
  Version:
    Value: !Ref Version