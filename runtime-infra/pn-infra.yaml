AWSTemplateFormatVersion: 2010-09-09
Description: 'This template deploys the base infra for PN. VPC, AWS services endpoints, 
              load balancer, ECS cluster'

Parameters:
  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'

  VpcId:
    Type: String
    Description: VpcId of the VPC where to install PN-CORE
  VpcCidr:
    Type: String
    Description: Cidr of the VPC where to install PN-CORE
  VpcSubnets:
    Type: String
    Description: subnets where to install PN-CORE
  VpcSubnetsRoutingTables:
    Type: String
    Description: routing table for subnets where to install PN-CORE
  PrivateHostedZone:
    Type: String
    Description: private hosted zone where register the application load balancer

  RaddApiCertificateArn:
    Type: String
    Description: Radd Api certificate ARN

  RaddApiDnsName:
    Type: String
    Description: Radd Api DNS Name

  HostedZoneId:
    Type: String
    Description: hosted zone where register the network load balancer

  InternalNlbIps:
    Description: The list of ips of the internal network load balancer
    Type: String

  BucketSuffix:
    Type: String
    Default: "001"
    Description: Suffix to the log bucket name
  DataLakeAccountId1:
    Type: String
    Default: '-'
    Description: Data lake can read logs
  DataLakeAccountId2:
    Type: String
    Default: '-'
    Description: Data lake can read logs

  TemplateBucketBaseUrl:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'
    
  Version:
    Type: String
    Description: 'keep track of used projects commitIds'

  VpcEndpointsRequired:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
      
  ApplicationLoadBalancerArn: 
    Type: String
    Default: '-'
    Description: Application load balancer

  ApplicationLoadBalancerAwsDns: 
    Type: String
    Default: '-'
    Description: Application load balancer AWS DNS

  ApplicationLoadBalancerAwsDnsZoneId:
    Type: String
    Default: '-'
    Description: Application load balancer AWS DNS Zone ID

  ApplicationLoadBalancerListenerArn:
    Type: String
    Default: '-'
    Description: Application load balancer listener ARN

  NetworkLoadBalancerLink: 
    Type: String
    Default: '-'
    Description: Network load balancer VpcLink (used by api-gw)

  WebappSecurityGroupId: 
    Type: String
    Default: '-'
    Description: ALB security group ID

  VpcEgressSubnetsIds:
    Type: String
    Default: '-'
    Description: List of egress subnets

  LogRetention:
    Type: Number
    Default: 14

  # pass-through parameters
  AlarmSNSTopicArn:
    Type: String
  AlarmSNSTopicName:
    Type: String
  EcsDefaultSecurityGroup:
    Type: String
  LogsBucketKmsKeyArn:
    Type: String
  LogsBucketName:
    Type: String
  SafeStorageAccountId:
    Type: String
  CdcKinesisStreamName:
    Type: String
  CdcKinesisStreamArn:
    Type: String
  CdcKinesisStreamKeyArn:
    Type: String
  LogsKinesisStreamName:
    Type: String
  LogsKinesisStreamArn:
    Type: String
  LogsKinesisStreamKeyArn:
    Type: String
  ApiKeyTablesEncryptKeyId:
    Type: String
  SafestorageLoggerLogGroupName:
    Type: String
Conditions:
  IsAlbArnEmpty: !Equals [ !Ref ApplicationLoadBalancerArn, '-' ]
  IsAlbArnDnsEmpty: !Equals [ !Ref ApplicationLoadBalancerAwsDns, '-' ]
  IsAlbArnDnsZoneIdEmpty: !Equals [ !Ref ApplicationLoadBalancerAwsDnsZoneId, '-' ]
  IsAlbListenerArnEmpty: !Equals [ !Ref ApplicationLoadBalancerListenerArn, '-' ]
  IsNetworkLoadBalancerLinkEmpty: !Equals [ !Ref NetworkLoadBalancerLink, '-' ]
  IsWebappSecurityGroupIdEmpty: !Equals [ !Ref WebappSecurityGroupId, '-' ]
  RequiresAlbCreation: !Or [ !Condition IsAlbArnEmpty, !Condition IsAlbArnDnsEmpty, !Condition IsAlbArnDnsZoneIdEmpty, !Condition IsAlbListenerArnEmpty, !Condition IsNetworkLoadBalancerLinkEmpty, !Condition IsWebappSecurityGroupIdEmpty ]
  
  RequiresVpcEndpoints: !Equals [ !Ref VpcEndpointsRequired, true ]

  IsEgressDefined: !Not [ !Equals [ !Ref VpcEgressSubnetsIds, '-' ] ]
Resources:

  ###                       VPC BASE CONFIGURATIONS                       ###
  ###########################################################################

  # VPC and subnets
  #VPC:
  #  Type: AWS::CloudFormation::Stack
  #  Properties:
  #    TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/vpc.yaml"
  #    Parameters:
  #      VpcName: !Ref ProjectName
  #      VpcNumber: !Ref VpcNumber

  # Private connection from subnets to AWS services
  VPCEndpoints:
    Type: AWS::CloudFormation::Stack
    Condition: RequiresVpcEndpoints
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/vpc-endpoints.yaml"
      Parameters:
        VpcName: !Ref ProjectName
        VpcCidr: !Ref VpcCidr
        Subnets: !Ref VpcSubnets
        RouteTableIds: !Ref VpcSubnetsRoutingTables
        VpcId: !Ref VpcId

  # LoadBalancer
  LoadBalancer:
    Type: AWS::CloudFormation::Stack
    Condition: RequiresAlbCreation
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/load-balancer.yaml"
      Parameters:
        LoadBalancerName: !Ref ProjectName
        Subnets: !Ref VpcSubnets
        VpcId: !Ref VpcId
        RaddApiCertificateArn: !Ref RaddApiCertificateArn
        RaddApiDnsName: !Ref RaddApiDnsName
        HostedZoneId: !Ref HostedZoneId
        InternalNlbIps: !Ref InternalNlbIps

  # Load balancer private fixed DNS
  Route53RecordSetGroup:
    Condition: RequiresAlbCreation
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub 'alb.core.${ProjectName}.internal'
      Type: A
      HostedZoneId: !Ref PrivateHostedZone  
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.Outputs.ApplicationLoadBalancerDomain 
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt LoadBalancer.Outputs.ApplicationLoadBalancerDomainZone

  ###                             ECS CLUSTER                             ###
  ###########################################################################

  # The cluster
  ECSCluster:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/ecs-cluster.yaml"
      Parameters:
        MacroServiceName: !Sub '${ProjectName}-core'
  
  # Exporter role
  LogsExporterRole:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/log-bucket-access-role.yaml"
      Parameters:
        ProjectName: !Ref ProjectName
        LogsBucketName: !Ref LogsBucketName
        LogsBucketKmsKeyArn: !Ref LogsBucketKmsKeyArn
        DataLakeAccountId1: !Ref DataLakeAccountId1
        DataLakeAccountId2: !Ref DataLakeAccountId2
        SafeStorageAccountId: !Ref SafeStorageAccountId
        BucketSuffix: !Ref BucketSuffix 

  ###                             ELASTIC FILE SYSTEM                     ###
  ###########################################################################

  FargateEFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
        PerformanceMode: generalPurpose
        Encrypted: true
        ThroughputMode: bursting
        FileSystemTags: 
          - 
            Key: Name
            Value: Fargate-EFS

  # create each mountpoint for internal subnet:
  MountFargateEfsTarget1:
      Type: AWS::EFS::MountTarget
      Properties: 
          FileSystemId: !Ref FargateEFSFileSystem
          SecurityGroups: 
            - !Ref EFSSecurityGroup
          SubnetId: !Select [0, !Split [",", !Ref SubnetsIds]] 

  MountFargateEfsTarget2:
      Type: AWS::EFS::MountTarget
      Properties: 
          FileSystemId: !Ref FargateEFSFileSystem
          SecurityGroups: 
            - !Ref EFSSecurityGroup
          SubnetId: !Select [1, !Split [",", !Ref SubnetsIds]] 

  MountFargateEfsTarget3:
      Type: AWS::EFS::MountTarget
      Properties: 
          FileSystemId: !Ref FargateEFSFileSystem
          SecurityGroups: 
            - !Ref EFSSecurityGroup
          SubnetId: !Select [2, !Split [",", !Ref SubnetsIds]] 

  MountFargateEfsTarget4:
      Type: AWS::EFS::MountTarget
      Properties: 
          FileSystemId: !Ref FargateEFSFileSystem
          SecurityGroups: 
            - !Ref EFSSecurityGroup
          SubnetId: !Select [0, !Split [",", !Ref VpcEgressSubnetsIds]]

  MountFargateEfsTarget5:
      Type: AWS::EFS::MountTarget
      Properties: 
          FileSystemId: !Ref FargateEFSFileSystem
          SecurityGroups: 
            - !Ref EFSSecurityGroup
          SubnetId: !Select [1, !Split [",", !Ref VpcEgressSubnetsIds]]

  MountFargateEfsTarget6:
      Type: AWS::EFS::MountTarget
      Properties: 
          FileSystemId: !Ref FargateEFSFileSystem
          SecurityGroups: 
            - !Ref EFSSecurityGroup
          SubnetId: !Select [2, !Split [",", !Ref VpcEgressSubnetsIds]]

  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: EFS Security Group
      SecurityGroupIngress:
        # All Subnet can mount EFS:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
      Tags:
        - Key: Name
          Value: sg-efs-fargate

  EfsFargateAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref FargateEFSFileSystem
      RootDirectory:
        CreationInfo:
          OwnerGid: "1000"
          OwnerUid: "1000"
          Permissions: "0755"
        Path: /ecs
  
  ###                       CLOUDFORMATION TRANSFORM LAMBDAS              ###
  ###########################################################################

  UpdateDeploymentTransform:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/lambda-update-deployment-transform.yaml"

  CloudWatchDashboardTransform:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/lambda-cloudwatch-dashboard-transform.yaml"

Outputs:

  # VPC outputs
  VpcId:
    Value: !Ref VpcId
    Description: infrastructure VPC id

  SubnetsIds:
    Value: !Ref VpcSubnets
    Description: Subnets

  # Load balancers outputs
  NetworkLoadBalancerLink:
    Value: !If [ RequiresAlbCreation, !GetAtt LoadBalancer.Outputs.NetworkLoadBalancerLink, !Ref NetworkLoadBalancerLink ]
    Description: Used by API-Gw to connect into VPC

  ApplicationLoadBalancerListenerArn:
    Value: !If [ RequiresAlbCreation, !GetAtt LoadBalancer.Outputs.ApplicationLoadBalancerListenerArn, !Ref ApplicationLoadBalancerListenerArn ]
    Description: Application Load Balancerlistener Arn

  ApplicationLoadBalancerDomain:
    Value: !If [ RequiresAlbCreation, !GetAtt LoadBalancer.Outputs.ApplicationLoadBalancerDomain, !Ref ApplicationLoadBalancerAwsDns ]
    Description: Application Load Balancer Domain to use for http URL

  AlbSecurityGroup:
    Value: !If [ RequiresAlbCreation, !GetAtt LoadBalancer.Outputs.AlbSecurityGroup, !Ref WebappSecurityGroupId ]

  # ECS Cluster
  ECSClusterName:
    Value: !GetAtt ECSCluster.Outputs.ClusterName
    Description: ECS cluster name
  
  # Log exports outputs
  LogsExporterRoleArn:
    Description: Role used to export logs to external bucket
    Value: !GetAtt LogsExporterRole.Outputs.LogsIngestionRoleArn
  LogsExporterPolicyArn:
    Description: Policy used by LogsExporterRoleArn Role
    Value: !GetAtt LogsExporterRole.Outputs.LogsIngestionPolicyArn
    
  LogRetention:
    Value: !Ref LogRetention
    
  # pass-though parameters
  AlarmSNSTopicArn:
    Value: !Ref AlarmSNSTopicArn
  AlarmSNSTopicName:
    Value: !Ref AlarmSNSTopicName
  EcsDefaultSecurityGroup:
    Value: !Ref EcsDefaultSecurityGroup
  SafeStorageAccountId:
    Value: !Ref SafeStorageAccountId
  LogsBucketKmsKeyArn:
    Value: !Ref LogsBucketKmsKeyArn
  LogsBucketName:
    Value: !Ref LogsBucketName
  CdcKinesisStreamName:
    Value: !Ref CdcKinesisStreamName
  CdcKinesisStreamArn:
    Value: !Ref CdcKinesisStreamArn
  CdcKinesisStreamKeyArn:
    Value: !Ref CdcKinesisStreamKeyArn
  LogsKinesisStreamName:
    Value: !Ref LogsKinesisStreamName
  LogsKinesisStreamArn:
    Value: !Ref LogsKinesisStreamArn
  LogsKinesisStreamKeyArn:
    Value: !Ref LogsKinesisStreamKeyArn
  ApiKeyTablesEncryptKeyId:
    Value: !Ref ApiKeyTablesEncryptKeyId
  SafestorageLoggerLogGroupName:
    Value: !Ref SafestorageLoggerLogGroupName
  VpcEgressSubnetsIds:
    Value: !If [ IsEgressDefined, !Ref VpcEgressSubnetsIds, !Ref VpcSubnets ]