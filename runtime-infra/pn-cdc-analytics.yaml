AWSTemplateFormatVersion: '2010-09-09'
Description: Create base resources for CDC files analysis

Parameters:
  ProjectName:
    Type: String
    Default: pn
    Description: Base name for pn project
  LogsBucketName:
    Type: String
    Description: Logs bucket name
  BucketSuffix:
    Type: String
    Description: Suffix for the athena result bucket name
  LogsBucketKmsKeyArn:
    Type: String
    Description: Arn of logs bucket KMS key

Resources:
  GlueServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetBucketLocation
                  - s3:ListBucket
                  - s3:GetObject
                Resource:
                  - !Sub arn:aws:s3:::${LogsBucketName}
                  - !Sub arn:aws:s3:::${LogsBucketName}/*
        - PolicyName: S3EncryptionAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetEncryptionConfiguration
                Resource:
                  - !Sub arn:aws:s3:::${LogsBucketName}
        - PolicyName: KMSEncryptionAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                Resource:
                  - !Ref LogsBucketKmsKeyArn

  AthenaWorkGroup:
    Type: AWS::Athena::WorkGroup
    DependsOn: GlueServiceRole
    Properties:
      Name: cdc_analytics_workgroup
      Description: Workgroup for querying data in Athena
      State: ENABLED
      WorkGroupConfiguration:
        ResultConfiguration:
          OutputLocation: !Sub s3://${AthenaResultsBucket}/

  GlueDatabase:
    Type: AWS::Glue::Database
    DependsOn: AthenaWorkGroup
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: cdc_analytics_database

  AthenaResultsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub ${ProjectName}-cdc-analytics-athena-results-${AWS::Region}-${AWS::AccountId}-${BucketSuffix}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  AthenaResultsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AthenaResultsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: athena.amazonaws.com
            Action:
              - s3:PutObject
              - s3:GetObject
            Resource:
              - !Sub arn:aws:s3:::${AthenaResultsBucket}/*
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
          - Effect: Allow
            Principal:
              Service: athena.amazonaws.com
            Action:
              - s3:ListBucket
            Resource:
              - !Sub arn:aws:s3:::${AthenaResultsBucket}
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId

  

  ###############################################################################
  ###                       UPDATE CDC JSON VIEWS CACHE                       ###
  ###############################################################################

  UpdateCdcJsonViewsCodebuildProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: "pn-athena-update-cdc-json-cache"
      ServiceRole: !GetAtt UpdateCdcJsonViewsCodebuildServiceRole.Arn
      ConcurrentBuildLimit: 1
      TimeoutInMinutes: 60
      Source: 
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - |
                  usage() {
                          cat <<EOF
                      Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] -e <env-type> 
                      [-h]                      : this help message
                      -e <env-type>             : one of dev / uat / svil / coll / cert / prod
                  EOF
                      exit 1
                  }
                  dump_params(){
                      if ( [ -z "$DATE" ] ) then
                        export DATE=$( date -I)
                      fi

                      echo ""
                      echo "######      PARAMETERS      ######"
                      echo "##################################"
                      echo "Region:                ${region}"
                      echo "AccountId:             ${account_id}"
                      echo "Athena Output Bucket:  ${athena_output_bucket}"
                      echo "Reference Date::       ${DATE}"
                      
                      if ( [ -z "${region-}" ] ) then
                      usage
                      fi
                      if ( [ -z "${account_id-}" ] ) then
                      usage
                      fi
                      if ( [ -z "${athena_output_bucket-}" ] ) then
                      usage
                      fi
                  }
                  dump_params
            build:
              commands:
                - export aws_command_base_args=""
                - |
                  echo "- List views to update"
                  export crawlers_list=$(
                    aws ${aws_command_base_args} \
                        glue list-crawlers \
                        --max-results 100 \
                        --tags '{"PnHasView":"true"}' \
                    | jq -r '.CrawlerNames | .[]'
                  )
                - |
                  echo "Found $( echo $crawlers_list | wc -w  ) view(s) to update " 
                - |
                  for crawler_name in $crawlers_list 
                  do
                    crawler_tags=$(
                      aws ${aws_command_base_args} \
                          glue get-tags \
                          --resource-arn "arn:aws:glue:${region}:${account_id}:crawler/${crawler_name}" \
                        | jq -r '.Tags | tojson' \
                    )

                    json_view=$( echo $crawler_tags | jq -r '.PnView' )
                    cache_table=$( echo $crawler_tags | jq -r '.PnViewCache' )
                    echo "- Update cache ${cache_table} from view ${json_view}"

                    query="INSERT INTO \"${database_name}\".\"${cache_table}\" \n\
                          ( \n\
                            SELECT * FROM \"${database_name}\".\"${json_view}\" \n\
                              WHERE p_year = lpad( cast( year( date_add('day', -1, date('$DATE') )) as varchar), 4, '0') \n\
                                AND p_month = lpad( cast( month( date_add('day', -1, date('$DATE') )) as varchar), 2, '0') \n\
                                AND p_day = lpad( cast( day( date_add('day', -1, date('$DATE') )) as varchar), 2, '0') 
                            EXCEPT
                            SELECT * FROM \"${database_name}\".\"${cache_table}\" \n\
                              WHERE p_year = lpad( cast( year( date_add('day', -1, date('$DATE') )) as varchar), 4, '0') \n\
                                AND p_month = lpad( cast( month( date_add('day', -1, date('$DATE') )) as varchar), 2, '0') \n\
                                AND p_day = lpad( cast( day( date_add('day', -1, date('$DATE') )) as varchar), 2, '0') \n\
                          ) \n\
                    "
                    
                    echo "  Start execute query \n      ${query}" 
                    echo "${query}" > query.txt
                    queryExecutionId=$(
                        aws ${aws_command_base_args} \
                            athena start-query-execution \
                            --query-string file://query.txt \
                            --result-configuration "OutputLocation=s3://${athena_output_bucket}/cache_updates/${cache_table}"\
                          | jq -r '.QueryExecutionId' \
                      )
                    if ( [ "${queryExecutionId}" = "" ] ) then
                      exit 1
                    fi

                    executionDone="false"
                    
                    while ( [ "${executionDone}" != "true" ] ) do
                      echo " Wait query ${queryExecutionId} execution"
                      sleep 5
                      executionState=$( 
                          aws ${aws_command_base_args} \
                              athena get-query-execution \
                              --query-execution-id ${queryExecutionId} \
                            | jq -r '.QueryExecution.Status.State' \
                      )
                      echo " Execution ${executionState}"
                      
                      if ( [ "${executionState}" = "FAILED" ] ) then
                        echo -n " Reason: "
                        aws ${aws_command_base_args} \
                              athena get-query-execution \
                              --query-execution-id ${queryExecutionId} \
                            | jq -r '.QueryExecution.Status.StateChangeReason'
                        exit 2
                      fi
                      if ( [ "${executionState}" = "SUCCEEDED" ] ) then
                        executionDone="true"
                      fi
                    done
                  done
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: "aws/codebuild/standard:7.0"
        EnvironmentVariables:
          - Name: region
            Type: PLAINTEXT
            Value: !Ref AWS::Region
          - Name: account_id
            Type: PLAINTEXT
            Value: !Ref AWS::AccountId
          - Name: database_name
            Type: PLAINTEXT
            Value: !Ref GlueDatabase
          - Name: athena_output_bucket
            Type: PLAINTEXT
            Value: !Ref AthenaResultsBucket
          - Name: DATE
            Type: PLAINTEXT
            Value: ''
          
  UpdateCdcJsonViewsCodebuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: pn-athena-update-cdc-json-cache-codebuild-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: pn-athena-update-cdc-json-cache-codebuild-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: CanLog
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Sid: CanListCrawlers
                Effect: Allow
                Action:
                  - "glue:BatchGetCrawlers"
                  - "glue:ListCrawlers"
                  - "glue:GetTags"
                  - "glue:GetTable"
                  - "glue:GetTables"
                  - "glue:GetDatabase"
                  - "glue:GetDatabases"
                Resource:
                  - "*"
              - Sid: CanExecuteQuery
                Effect: Allow
                Action:
                  - "athena:BatchGetQueryExecution"
                  - "athena:GetQueryExecution"
                  - "athena:StartQueryExecution"
                Resource:
                  - "*"
              - Sid: CanCheckOutputBucketLocation
                Effect: Allow
                Action:
                  - s3:GetBucketLocation
                Resource:
                  - !Sub arn:aws:s3:::${AthenaResultsBucket}
              - Sid: WriteAndReadQueryResult
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource:
                  - !Sub arn:aws:s3:::${AthenaResultsBucket}/cache_updates/*
              - Sid: ReadLogBucket
                Effect: Allow
                Action:
                  - s3:GetBucketLocation
                  - s3:GetEncryptionConfiguration
                  - s3:ListBucket
                  - s3:GetObject
                Resource:
                  - !Sub arn:aws:s3:::${LogsBucketName}
                  - !Sub arn:aws:s3:::${LogsBucketName}/*
              - Sid: DecriptLogBucket
                Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                Resource:
                  - !Ref LogsBucketKmsKeyArn
              - Sid: ReadWriteDestination
                Effect: Allow
                Action:
                  - s3:GetBucketLocation
                  - s3:GetEncryptionConfiguration
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${LogsBucketName}
                  - !Sub arn:aws:s3:::${LogsBucketName}/cdcTos3_parsed/*
              - Sid: EncryptDecriptDestination
                Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:Encrypt
                  - kms:GenerateDataKey
                  - kms:ReEncrypt*
                  - kms:DescribeKey
                Resource:
                  - !Ref LogsBucketKmsKeyArn
              
  UpdateCdcJsonViewsScheduleBridgeRule:
    Type: AWS::Events::Rule
    Properties: 
      Description: Schedule json views cache update everyday at 3AM UTC time.
      RoleArn: !GetAtt "EventBusRunCodeBuildRole.Arn"
      ScheduleExpression: "cron(0 3 * * ? *)"
      State: "ENABLED"
      Targets: 
        - Id: "UpdateCdcJsonViewsBridgeRule-CbTarget"
          Arn: !GetAtt UpdateCdcJsonViewsCodebuildProject.Arn
          RoleArn: !GetAtt "EventBusRunCodeBuildRole.Arn"
  

  # - Role and policy used to activate CodeBuild from EventBridge rule
  EventBusRunCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyName: runCodeBuild
          PolicyDocument:
            Statement:
              - Sid: startProjectRun
                Action:
                  - "codebuild:*"
                Effect: Allow
                Resource: 
                  - !GetAtt UpdateCdcJsonViewsCodebuildProject.Arn


Outputs:
  GlueDatabaseName:
    Description: Name of the Glue Database
    Value: !Ref GlueDatabase
    Export:
      Name: !Sub ${AWS::StackName}-GlueDatabaseName

  GlueDatabaseArn:
    Description: ARN of the Glue Database
    Value: !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/${GlueDatabase}
    Export:
      Name: !Sub ${AWS::StackName}-GlueDatabaseArn
  
  GlueServiceRoleArn:
    Description: ARN of the Glue Service Role
    Value: !GetAtt GlueServiceRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-GlueServiceRoleArn"