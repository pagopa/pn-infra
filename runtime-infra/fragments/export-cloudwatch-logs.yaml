AWSTemplateFormatVersion: "2010-09-09"
Description: Kinesis Firehose - Ingest Account

Parameters:

  ProjectName:
    Type: String 
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'

  LogsBucketName:
    Type: String 
    Description: Name of the destination bucket
  
  LogsExporterRoleArn:
    Type: String 
    Description: Role used to access the S3 bucket where logs are exported
  
  StreamNamePrefix:
    Type: String 
    Description: to distinguish different log groups streams

  LogGroupName:
    Type: String
    Description: LogGroup name
  
  RetentionTag:
    Type: String
    Description: S3 path segment used to distinguish retention periods
  
  CloudwatchFilterPattern:
    Type: String
    Description: Filter expression used to choose the logs to write to the stream
  
  StreamRetentionPeriodHours:
    Type: String
    Description: Retention of the kinesis stream used to stream logs

  StreamShardCount:
    Type: String
    Description: number of shard in the source logs stream

Conditions:
  ExportLogs: !Not [ !Equals [ !Ref LogsBucketName, '' ] ]

Resources:

  ### Subscription filters with Kinesis  https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/SubscriptionFilters.html#DestinationKinesisExample
  # SubscriptionFilter: 
  #   Condition: ExportLogs
  #   Type: AWS::Logs::SubscriptionFilter
  #   Properties: 
  #     RoleArn: 
  #       Fn::GetAtt: 
  #         - "SubscriptionFilterServiceRole"
  #         - "Arn"
  #     LogGroupName: !Ref LogGroupName
  #     FilterPattern: !Ref CloudwatchFilterPattern
  #     DestinationArn:
  #       Fn::GetAtt:
  #         - CloudwatchLogKinesisStream
  #         - Arn

  ### IAM Role used by Subscription filters to allow read logs from Cloudwatch and send logs to Kinesis Firehose           
  SubscriptionFilterServiceRole:
    Condition: ExportLogs
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: logs.amazonaws.com
        Version: "2012-10-17"
      Path: /
      Policies:
        -
          PolicyName: !Sub '${ProjectName}-${StreamNamePrefix}-${RetentionTag}-log-subscription-role'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Action:
                  - "firehose:*"
                  - "kinesis:*"
                Effect: "Allow"
                Resource:
                  - "*"

  ### AWS KMS / Server-side encryption for Kinesis Stream 
  # https://docs.aws.amazon.com/streams/latest/dev/server-side-encryption.html
  CloudwatchLogKinesisStreamEncryptionKey:
    Condition: ExportLogs
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Statement:
          - Action: kms:*
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":iam::"
                    - Ref: AWS::AccountId
                    - :root
            Resource: "*"
        Version: "2012-10-17"
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain

  ### Kinesis Data Stream 
  CloudwatchLogKinesisStream:
    Condition: ExportLogs
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub '${ProjectName}-${StreamNamePrefix}-${RetentionTag}-stream'
      RetentionPeriodHours: !Ref StreamRetentionPeriodHours
      ShardCount: !Ref StreamShardCount
      StreamEncryption:
        EncryptionType: KMS
        KeyId:
          Fn::GetAtt:
            - CloudwatchLogKinesisStreamEncryptionKey
            - Arn
      StreamModeDetails:
        StreamMode: PROVISIONED
  
  ### Read Only role for external user
  KinesisStreamReadOnlyRole:
    Condition: ExportLogs
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${StreamNamePrefix}-${RetentionTag}-stream-readonly-role'
      Description: !Sub 'Role for Firehose stream to receive data from ${ProjectName}-${StreamNamePrefix}-${RetentionTag}-stream'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
      Policies:
        - PolicyName: AllowLogging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: readRecordsAndListShards
                Effect: Allow
                Action:
                  - kinesis:DescribeStream
                  - kinesis:DescribeStreamSummary
                  - kinesis:GetShardIterator
                  - kinesis:GetRecords
                  - kinesis:ListShards    
                  - kinesis:ListStreams
                  - kinesis:SubscribeToShard
                Resource: !GetAtt 'CloudwatchLogKinesisStream.Arn'
              - Sid: decryptMessages
                Action: kms:Decrypt
                Effect: Allow
                Resource: !GetAtt 'CloudwatchLogKinesisStreamEncryptionKey.Arn'

  ### - CloudWatchLoggingOptions - LogGroup output kinesis stream 
  #########################################
  DeliveryStreamLogGroup:
    Condition: ExportLogs
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 120
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain

  ### - CloudWatchLoggingOptions - LogStream output kinesis stream 
  #########################################
  DeliveryStreamLogGroupS3Destination:
    Condition: ExportLogs
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName:
        Ref: DeliveryStreamLogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  

  ### - Delivery Stream to send cloudwatch Logs to S3 bucket
  ############################################################
  LogsKinesisDeliveryStream:
    Condition: ExportLogs
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub '${ProjectName}-${StreamNamePrefix}-${RetentionTag}-delivery-stream'
      DeliveryStreamType: KinesisStreamAsSource
      ExtendedS3DestinationConfiguration: 
        BucketARN: !Sub arn:aws:s3:::${LogsBucketName}
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 64
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName:
            Ref: DeliveryStreamLogGroup
          LogStreamName:
            Ref: DeliveryStreamLogGroupS3Destination
        Prefix: !Sub 'logs/${RetentionTag}/${StreamNamePrefix}/'
        ErrorOutputPrefix: !Sub 'errors/logs/${RetentionTag}/${StreamNamePrefix}/'
        RoleARN: !Ref LogsExporterRoleArn

