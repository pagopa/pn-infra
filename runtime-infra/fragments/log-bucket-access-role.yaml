AWSTemplateFormatVersion: '2010-09-09'
Description: Create Kinesis Firehose Delivery Stream from DynamoDB and Cloudwatch Data Stream

Parameters:
  
  ProjectName:
    Type: String
    Default: pn
    Description: Base name for pn project
  
  LogsBucketName:
    Type: String 
    Description: Name of the destination bucket
  
  LogsBucketKmsKeyArn:
    Type: String
    Description: Log bucket key ARN

  DataLakeAccountId1:
    Type: String
    Default: '-'
    Description: Data lake can read logs
  
  DataLakeAccountId2:
    Type: String
    Default: '-'
    Description: Data lake can read logs
  
  SafeStorageAccountId:
    Type: String
    Default: '-'
    Description: Safestorage Account ID

Conditions:

  ExportLogs: !Not [ !Equals [ !Ref LogsBucketName, '' ] ]
  ActivateDataLakeRead1Condition: !Not [ !Equals [ !Ref DataLakeAccountId1, '-' ]]
  ActivateDataLakeRead2Condition: !Not [ !Equals [ !Ref DataLakeAccountId2, '-' ]]
  ActivateDataLakeReadAnyCondition: 
    Fn::Or: 
      - !Not [ !Equals [ !Ref DataLakeAccountId1, '-' ]] 
      - !Not [ !Equals [ !Ref DataLakeAccountId2, '-' ]] 

  HasStorageStorageAccountId: !Not [ !Equals [ !Ref SafeStorageAccountId, '-' ]]

Resources:

  ### - IAM role assumed by data lake
  ###########################################
  LogBucketReadOnlyRole:
    Condition: ActivateDataLakeReadAnyCondition
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              AWS: 
                - Fn::If: 
                  - ActivateDataLakeRead1Condition
                  - !Sub arn:aws:iam::${DataLakeAccountId1}:root
                  - !Ref AWS::NoValue
                - Fn::If: 
                  - ActivateDataLakeRead2Condition
                  - !Sub arn:aws:iam::${DataLakeAccountId2}:root
                  - !Ref AWS::NoValue
            Condition:
              StringEquals:
                "sts:ExternalId": !Sub "{{resolve:secretsmanager:${ProjectName}-logs-data-lake-role-access:SecretString:ExternalId}}"
      Path: "/"
      Policies:
        - PolicyName: ReadLogBucketPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            # Allow data lake to read the bucket items
            - Effect: Allow
              Action:
                - "s3:Get*"
                - "s3:List*"
                - "s3-object-lambda:Get*"
                - "s3-object-lambda:List*"
              Resource: 
                - !Sub "arn:aws:s3:::${LogsBucketName}"
                - !Sub "arn:aws:s3:::${LogsBucketName}/*"
            # Allow the use of encryption key
            - Effect: Allow
              Action:
                - kms:Encrypt
                - kms:Decrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: 
                - !Sub "${LogsBucketKmsKeyArn}"

  CloudTrailDestinationBucketResourcePolicy:
    Type: AWS::S3::BucketPolicy
    Condition: HasStorageStorageAccountId
    Properties: 
      Bucket: !Ref LogsBucketName
      PolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "AWSCloudTrailWriteAclCheck",
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudtrail.amazonaws.com"
              },
              "Action": [
                "s3:GetBucketAcl"
              ],
              "Resource": [
                "arn:${AWS::Partition}:s3:::${LogsBucketName}"
              ],
              "Condition":{
                "StringLike":{
                  "aws:SourceArn": [ 
                    "arn:${AWS::Partition}:cloudtrail:${AWS::Region}:${SafeStorageAccountId}:trail/*"
                  ]
                }
              }
            },
            {
              "Sid": "AWSCloudTrailWrite",
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudtrail.amazonaws.com"
              },
              "Action": [
                "s3:PutObject"
              ],
              "Resource": [
                "arn:${AWS::Partition}:s3:::${LogsBucketName}/safeStorageObjectPutAndGetTracing/*"
              ],
              "Condition":{
                "StringLike":{
                  "aws:SourceArn": [ 
                    "arn:${AWS::Partition}:cloudtrail:${AWS::Region}:${SafeStorageAccountId}:trail/*"
                  ]                  
                }
              }
            }
          ]
        }

  LogsIngestionRole:
    Condition: ExportLogs
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub '${ProjectName}-logs-ingestion-role'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "firehose.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - !Ref LogsIngestionPolicy

  LogsIngestionPolicy:
    Condition: ExportLogs
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Sub '${ProjectName}-ingest-logs-to-s3-policy'
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "s3:PutObject"
              - "s3:PutObjectAcl"
              - "s3:AbortMultipartUpload"
              - "s3:GetBucketLocation"
              - "s3:GetObject"
              - "s3:ListBucket"
              - "s3:ListBucketMultipartUploads"
            Effect: "Allow"
            Resource:
              - !Sub "arn:aws:s3:::${LogsBucketName}"
              - !Sub "arn:aws:s3:::${LogsBucketName}/*"
          - Action:
              - "logs:PutLogEvents"
            Effect: "Allow"
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:pn-logs-export-*:*'
          - Action:
              - "kms:Encrypt"
              - "kms:GenerateDataKey"
              - "kms:Decrypt"
            Effect: "Allow"
            Resource:
              - !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*'
            Condition:
              StringEquals:
                "kms:ViaService": !Sub s3.${AWS::Region}.amazonaws.com


Outputs:
  LogsIngestionRoleArn:
    Value: 
      Fn::If: 
       - ExportLogs
       - !GetAtt LogsIngestionRole.Arn
       - ''
  LogsIngestionPolicyArn:
    Value:
      Fn::If:
        - ExportLogs
        - !Ref LogsIngestionPolicy
        - ''

  LogsBucketReadOnlyRoleArn:
    Value: 
      Fn::If:
        - ActivateDataLakeReadAnyCondition
        - !GetAtt LogBucketReadOnlyRole.Arn
        - ''