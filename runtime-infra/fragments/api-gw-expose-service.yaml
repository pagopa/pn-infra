AWSTemplateFormatVersion: '2010-09-09'
Description: 'Expose a microservice API using API-GW. This template can expose API for B2B or WEB usage'

Transform:
  - UpdateDeploymentTransform

Parameters:

  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
        experimental environments without crash official development environment'

  MicroServiceUniqueName:
    Type: String
    Description: Microservice unique name

  DnsName:
    Type: String
    Description: Custom DNS to register this api to

  IntendedUsage:
    Type: String
    AllowedValues:
      - B2B
      - WEB
      - IO
      - BACKOFFICE
      - PNPG
    Description: B2B, WEB, BACKOFFICE, PNPG or IO usage. Used from other back-end system or used from a browser

  ServiceApiPath:
    Type: String
    Description: path of the exposed API

  NetworkLoadBalancerLink:
    Type: String
    Description: Link inside the VPC

  ApplicationLoadBalancerDomain:
    Type: String
    Description: Application load balancer that dispatch request to microserveces

  AlarmSNSTopicArn:
    Type: String
    Description: ARN of SNS topic where to send alarm when log line includes 5XX and 4XX errors

  # - Log exports parameters
  CloudwatchFilterPattern:
    Default: ''
    Type: String
    Description: filter expression for exported logs

  CloudwatchLogKinesisStreamArn:
    Default: ''
    Type: String
    Description: where to send logs

  ApiGwLatencyLimit:
    Default: 2000
    Type: Number
    Description: Latency limit before raising alarm (milliseconds)

  OpenApiBucketName:
    Type: String
    Default: ''
    Description: Bucket name where the OpenAPI files are located

  OpenApiBucketKey:
    Type: String
    Default: ''
    Description: Bucket key of the OpenAPI file in the s3 bucket

  AlarmOn4xx:
    Type: String
    Default: 'false'
    Description: Alarms enable on 4xx
    AllowedValues:
      - 'true'
      - 'false'

Conditions:
  IsWeb: !Equals [ !Ref IntendedUsage, 'WEB' ]
  IsB2B: !Equals [ !Ref IntendedUsage, 'B2B' ]
  IsIO: !Equals [ !Ref IntendedUsage, 'IO' ]
  IsPNPG: !Equals [ !Ref IntendedUsage, 'PNPG' ]
  IsBackoffice: !Equals [ !Ref IntendedUsage, 'BACKOFFICE' ]
  UseApiKey: !Or [ !Equals [ !Ref IntendedUsage, 'B2B' ], !Equals [ !Ref IntendedUsage, 'IO' ], !Equals [ !Ref IntendedUsage, 'PNPG' ] ]
  SendLogToKinesis: !Not [ !Equals [ !Ref CloudwatchLogKinesisStreamArn, '' ] ]
  HasOpenApiBucketName: !Not [ !Equals [ !Ref OpenApiBucketName, '' ] ]
  HasOpenApiBucketKey: !Not [ !Equals [ !Ref OpenApiBucketKey, '' ] ]
  HasOpenApiSpecs: !And [ !Condition HasOpenApiBucketName, !Condition HasOpenApiBucketKey ]
  IsWebOrBackoffice: !Or [ !Condition IsWeb, !Condition IsBackoffice ]
  AlarmOn4xxEnabled: !Equals [ !Ref AlarmOn4xx, 'true' ]
Resources:

  # API definition
  PublicRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Tags:
        - Key: "PN_APIGW_TYPE"
          Value: !Ref IntendedUsage
        - Fn::If:
          - HasOpenApiSpecs
          - Key: "PN_OPENAPI_BUCKET_NAME"
            Value: !Ref OpenApiBucketName
          - !Ref AWS::NoValue
        - Fn::If:
          - HasOpenApiSpecs
          - Key: "PN_OPENAPI_BUCKET_KEY"
            Value: !Ref OpenApiBucketKey   
          - !Ref AWS::NoValue
        - Key: "PN_SERVICE_PATH"
          Value: !Ref ServiceApiPath
      Name: !Sub '${MicroServiceUniqueName}-public-api-${IntendedUsage}'
      FailOnWarnings: true
      DisableExecuteApiEndpoint: true      
      ApiKeySourceType: !If [ IsB2B, AUTHORIZER, HEADER ]
      EndpointConfiguration:
        Types:
          - REGIONAL
  
  # /v3/api-docs resource
  PublicApiV3Resource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PublicRestApi
      ParentId: !GetAtt PublicRestApi.RootResourceId
      PathPart: v3
  PublicApiV3ApiDocsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PublicRestApi
      ParentId: !Ref PublicApiV3Resource
      PathPart: api-docs
  
  # /v3/api-docs methods
  PublicApiV3ApiDocsAnyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: !Sub 'Proxy to ${MicroServiceUniqueName} public api-docs'
      RestApiId: !Ref PublicRestApi
      ResourceId: !Ref PublicApiV3ApiDocsResource
      HttpMethod: ANY
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        ConnectionType: VPC_LINK
        ConnectionId: !Ref NetworkLoadBalancerLink
        IntegrationHttpMethod: ANY
        Type: HTTP_PROXY
        Uri: !Sub 'http://${ApplicationLoadBalancerDomain}:8080/${ServiceApiPath}/v3/api-docs'
        PassthroughBehavior: "WHEN_NO_MATCH"
        TimeoutInMillis: 29000
  

  # /{proxy+} resource
  PublicApiProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PublicRestApi
      ParentId: !GetAtt PublicRestApi.RootResourceId
      PathPart: '{proxy+}'
  
  # /{proxy+} OPTIONS method
  PublicApiProxyAnyCorsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: !Sub 'Proxy to ${MicroServiceUniqueName} public API CORS'
      RestApiId: !Ref PublicRestApi
      ResourceId: !Ref PublicApiProxyResource
      HttpMethod: OPTIONS
      ApiKeyRequired: false
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        ConnectionType: VPC_LINK
        ConnectionId: !Ref NetworkLoadBalancerLink
        IntegrationHttpMethod: ANY
        Type: HTTP_PROXY
        Uri: !Sub 'http://${ApplicationLoadBalancerDomain}:8080/${ServiceApiPath}/{proxy}'
        RequestParameters:
          integration.request.path.proxy: method.request.path.proxy
        PassthroughBehavior: "WHEN_NO_MATCH"
        TimeoutInMillis: 29000
  # /{proxy+} not OPTIONS methods
  PublicApiProxyAnyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: !Sub 'Proxy to ${MicroServiceUniqueName} public API'
      RestApiId: !Ref PublicRestApi
      ResourceId: !Ref PublicApiProxyResource
      HttpMethod: ANY
      ApiKeyRequired: !If [ UseApiKey, true, false]
      AuthorizationType: !If [ IsPNPG, NONE, CUSTOM]
      AuthorizerId:
        Fn::If:
          - IsBackoffice
          - !Ref BackofficeAuthorizer
          - Fn::If:
            - IsB2B
            - !Ref ApiKeyAuthorizerV2
            - Fn::If:
              - IsIO
              - !Ref IoAuthorizer
              - Fn::If:
                - IsPNPG
                - !Ref AWS::NoValue
                - !Ref JwtAuthorizer
      RequestParameters:
        Fn::If:
          - IsIO
          - method.request.path.proxy: true
            method.request.header.x-pagopa-cx-taxid: true
          - Fn::If:
              - IsWebOrBackoffice
              - method.request.path.proxy: true
                method.request.header.Authorization: true
              - method.request.path.proxy: true
      Integration:
        ConnectionType: VPC_LINK
        ConnectionId: !Ref NetworkLoadBalancerLink
        IntegrationHttpMethod: ANY
        Type: HTTP_PROXY
        Uri: !Sub 'http://${ApplicationLoadBalancerDomain}:8080/${ServiceApiPath}/{proxy}'
        RequestParameters:
          integration.request.path.proxy: method.request.path.proxy
          integration.request.header.x-pagopa-pn-uid: context.authorizer.uid
          integration.request.header.x-pagopa-pn-cx-id: context.authorizer.cx_id
          integration.request.header.x-pagopa-pn-cx-type: context.authorizer.cx_type
          integration.request.header.x-pagopa-pn-cx-groups: context.authorizer.cx_groups
          integration.request.header.x-pagopa-pn-cx-role: context.authorizer.cx_role
          integration.request.header.x-pagopa-pn-jti: context.authorizer.cx_jti
          integration.request.header.x-pagopa-pn-src-ch: !Sub "'${IntendedUsage}'"
        PassthroughBehavior: "WHEN_NO_MATCH"
        TimeoutInMillis: 29000

  GatewayResponse4XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      ResponseType: DEFAULT_4XX
      RestApiId: !Ref PublicRestApi

  GatewayResponse5XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      ResponseType: DEFAULT_5XX
      RestApiId: !Ref PublicRestApi

  # Deployment
  PublicRestApiDeploymentPnPlaceholderEpochSeconds:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - PublicApiProxyAnyMethod
      - PublicApiProxyAnyCorsMethod
      - PublicApiV3ApiDocsAnyMethod
    Properties:
      RestApiId: !Ref PublicRestApi

  # Stage
  PublicRestApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref PublicRestApi
      StageName: unique
      TracingEnabled: true
      DeploymentId: !Ref PublicRestApiDeploymentPnPlaceholderEpochSeconds
      AccessLogSetting:
        DestinationArn: !GetAtt "PublicApiLogGroup.Arn"
        Format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","resourcePath":"$context.resourcePath","status":$context.status,"responseLatency":$context.responseLatency,"xrayTraceId":"$context.xrayTraceId","errorMessage":"$context.error.message","validationError":"$context.error.validationErrorString","integrationRequestId":"$context.integration.requestId","functionResponseStatus":"$context.integration.status","integrationLatency":"$context.integration.latency","integrationServiceStatus":"$context.integration.integrationStatus","authorizeStatus":"$context.authorize.status","authorizerStatus":"$context.authorizer.status","authorizerLatency":"$context.authorizer.latency","authorizerRequestId":"$context.authorizer.requestId","ip":"$context.identity.sourceIp","userAgent":"$context.identity.userAgent","principalId":"$context.authorizer.principalId"}'
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          MetricsEnabled: 'true'
          DataTraceEnabled: 'false'
          LoggingLevel: 'INFO'

  # Log Group
  PublicApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14

  # B2B Authorizer
  ApiKeyLambdaPermission:
    Condition: IsB2B
    Type: AWS::Lambda::Permission
    DependsOn: ApiKeyAuthorizerV2
    Properties:
      FunctionName: !Sub '${ProjectName}-ApiKeyAuthorizerV2Lambda'
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PublicRestApi}/authorizers/${ApiKeyAuthorizerV2}"

  ApiKeyAuthorizerV2:
    Condition: IsB2B
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: pn-auth-fleet_ApiKeyAuthorizerV2
      Type: REQUEST
      AuthorizerResultTtlInSeconds: '300'
      AuthorizerUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ProjectName}-ApiKeyAuthorizerV2Lambda/invocations'
      IdentitySource: method.request.header.x-api-key
      RestApiId: !Ref PublicRestApi

  # WEB Authorizer
  JwtLambdaPermission:
    Condition: IsWeb
    Type: AWS::Lambda::Permission
    DependsOn: JwtAuthorizer
    Properties:
      FunctionName: !Sub '${ProjectName}-jwtAuthorizerLambda'
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PublicRestApi}/authorizers/${JwtAuthorizer}"

  JwtAuthorizer:
    Condition: IsWeb
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: pn-auth-fleet_jwtAuthorizer
      Type: TOKEN
      AuthorizerResultTtlInSeconds: '300'
      AuthorizerUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ProjectName}-jwtAuthorizerLambda/invocations'
      IdentitySource: method.request.header.Authorization
      IdentityValidationExpression: ^Bearer [-0-9a-zA-Z\._]+$
      RestApiId: !Ref PublicRestApi

  # IO Authorizer
  IoLambdaPermission:
    Condition: IsIO
    Type: AWS::Lambda::Permission
    DependsOn: IoAuthorizer
    Properties:
      FunctionName: !Sub '${ProjectName}-ioAuthorizerLambda'
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PublicRestApi}/authorizers/${IoAuthorizer}"

  IoAuthorizer:
    Condition: IsIO
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: pn-auth-fleet_IoAuthorizer
      Type: REQUEST
      AuthorizerResultTtlInSeconds: '300'
      AuthorizerUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ProjectName}-ioAuthorizerLambda/invocations'
      IdentitySource: method.request.header.x-api-key, method.request.header.x-pagopa-cx-taxid
      RestApiId: !Ref PublicRestApi

  # Backoffice Authorizer
  BackofficeLambdaPermission:
    Condition: IsBackoffice
    Type: AWS::Lambda::Permission
    DependsOn: BackofficeAuthorizer
    Properties:
      FunctionName: !Sub '${ProjectName}-backofficeAuthorizerLambda'
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PublicRestApi}/authorizers/${BackofficeAuthorizer}"

  BackofficeAuthorizer:
    Condition: IsBackoffice
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: pn-auth-fleet_backofficeAuthorizer
      Type: TOKEN
      AuthorizerResultTtlInSeconds: '300'
      AuthorizerUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ProjectName}-backofficeAuthorizerLambda/invocations'
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref PublicRestApi
      
  # Expose API to custom domain
  APIMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: !Ref ServiceApiPath
      DomainName: !Ref DnsName
      RestApiId: !Ref PublicRestApi
      Stage: !Ref PublicRestApiStage

  # Rest API CloudWatch alarm 
  APIGatewayApiLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "oncall-${MicroServiceUniqueName}-${IntendedUsage}-ApiGwLatencyAlarm"
      AlarmDescription: "CloudWatch alarm for when API Gateway latency exceeds the limit."
      AlarmActions: 
        - !Ref AlarmSNSTopicArn
      InsufficientDataActions:
        - !Ref AlarmSNSTopicArn
      OKActions:
        - !Ref AlarmSNSTopicArn
      DatapointsToAlarm: 15
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 20
      Threshold: !Ref ApiGwLatencyLimit
      TreatMissingData: notBreaching
      Namespace: "AWS/ApiGateway"
      MetricName: "Latency"
      Period: 60
      Dimensions:
        - Name: ApiName
          Value: !Sub '${MicroServiceUniqueName}-public-api-${IntendedUsage}'
      ExtendedStatistic: "p90"

  APIGatewayApiErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${MicroServiceUniqueName}-${IntendedUsage}-ApiGwAlarm"
      AlarmDescription: "CloudWatch alarm for when API Gateway has 4xx or 5xx error."
      AlarmActions: 
        - !Ref AlarmSNSTopicArn
      InsufficientDataActions:
        - !Ref AlarmSNSTopicArn
      OKActions:
        - !Ref AlarmSNSTopicArn
      DatapointsToAlarm: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 5
      Threshold: 1
      TreatMissingData: notBreaching
      Metrics:
        - Id: m1
          MetricStat:
            Metric:
              Dimensions:
                - Name: ApiName
                  Value: !Sub '${MicroServiceUniqueName}-public-api-${IntendedUsage}'
              MetricName: 4XXError
              Namespace: AWS/ApiGateway
            Period: 60
            Stat: Sum
          ReturnData: False
        - Id: m2
          MetricStat:
            Metric:
              Dimensions:
                - Name: ApiName
                  Value: !Sub '${MicroServiceUniqueName}-public-api-${IntendedUsage}'
              MetricName: 5XXError
              Namespace: AWS/ApiGateway
            Period: 60
            Stat: Sum
          ReturnData: False
        - Id: m3
          MetricStat:
            Metric:
              Dimensions:
                - Name: ApiName
                  Value: !Sub '${MicroServiceUniqueName}-public-api-${IntendedUsage}'
              MetricName: Count
              Namespace: AWS/ApiGateway
            Period: 60
            Stat: Sum
          ReturnData: False          
        - Id: e1
          Expression: "FILL(m1, 0)/FILL(m3, 1)"
          Label: !Sub "${MicroServiceUniqueName}-${IntendedUsage}-4XXError-weight-adjust"
          ReturnData: False
        - Id: e2
          Expression:
            Fn::If:
              - AlarmOn4xxEnabled
              - IF(m2>=1 OR e1>=0.1, 1, 0)
              - IF(m2>=1, 1, 0)
          Label: !Sub "${MicroServiceUniqueName}-${IntendedUsage}-APIGatewayErrorMetric"

  APIGatewayApiErrorAlarmWakeup:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "oncall-${MicroServiceUniqueName}-${IntendedUsage}-ApiGwAlarm"
      AlarmDescription: "CloudWatch alarm for when API Gateway has 4xx or 5xx error."
      AlarmActions: 
        - !Ref AlarmSNSTopicArn
      InsufficientDataActions:
        - !Ref AlarmSNSTopicArn
      OKActions:
        - !Ref AlarmSNSTopicArn
      DatapointsToAlarm: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 5
      Threshold: 1
      TreatMissingData: notBreaching
      Metrics:
        - Id: m1
          MetricStat:
            Metric:
              Dimensions:
                - Name: ApiName
                  Value: !Sub '${MicroServiceUniqueName}-public-api-${IntendedUsage}'
              MetricName: 4XXError
              Namespace: AWS/ApiGateway
            Period: 60
            Stat: Sum
          ReturnData: False
        - Id: m2
          MetricStat:
            Metric:
              Dimensions:
                - Name: ApiName
                  Value: !Sub '${MicroServiceUniqueName}-public-api-${IntendedUsage}'
              MetricName: 5XXError
              Namespace: AWS/ApiGateway
            Period: 60
            Stat: Sum
          ReturnData: False
        - Id: m3
          MetricStat:
            Metric:
              Dimensions:
                - Name: ApiName
                  Value: !Sub '${MicroServiceUniqueName}-public-api-${IntendedUsage}'
              MetricName: Count
              Namespace: AWS/ApiGateway
            Period: 60
            Stat: Sum
          ReturnData: False          
        - Id: e1
          Expression: IF(m3>=10 AND m1/m3>=0.9 AND m2/m3>=0.1, 1, 0)
          Label: !Sub "oncall-${MicroServiceUniqueName}-${IntendedUsage}-APIGatewayErrorMetric"
          
  ### Subscription filters with Kinesis  https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/SubscriptionFilters.html#DestinationKinesisExample
  SubscriptionFilter:
    Condition: SendLogToKinesis
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      RoleArn:
        Fn::GetAtt:
          - "SubscriptionFilterServiceRole"
          - "Arn"
      LogGroupName: !Ref PublicApiLogGroup
      FilterPattern: !Ref CloudwatchFilterPattern
      DestinationArn: !Ref CloudwatchLogKinesisStreamArn

  ### IAM Role used by Subscription filters to allow read logs from Cloudwatch and send logs to Kinesis Firehose
  SubscriptionFilterServiceRole:
    Condition: SendLogToKinesis
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: logs.amazonaws.com
        Version: "2012-10-17"
      Path: /
      Policies:
        -
          PolicyName: !Sub '${MicroServiceUniqueName}-access-logs-subscription-role'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - kinesis:PutRecord
                Effect: Allow
                Resource: !Ref CloudwatchLogKinesisStreamArn
              - Action:
                - "kms:Encrypt"
                - "kms:GenerateDataKey"
                - "kms:Decrypt"
                Effect: Allow
                Resource: "*"

Outputs:

  # - Public API URL
  ApiGatewayUrlBeta:
    Value: !Sub 'https://${PublicRestApi}.execute-api.${AWS::Region}.amazonaws.com/unique/'
    Description: Base URL for API Requests

  # Rest API ARN used for WAF Configuration
  APIGatewayARN:
    Value: !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis/${PublicRestApi}/stages/${PublicRestApiStage}'
    Description: "Rest API ARN" 

  # Authorizer ARN used for set authorization method
  AuthorizerARN:
    Value: 
      Fn::If:
        - IsBackoffice
        - !Ref BackofficeAuthorizer
        - Fn::If:
          - IsB2B
          - !Ref ApiKeyAuthorizerV2
          - Fn::If:
            - IsIO
            - !Ref IoAuthorizer
            - Fn::If:
                - IsPNPG
                - ""
                - !Ref JwtAuthorizer
    Description: "Authorizer ARN"

  # Rest API definition
  RestApiId:
    Value: !Ref PublicRestApi
    Description: "Rest API ID" 

  # Rest API parent id
  RootResourceId:
    Value: !GetAtt PublicRestApi.RootResourceId
    Description: "Root resource ID"

  RestApiName:
    Value: !Sub '${MicroServiceUniqueName}-public-api-${IntendedUsage}'
    Description: "Name of the Rest API"

  RestApiStageArn:
    Value: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}::/apis/${PublicRestApi}/stages/${PublicRestApiStage}"
    Description: "Stage ARN of the Rest API"

  RestApiErrorAlarmArn:
    Value: !GetAtt APIGatewayApiErrorAlarm.Arn
    Description: "ARN of the errors alarm"

  RestApiLatencyAlarmArn:
    Value: !GetAtt APIGatewayApiLatencyAlarm.Arn
    Description: "ARN of the latency alarm"
