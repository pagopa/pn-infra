AWSTemplateFormatVersion: 2010-09-09
Description: 'Create application load balancer, network load balancer and VPC link for API gateway integration'

# See https://aws.amazon.com/it/blogs/networking-and-content-delivery/application-load-balancer-type-target-group-for-network-load-balancer/

Parameters:
  LoadBalancerName:
    Type: String
    Description: Load balancers logical name

  VpcId:
    Type: AWS::EC2::VPC::Id

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>

  RaddApiCertificateArn:
    Type: String
    Description: Radd Api certificate ARN

  RaddApiDnsName:
    Type: String
    Description: Radd Api DNS Name

  HostedZoneId:
    Type: String
    Description: Hosted Zone ID

  InternalNlbIps:
    Type: List<String>
    Description: List of network load balancer IPs

Resources:

  ###                       APPLICATION LOAD BALANCER                       ###
  #############################################################################
  # Application load balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internal
      IpAddressType: ipv4
      Subnets: !Ref Subnets
      SecurityGroups:
        - !Ref WebappSecurityGroup

  # Application load balancer listener
  ApplicationLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Protocol: HTTP
      Port: 8080
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 404
            ContentType: "application/json"
            MessageBody: "{ \"error\": \"404\", \"message\": \"Load balancer rule not configured\" }"
          Order: 1

  # Application load balancer https listener
  #ApplicationLoadBalancerHttpsListener:
  #  Type: AWS::ElasticLoadBalancingV2::Listener
  #  Properties:
  #    LoadBalancerArn: !Ref ApplicationLoadBalancer
  #    Protocol: HTTPS
  #    Certificates:
      # TODO: define CertificateArn
  #      - CertificateArn: !Ref CertificateArn 
  #    Port: 8443
  #    SslPolicy: ELBSecurityPolicy-2016-08      
  #    DefaultActions:
   #     - Type: fixed-response
   #       FixedResponseConfig:
   #         StatusCode: 404
   #         ContentType: "application/json"
   #         MessageBody: "{ \"error\": \"404\", \"message\": \"Load balancer rule not configured\" }"
   #       Order: 1

  # Application security groups
  WebappSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${LoadBalancerName}-webapp-security-group
      GroupDescription: "ingres tcp 8080, egress all"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: "0.0.0.0/0"
#        - IpProtocol: tcp
#          FromPort: 8443
#          ToPort: 8443
#          CidrIp: "0.0.0.0/0"
      VpcId: !Ref VpcId


  ###                         NETWORK LOAD BALANCER                         ###
  #############################################################################

  # Network load balancer
  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: network
      Scheme: internal
      IpAddressType: ipv4
      SubnetMappings:
        - SubnetId: !Select [ 0, !Ref Subnets] 
          PrivateIPv4Address: !Select [ 0, !Ref InternalNlbIps ]
        - SubnetId: !Select [ 1, !Ref Subnets] 
          PrivateIPv4Address: !Select [ 1, !Ref InternalNlbIps ]
        - SubnetId: !Select [ 2, !Ref Subnets] 
          PrivateIPv4Address: !Select [ 2, !Ref InternalNlbIps ]
      

  # Network load balancer listener
  NetworkLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Protocol: TCP
      Port: 8080
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NetworkToApplicationLoadBalancerTargetGroup
          Order: 1

  # Network load balancer listener
  #NetworkLoadBalancerAdditionalListener:
  #  Type: AWS::ElasticLoadBalancingV2::Listener
  #  Properties:
  #    LoadBalancerArn: !Ref NetworkLoadBalancer
  #    Protocol: TCP
  #    Port: 8081
  #    DefaultActions:
  #      - Type: forward
  #        TargetGroupArn: !Ref NetworkToApplicationLoadBalancerTargetGroup
  #        Order: 1

  # Network load balancer https listener
  NetworkLoadBalancerHttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Certificates:
        - CertificateArn: !Ref RaddApiCertificateArn
      Protocol: TLS
      AlpnPolicy: 
        - None
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06
      Port: 8443
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NetworkToApplicationLoadBalancerIpTargetGroup
          Order: 1

  NetworkLoadBalancerDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt NetworkLoadBalancer.DNSName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt NetworkLoadBalancer.CanonicalHostedZoneID
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref RaddApiDnsName
      Type: A

  # Network load balancer forward to application load balancer
  NetworkToApplicationLoadBalancerTargetGroup:
    DependsOn: ApplicationLoadBalancerListener
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: alb
      Protocol: TCP
      Port: 8080
      Targets:
        - Id: !Ref ApplicationLoadBalancer
      VpcId: !Ref VpcId

  NetworkToApplicationLoadBalancerIpTargetGroup:
    DependsOn:
      - NetworkToApplicationLoadBalancerTargetGroup
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: false
      Protocol: TCP
      Port: 8080
      VpcId: !Ref VpcId
      TargetType: ip
      Targets:
        - Id: !Select [ 0, !Ref InternalNlbIps ]
          AvailabilityZone: all
        - Id: !Select [ 1, !Ref InternalNlbIps ]
          AvailabilityZone: all
        - Id: !Select [ 2, !Ref InternalNlbIps ]
          AvailabilityZone: all

  ###                        API GATEWAY INTEGRATION                        ###
  #############################################################################

  # API Gateway integrations
  NetworkLoadBalancerLink:
    Type: AWS::ApiGateway::VpcLink
    Properties:
      Name: !Sub '${LoadBalancerName}-nlb-link'
      Description: "API-GW link to Network load balancer"
      TargetArns:
        - !Ref NetworkLoadBalancer


Outputs:

  NetworkLoadBalancer:
    Value: !Ref NetworkLoadBalancer
    Description: Network Load Balancer Id

  NetworkLoadBalancerLink:
    Value: !Ref NetworkLoadBalancerLink
    Description: Used by API-Gw to connect into VPC


  ApplicationLoadBalancer:
    Value: !Ref ApplicationLoadBalancer
    Description: Application Load Balancer Id

  ApplicationLoadBalancerListenerArn:
    Value: !Ref ApplicationLoadBalancerListener
    Description: Application Load Balancer listener Arn

#  ApplicationLoadBalancerHttpsListenerArn:
#    Value: !Ref ApplicationLoadBalancerHttpsListener
#    Description: Application Load Balancer https listener Aarn
    
  ApplicationLoadBalancerDomain:
    Value: !Sub '${ApplicationLoadBalancer.DNSName}'
    Description: Application Load Balancer Domain to use for http URL
  
  ApplicationLoadBalancerDomainZone:
    Value: !Sub '${ApplicationLoadBalancer.CanonicalHostedZoneID}'
    Description: Application Load Balancer Domain Zone used for register aliases
