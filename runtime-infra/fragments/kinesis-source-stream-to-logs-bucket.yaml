AWSTemplateFormatVersion: '2010-09-09'
Description: Create Kinesis Firehose Delivery Stream from DynamoDB and Cloudwatch Data Stream

Parameters:
  
  ProjectName:
    Type: String 
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'
  
  SourceKinesisDataStreamArn:
    Type: String
    Default: "arn:aws:kinesis:eu-south-1:748275689270:stream/pn-timeline-cdc-stream"
    Description: Kinesis Data Stream ARN - DynamoDB
  SourceKinesisDataStreamKeyArn:
    Type: String
    Default: "arn:aws:kms:eu-south-1:748275689270:key/2e97a2bf-f07d-44c9-b2f2-25a8748096d6"
    Description: Kinesis Data Stream ARN - DynamoDB
  
  LogsBucketName:
    Type: String 
    Description: Name of the destination bucket
  
  LogsExporterRoleArn:
    Type: String 
    Description: Role used to access the S3 bucket where logs are exported
  
  StreamNamePrefix:
    Type: String 
    Description: to distinguish different log groups streams
  
  StreamContent:
    Type: String 
    Description: Stream's logical content type. DYNAMO_CDC or CLOUDWATCH_LOGS
    Default: CLOUDWATCH_LOGS

  AlarmSNSTopicArn:
    Description: The ARN of the Alarm SNS Topic for notifications.
    Type: String

Conditions:
  ExportLogs: !Not [ !Equals [ !Ref LogsBucketName, '' ] ]

  IsCdcStream: !Equals [ !Ref StreamContent, 'DYNAMO_CDC' ]

Resources:

  ###########################################################################
  ###     Stream from DynamoDB to S3 using  Kinesys Stream and Firehose   ###
  ###########################################################################

  ## IAM Role
  DeliveryStreamSourceServiceRole:
    Condition: ExportLogs
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
        Version: "2012-10-17"

  ## IAM Policy  
  DeliveryStreamSourceServiceRoleDefaultPolicy:
    Condition: ExportLogs
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - kinesis:DescribeStream
              - kinesis:DescribeStreamSummary
              - kinesis:GetRecords
              - kinesis:GetShardIterator
              - kinesis:ListShards
              - kinesis:ListStreams
              - kinesis:SubscribeToShard
            Effect: Allow
            Resource: !Ref SourceKinesisDataStreamArn
          - Action: kms:Decrypt
            Effect: Allow
            Resource: !Ref SourceKinesisDataStreamKeyArn
        Version: "2012-10-17"
      PolicyName: !Sub '${ProjectName}-${StreamNamePrefix}-source-read-policy'
      Roles:
        - Ref: DeliveryStreamSourceServiceRole

  ### - CloudWatchLoggingOptions - LogGroup output kinesis stream 
  #########################################
  DeliveryStreamLogGroup:
    Condition: ExportLogs
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 120
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain

  ### - CloudWatchLoggingOptions - LogStream output kinesis stream 
  #########################################
  DeliveryStreamLogGroupS3Destination:
    Condition: ExportLogs
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName:
        Ref: DeliveryStreamLogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  

  LogsKinesisDeliveryStream:
    Condition: ExportLogs
    DependsOn:
      - DeliveryStreamSourceServiceRoleDefaultPolicy
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub '${ProjectName}-${StreamNamePrefix}-delivery-stream'
      DeliveryStreamType: KinesisStreamAsSource
      KinesisStreamSourceConfiguration:
        KinesisStreamARN: !Ref SourceKinesisDataStreamArn
        RoleARN: 
          Fn::GetAtt:
            - DeliveryStreamSourceServiceRole
            - Arn
      ExtendedS3DestinationConfiguration: 
        BucketARN: !Sub arn:aws:s3:::${LogsBucketName}
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 64
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName:
            Ref: DeliveryStreamLogGroup
          LogStreamName:
            Ref: DeliveryStreamLogGroupS3Destination
        Prefix: 
          Fn::If: 
            - IsCdcStream
            - !Sub '${StreamNamePrefix}/TABLE_NAME_!{partitionKeyFromQuery:TABLE_NAME}/'
            - !Sub '${StreamNamePrefix}/'
        ErrorOutputPrefix: !Sub 'errors/${StreamNamePrefix}/'
        RoleARN: !Ref LogsExporterRoleArn
        DynamicPartitioningConfiguration:
          Enabled: true
        ProcessingConfiguration:
          Fn::If: 
            - IsCdcStream
            - Enabled: true
              Processors:
              - Type: AppendDelimiterToRecord
                Parameters:
                - ParameterName: Delimiter
                  ParameterValue: "\\n"
              - Type: MetadataExtraction
                Parameters:
                - ParameterName: MetadataExtractionQuery
                  ParameterValue: '{ TABLE_NAME : .tableName }'
                - ParameterName: JsonParsingEngine
                  ParameterValue: JQ-1.6
            - Enabled: false
      # DeliveryStreamEncryptionConfigurationInput: 
      #   KeyARN: !GetAtt LogsKinesisDeliveryStreamKmsKey.Arn
      #   KeyType: CUSTOMER_MANAGED_CMK

  # CloudWatch metric to filer error lines, in Log group
  DeliveryStreamErrorLogsMetricFilter:
    Condition: ExportLogs
    DependsOn:
      - DeliveryStreamLogGroup
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref DeliveryStreamLogGroup
      FilterPattern: '?S3 ?InternalError'
      MetricTransformations:
        - MetricValue: 1
          MetricNamespace: "LogsExport"
          MetricName: !Sub "${ProjectName}-${StreamNamePrefix}-kinesis-error"

  # Create alarm
  DeliveryStreamErrorLogsMetricAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn:
      - DeliveryStreamErrorLogsMetricFilter
    Properties:
      AlarmName: !Sub "${ProjectName}-${StreamNamePrefix}-Kinesis-Alarm"
      AlarmDescription: "CloudWatch alarm for when S3 firehose delivery error log has one line."
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref AlarmSNSTopicArn
      OKActions:
        - !Ref AlarmSNSTopicArn
      DatapointsToAlarm: 1
      MetricName: !Sub "${ProjectName}-${StreamNamePrefix}-kinesis-error"
      Namespace: "LogsExport"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 60
      Period: 60
      Statistic: Sum
      Threshold: 1

Outputs:
  DeliveryStreamErrorLogsMetricAlarmArn:
    Description: 'ARN of delivery stream error log alarm'
    Value: !GetAtt DeliveryStreamErrorLogsMetricAlarm.Arn

  DeliveryStreamArn:
    Description: 'ARN of delivery stream'
    Value: !GetAtt LogsKinesisDeliveryStream.Arn

  # LogsKinesisDeliveryStreamKmsKey:
  #   Condition: ExportLogs
  #   Type: AWS::KMS::Key
  #   Properties:
  #     Description: Firehose encryption key
  #     EnableKeyRotation: true
  #     KeyPolicy:
  #       Version: "2012-10-17"
  #       Id: !Sub '${ProjectName}-${StreamNamePrefix}-delivery-strm-keyid'
  #       Statement:
  #         - Sid: Allow application account to do everything
  #           Effect: Allow
  #           Principal:
  #             AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
  #           Action:
  #             - "kms:Create*"
  #             - "kms:Describe*"
  #             - "kms:Enable*"
  #             - "kms:List*"
  #             - "kms:Put*"
  #             - "kms:Update*"
  #             - "kms:Revoke*"
  #             - "kms:Disable*"
  #             - "kms:Get*"
  #             - "kms:Delete*"
  #             - "kms:ScheduleKeyDeletion"
  #             - "kms:CancelKeyDeletion"
  #             - kms:*Tag*
  #             - kms:*tag*
  #           Resource: "*"
  #         - Sid: Allow target accounts to use key for encrypt/decrypt
  #           Effect: Allow
  #           Principal:
  #             AWS:
  #               - !Sub arn:aws:iam::${AWS::AccountId}:root
  #               - !Ref LogsExporterRoleArn
  #           Action:
  #             - kms:Encrypt
  #             - kms:Decrypt
  #             - kms:ReEncrypt*
  #             - kms:GenerateDataKey*
  #             - kms:DescribeKey
  #           Resource: "*"
