AWSTemplateFormatVersion: "2010-09-09"
Description: Lambda template

Parameters:
  LambdaName:
    Type: String
    Description: Lambda name

  Runtime:
    Type: String
    Description: Lambda runtime
    AllowedValues:
      - nodejs18.x
    Default: nodejs18.x

  Handler:
    Type: String
    Description: Lambda Handler
    Default: "index.handler"

  CodeS3BucketName:
    Type: String
    Description: S3 bucket name

  CodeS3BucketKey:
    Type: String
    Description: S3 bucket key

  RoleArn:
    Type: String
    Description: Lambda role arn

  PutIntoVpc:
    Type: String
    Default: "true"

  GroupIdSecurityGroup:
    Type: String
    Description: Lambda security groupId

  SubnetsIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: "subnets ids comma separated list"

  TracingConfigMode:
    Type: String
    AllowedValues:
      - Active
      - PassThrough
      - NotUsed
    Default: NotUsed

  Timeout:
    Type: Number
    Default: 10
    Description: "Define timeout time for lambda"

  MemorySize:
    Type: Number
    Description: "Define memory size for lambda"
    MinValue: 128
    MaxValue: 10240

  UseLambdaInsights:
    Type: String
    Description: "Define use of lambda layer"
    Default: "true"

  UseLayer:
    Type: String
    Description: "Define use of lambda insights"

  LayerName:
    Type: String
    Description: "Define layer name"

  LayerS3BucketName:
    Type: String
    Description: "S3 layer bucket name"

  LayerS3BucketKey:
    Type: String
    Description: "S3 layer bucket key"

  EnvVariables:
    Description: Comma separated environment entries in the form key1=value1,key2=value2,....
    Type: CommaDelimitedList
    Default: ""

  TagList:
    Description: Comma separated Tag List  in the form key1=value1,key2=value2,....
    Type: CommaDelimitedList
    Default: ""

Conditions:
  HaveToDefineVpcs: !Equals ["true", !Ref PutIntoVpc]
  IsEnabledTracingConfig: !Not [!Equals [!Ref TracingConfigMode, NotUsed]]
  HaveToUseLambdaInsights: !Equals [!Ref UseLambdaInsights, "true"]
  HaveToUseLayer: !Equals [!Ref UseLayer, "true"]

Resources:
  # Lambda function
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaName
      Runtime: !Ref Runtime
      Handler: !Ref Handler
      Code:
        S3Bucket: !Ref CodeS3BucketName
        S3Key: !Ref CodeS3BucketKey
      Role: !Ref RoleArn
      VpcConfig:
        Fn::If:
          - HaveToDefineVpcs
          - SecurityGroupIds:
              - !Ref GroupIdSecurityGroup
            SubnetIds: !Ref SubnetsIds
          - !Ref AWS::NoValue
      TracingConfig:
        Mode:
          !If [
            IsEnabledTracingConfig,
            !Ref TracingConfigMode,
            !Ref "AWS::NoValue",
          ]
      Layers:
        - !If [
            HaveToUseLambdaInsights,
            !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13",
            "AWS::NoValue",
          ]
        - !If [HaveToUseLayer, !Ref LambdaLayer, "AWS::NoValue"]
      Timeout: !Ref Timeout
      MemorySize: !Ref MemorySize
      Tags:
        "Fn::Transform":
          Name: DynamicTagListMacro
          Parameters:
            KeyValue: !Ref TagList
      Environment:
        Variables:
          "Fn::Transform":
            Name: DynamicVariableListTransform
            Parameters:
              KeyValue: !Ref EnvVariables

  LambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - !Ref Runtime
      Content:
        S3Bucket: !Ref LayerS3BucketName
        S3Key: !Ref LayerS3BucketKey
      Description: NodeJs Libs layer
      LayerName: !Ref LayerName

Outputs:
  LambdaName:
    Value: !Ref Lambda
    Description: "Lambda name"

  LambdaArn:
    Value: !GetAtt Lambda.Arn
    Description: "Lambda ARN"
