AWSTemplateFormatVersion: '2010-09-09'
Description: Add an ECS Service to an exsisting ECS cluster

Transform:
  - AddLambdaContextTransform

Parameters:

  # Logical parameters
  FunctionName:
    Type: String
    Description: Microservice unique (logical) name

  AlarmSNSTopicArn:
    Type: String
    Default: '-'
    Description: 'An ARN of an SNS topic where to send alarm when DLQ contain messages'

  FunctionBucketName:
    Type: String
    Description: S3 bucket name where the lambda code is stored

  FunctionBucketKey:
    Type: String
    Description: S3 object key where the lambda code is stored

  MemorySize:
    Type: String
    Description: memory amount reserved to the task pod.

  Timeout:
    Type: String
    Default: 10
    Description: timeout for the lambda function

  Runtime:
    Type: String
    Default: 'nodejs18.x'

  FunctionManagedPolicyArn:
    Default: ''
    Type: String
    Description: |
        Managed policy containing specific policy that allow access to resources needed by the specific 
        lambda. For example queues and dynamo tables.

  # Technical parameters
  VpcId:
    Type: AWS::EC2::VPC::Id
    Default: ''
    Description: the VPC id of the vpc where's the cluster containing the current service is deployed
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Default: ''
    Description: the subnets where the service is going to be deployed

  # Function layers
  Layer1:
    Type: String
    Description: ARN of the first layer
    Default: ''
  
  Layer2:
    Type: String
    Description: ARN of the second layer
    Default: ''
  
  Layer3:
    Type: String
    Description: ARN of the third layer
    Default: ''
  
  Layer4:
    Type: String
    Description: ARN of the fourth layer
    Default: ''
  
  Layer5:
    Type: String
    Description: ARN of the fifth layer
    Default: ''
  
  # Function env environment map, maximum 15 entry
  FunctionEnvEntry1:
    Description: 1st container environment entry in the form key=value
    Type: String
    Default: ''
  FunctionEnvEntry2:
    Description: 2nd container environment entry in the form key=value
    Type: String
    Default: ''
  FunctionEnvEntry3:
    Description: 3rd container environment entry in the form key=value
    Type: String
    Default: ''
  FunctionEnvEntry4:
    Description: 4th container environment entry in the form key=value
    Type: String
    Default: ''
  FunctionEnvEntry5:
    Description: 5th container environment entry in the form key=value
    Type: String
    Default: ''
  FunctionEnvEntry6:
    Description: 6th container environment entry in the form key=value
    Type: String
    Default: ''
  FunctionEnvEntry7:
    Description: 7th container environment entry in the form key=value
    Type: String
    Default: ''
  FunctionEnvEntry8:
    Description: 8th container environment entry in the form key=value
    Type: String
    Default: ''
  FunctionEnvEntry9:
    Description: 9th container environment entry in the form key=value
    Type: String
    Default: ''
  FunctionEnvEntry10:
    Description: 10th container environment entry in the form key=value
    Type: String
    Default: ''
  FunctionEnvEntry11:
    Description: 11th container environment entry in the form key=value
    Type: String
    Default: ''
  FunctionEnvEntry12:
    Description: 12th container environment entry in the form key=value
    Type: String
    Default: ''
  FunctionEnvEntry13:
    Description: 13th container environment entry in the form key=value
    Type: String
    Default: ''
  FunctionEnvEntry14:
    Description: 14th container environment entry in the form key=value
    Type: String
    Default: ''
  FunctionEnvEntry15:
    Description: 15th container environment entry in the form key=value
    Type: String
    Default: ''
  
Conditions:
  HasManagedPolicyArn: !Not [ !Equals [ !Ref FunctionManagedPolicyArn, '' ] ] 
  HasVpcId: !Not [ !Equals [ !Ref VpcId, '' ] ]
  HasLayer1: !Not [ !Equals [ !Ref Layer1, '' ] ]
  HasLayer2: !Not [ !Equals [ !Ref Layer2, '' ] ]
  HasLayer3: !Not [ !Equals [ !Ref Layer3, '' ] ]
  HasLayer4: !Not [ !Equals [ !Ref Layer4, '' ] ]
  HasLayer5: !Not [ !Equals [ !Ref Layer5, '' ] ]

  # this condition will be overridden by the transform
  LamdaInsightsEnabled: !Equals [ 'true', 'false' ]

Resources:

  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${FunctionName}-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - Fn::If: 
          - HasManagedPolicyArn
          - !Ref FunctionManagedPolicyArn
          - !Ref "AWS::NoValue"
        - Fn::If:
          - HasVpcId
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - !Ref "AWS::NoValue"
        # basare import su nuova condition importata dalla transform
        - Fn::If:
          - LamdaInsightsEnabled
          - 'arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy'
          - !Ref "AWS::NoValue"

  Function:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref FunctionName
      Runtime: !Ref Runtime
      Role: !GetAtt FunctionRole.Arn
      Handler: index.handler
      MemorySize: !Ref MemorySize
      Timeout: !Ref Timeout
      TracingConfig:
        Mode: Active
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"    
        - Fn::If:
          - HasLayer1
          - !Ref Layer1
          - !Ref "AWS::NoValue"
        - Fn::If:
          - HasLayer2
          - !Ref Layer2
          - !Ref "AWS::NoValue"
        - Fn::If:
          - HasLayer3
          - !Ref Layer3
          - !Ref "AWS::NoValue"
        - Fn::If:
          - HasLayer4
          - !Ref Layer4
          - !Ref "AWS::NoValue"
        - Fn::If:
          - HasLayer5
          - !Ref Layer5
          - !Ref "AWS::NoValue" 
      VpcConfig:
        'Fn::If':
          - HasVpcId
          - SecurityGroupIds:
              - !GetAtt FunctionSecGroup.GroupId
            SubnetIds: !Ref Subnets
          - !Ref "AWS::NoValue"
      Code:
        S3Bucket: !Ref FunctionBucketName
        S3Key: !Ref FunctionBucketKey

  FunctionSecGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: HasVpcId
    Properties:
      GroupDescription: !Sub '${FunctionName}-security-group'
      VpcId: !Ref VpcId


Outputs:
  FunctioName:
    Value: !Ref Function
  
  FunctionArn:
    Value: !GetAtt Function.Arn

  FunctionRoleArn:
    Value: !GetAtt FunctionRole.Arn
