AWSTemplateFormatVersion: "2010-09-09"
Description: "Infra storage resources"

Parameters:
  
  ProjectName:
    Type: String
    Default: pn
    Description: Base name for pn project
  
  Version:
    Type: String

  BucketSuffix:
    Type: String
    Description: Suffix to the log bucket name
  
  SafeStorageAccountId:
    Type: String
    Default: '-'
    Description: Safestorage Account ID

  CdcStreamRetentionHours:
    Type: Number
    Description: 'Change Data Capture Kinesis Data Stream retention period in hours'

  CdcStreamShardCount:
    Type: Number
    Default: 0
    Description: 'Number of shards in the stream'

  CdcStreamMode:
    Description: Stream Mode.
    Default: ON_DEMAND
    Type: String
    AllowedValues: [ON_DEMAND, PROVISIONED]

  LogsStreamRetentionHours:
    Type: Number
    Description: 'Cloudwatch Logs Kinesis Data Stream retention period in hours'

  LogsStreamShardCount:
    Type: Number
    Default: 0
    Description: 'Number of shards in the stream'

  LogsStreamMode:
    Description: Stream Mode.
    Default: ON_DEMAND
    Type: String
    AllowedValues: [ON_DEMAND, PROVISIONED]

  AlarmSNSTopicArn:
    Type: String

  AlarmSNSTopicName:
    Type: String

Conditions:
  MakeBucketCondition: !Not [ !Equals [ !Ref BucketSuffix, '' ]]
  
  HasStorageStorageAccountId: !Not [ !Equals [ !Ref SafeStorageAccountId, '-' ]]

  ActivateSafeStorageCondition: !And [ !Condition MakeBucketCondition, !Condition HasStorageStorageAccountId]

  CdcOnDemandDisabled: !Not [!Equals [!Ref CdcStreamMode, ON_DEMAND]]
  LogsOnDemandDisabled: !Not [!Equals [!Ref LogsStreamMode, ON_DEMAND]]

Resources:
  
  ### - S3 Bucket for logs storages
  ###########################################
  LogsBucket:
    Condition: MakeBucketCondition
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub '${ProjectName}-logs-bucket-${AWS::Region}-${AWS::AccountId}-${BucketSuffix}'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Ref LogsBucketKmsKey              
              SSEAlgorithm: 'aws:kms'
            BucketKeyEnabled: true
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # - Log storage cryptography key 
  LogsBucketKmsKey:
    Condition: MakeBucketCondition
    Type: AWS::KMS::Key
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: Used by Assumed Roles to Encrypt/Decrypt raw data
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Id: !Ref AWS::StackName
        Statement:
          - Sid: Allow data account to do everything
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - "kms:Create*"
              - "kms:Describe*"
              - "kms:Enable*"
              - "kms:List*"
              - "kms:Put*"
              - "kms:Update*"
              - "kms:Revoke*"
              - "kms:Disable*"
              - "kms:Get*"
              - "kms:Delete*"
              - "kms:ScheduleKeyDeletion"
              - "kms:CancelKeyDeletion"
              - kms:*Tag*
              - kms:*tag*
            Resource: "*"
          - Sid: Allow target accounts to use key for encrypt/decrypt
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: "*"
          - Fn::If:
            - ActivateSafeStorageCondition
            - Sid: Allow safe storage kms usage
              Effect: Allow
              Action:
                - kms:Encrypt
                - kms:Decrypt
                - kms:GenerateDataKey*
              Principal:
                Service: "cloudtrail.amazonaws.com"
              Resource: "*"
              Condition:
                ArnLike: 
                  aws:SourceArn: !Sub "arn:${AWS::Partition}:cloudtrail:${AWS::Region}:${SafeStorageAccountId}:trail/*"
            - !Ref AWS::NoValue


## KINESIS SOURCE STREAM FOR Change Data Capture

  ### AWS KMS / Server-side encryption for Kinesis Stream 
  CdcKinesisServerSideEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Statement:
          - Action: kms:*
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":iam::"
                    - Ref: AWS::AccountId
                    - :root
            Resource: "*"
        Version: "2012-10-17"
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain

  ### Kinesis Data Stream 
  CdcKinesisStream:
    Type: AWS::Kinesis::Stream
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Name: !Sub '${ProjectName}-cdc-stream'
      RetentionPeriodHours: !Ref CdcStreamRetentionHours
      ShardCount: !If [CdcOnDemandDisabled, !Ref CdcStreamShardCount, !Ref "AWS::NoValue"]
      StreamEncryption:
        EncryptionType: KMS
        KeyId:
          Fn::GetAtt:
            - CdcKinesisServerSideEncryptionKey
            - Arn
      StreamModeDetails:
        StreamMode: !Ref CdcStreamMode   

  ## KINESIS SOURCE STREAM FOR Logs
  LogsKinesisServerSideEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Statement:
          - Action: kms:*
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":iam::"
                    - Ref: AWS::AccountId
                    - :root
            Resource: "*"
        Version: "2012-10-17"
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain

  ### Kinesis Data Stream 
  LogsKinesisStream:
    Type: AWS::Kinesis::Stream
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Name: !Sub '${ProjectName}-logs-stream'
      RetentionPeriodHours: !Ref LogsStreamRetentionHours
      ShardCount: !If [LogsOnDemandDisabled, !Ref LogsStreamShardCount, !Ref "AWS::NoValue"]
      StreamEncryption:
        EncryptionType: KMS
        KeyId:
          Fn::GetAtt:
            - LogsKinesisServerSideEncryptionKey
            - Arn
      StreamModeDetails:
        StreamMode: !Ref LogsStreamMode   
        
Outputs:
  LogsBucketKmsKeyArn:
    Value: 
      Fn::If:
        - MakeBucketCondition
        - !GetAtt LogsBucketKmsKey.Arn
        - ''
  
  LogsBucketName:
    Value: 
      Fn::If:
        - MakeBucketCondition
        - !Ref LogsBucket
        - ''

  CdcKinesisStreamName:
    Value: !Ref CdcKinesisStream
    Description: 'Kinesis source stream name'
  
  CdcKinesisStreamArn:
    Value: !GetAtt CdcKinesisStream.Arn
    Description: 'Kinesis source stream name ARN'

  CdcKinesisStreamKeyArn:
    Value: !GetAtt CdcKinesisServerSideEncryptionKey.Arn
    Description: 'Arn of the KMS key used to encrypt the Kinesis source stream'

  LogsKinesisStreamName:
    Value: !Ref LogsKinesisStream
    Description: 'Kinesis source stream name'
  
  LogsKinesisStreamArn:
    Value: !GetAtt LogsKinesisStream.Arn
    Description: 'Kinesis source stream name ARN'

  LogsKinesisStreamKeyArn:
    Value: !GetAtt LogsKinesisServerSideEncryptionKey.Arn
    Description: 'Arn of the KMS key used to encrypt the Kinesis source stream'

  BucketSuffix: # used to generate kms alias
    Value: !Ref BucketSuffix 

  # Pass through parameters
  AlarmSNSTopicArn:
    Value: !Ref AlarmSNSTopicArn

  AlarmSNSTopicName:
    Value: !Ref AlarmSNSTopicName
  
  SafeStorageAccountId:
    Value: !Ref SafeStorageAccountId

  Version:
    Value: !Ref Version